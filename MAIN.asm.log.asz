------------------------------------------------
Asm2Hex : Version 0.7.2
 + Z80 - ZilogMnemonic : Rev.0d
------------------------------------------------
------------------------
####     PASS:2     ####
------------------------
                      	
                      	;=================================================
                      	;PC-8001 SD-SYSTEM
                      	;=================================================
                      	
                      	;・要望、不具合報告はTwitter @chiqlappe宛にお願いします。
                      	
                      	
                      	INCLUDE "LABELS.ASM"
                      	
                      	;=============================
                      	;共通ラベル
                      	;=============================
                      	
  0000                	FALSE			EQU	00H
  00FF                	TRUE			EQU	!FALSE
  0000                	EOL			EQU	00H
                      	
                      	;=============================
                      	;専用ラベル
                      	;=============================
                      	
  00FF                	USE_VIRTUAL_LED		EQU	TRUE		;MMCドライバ用
  00FF                	USE_VIRTUAL_SOUND	EQU	TRUE		;
  0000                	SHOW_DATE		EQU	FALSE		;FILESで日時を表示する
                      	
  0010                	CLSTR_STACK_SIZE	EQU	10H		;[CD.ASM]クラスタスタックサイズ
                      	
  01C6                	IDX_PP_SCTR		EQU	01C6H		;[FS.ASM]プライマリパーティション開始セクタ＃へのインデックス値
  000B                	IDX_BPB			EQU	000BH		;[FS.ASM]BPB領域へのインデックス値
                      	
  0200                	SCTR_SIZE		EQU	200H		;セクタサイズ
  0010                	DENT_PER_SCTR		EQU	10H		;１セクタ当たりのディレクトリエントリ数
  0002                	MIN_CLSTR		EQU	 0002H		;クラスタ＃の最小値
  FFF6                	MAX_CLSTR		EQU	0FFF6H		;クラスタ＃の最大値（理論値）
                      	
  000B                	DNAME_SIZE		EQU	0BH		;ディレクトリエントリ名のサイズ 8+3=11
  0020                	DENT_SIZE		EQU	20H		;ディレクトリエントリ全体のサイズ
                      	
  0000                	ROOT			EQU	0000H		;ルートディレクトリのクラスタ＃ 実際のクラスタ＃ではなく単なる識別用ID
                      	
  0000                	IDX_NAME		EQU	00H		;ディレクトリ情報のオフセット値 名前 １１バイト（拡張子部を含む）
  0008                	IDX_EXT			EQU	08H		;ディレクトリ情報のオフセット値 拡張子 ３バイト
  000B                	IDX_ATRB		EQU	0BH		;ディレクトリ情報のオフセット値 属性値 １バイト
  000E                	IDX_CTIME		EQU	0EH		;ディレクトリ情報のオフセット値 作成時刻 ２バイト
  0010                	IDX_CDATE		EQU	10H		;ディレクトリ情報のオフセット値 作成日   ２バイト
  0012                	IDX_ADATE		EQU	12H		;ディレクトリ情報のオフセット値 アクセス日 ２バイト
  0016                	IDX_TIME		EQU	16H		;ディレクトリ情報のオフセット値 更新時刻 ２バイト
  0018                	IDX_DATE		EQU	18H		;ディレクトリ情報のオフセット値 更新日   ２バイト
  001A                	IDX_FAT			EQU	1AH		;ディレクトリ情報のオフセット値 FATエントリ番号 ２バイト
  001C                	IDX_SIZE		EQU	1CH		;ディレクトリ情報のオフセット値 ファイルサイズ  ４バイト
                      	
  0004                	IDX_BADR		EQU	04H		;バッファ情報のオフセット値 バッファの先頭アドレス ２バイト
  0006                	IDX_BUPD		EQU	06H		;バッファ情報のオフセット値 更新フラグ １バイト
                      	
  002F                	SEPARATOR		EQU	"/"
  0010                	ATRB_DIR		EQU	10H		;ディレクトリエントリの属性値
  0020                	ATRB_FILE		EQU	20H		;
  00E5                	ID_DISABLED		EQU	0E5H		;無効化されたディレクトリエントリの認識コード
                      	
  0006                	ATRB_SIZE		EQU	06H		;ファイル属性文字列のサイズ
                      	
                      	;WORK_AREA		EQU	07B00H		;ワークエリア
  FF3D                	STR_BUFF		EQU	0FF3DH		;文字列バッファ ~0FF9CH
  0050                	STR_BUFF_SIZE		EQU	50H		;文字列バッファのサイズ（終了コード１文字分含む）
                      	
                      	;STACK_AREA		EQU	0FFFFH
  0200                	CB_BYTES		EQU	0200H		;コールバック間隔のバイト数 512バイト=1セクタサイズ
[EOF:LABELS.asm]
                      	INCLUDE	"N80.ASM"
                      	
                      	;出典	PC-Techknow8000（システムソフト）
                      	;	PC-8001マシン語活用ハンドブック 初級編（秀和システムトレーディング株式会社）
                      	
                      	;-----------------------------
                      	;ASCII 定数
                      	;-----------------------------
  0007                	BEL		EQU	07H
  0008                	BS		EQU	08H
  000A                	LF		EQU	0AH
  000C                	CL		EQU	0CH
  000D                	CR		EQU	0DH
  0020                	SPC		EQU	20H
  0022                	DQUOTE		EQU	22H
  0027                	SQUOTE		EQU	27H
                      	
                      	;-----------------------------
                      	;PC-8001システムコール
                      	;-----------------------------
                      	
                      	;0000H
  006A                	WARMBOOT	EQU	06AH	;ホットスタート
  0081                	BASIC		EQU	081H	;BASICへ戻る
  0257                	PUTCH		EQU	0257H	;AレジスタをASCII出力 (-)
  0350                	BEEP		EQU	0350H	;BEEPを鳴らす (A,F,E,H,L)
  03A9                	LOCATE		EQU	03A9H	;LOCATE(H,L)
  0451                	CLRLN		EQU	0451H	;１行消去(A,F,B,C,D,E,F,H,L)
  045A                	CLS		EQU	045AH	;画面消去
  0843                	WIDTH		EQU	0843H	;WIDTH命令 HLにパラメータのポインタを入れてコールする "WIDTH 80,25" = 38H,30H,2CH,32H,35H,00H
  09A3                	WIDTH_X		EQU	09A3H	;WIDTH命令 A<-横方向
  09D7                	WIDTH_Y		EQU	09D7H	;WIDTH命令 A<-縦方向
  0BD2                	CURSOFF		EQU	0BD2H	;カーソル消去
  0BE2                	CURSON		EQU	0BE2H	;カーソル表示
  0CF1                	ISBRK		EQU	0CF1H	;STOP,ESCキー押下でCY<-1 非押下でZ<-1
  0F75                	KEYWAIT		EQU	0F75H	;１文字入力待ち A<-CODE (A,F)
                      	
                      	;1000H
  1602                	TIME_READ	EQU	01602H	;タイマICの日時情報をワークに書き込む
  1663                	TIME_WRT	EQU	01663H	;ワークの日時情報をタイマICに書き込む
  17E9                	SETFREADR	EQU	017E9H	;フリーエリアの開始アドレスをHLにセットする
  1875                	DISKB_ERR	EQU	01875H	;Disk Basic Feature エラー
  1B7E                	SCRNEDIT	EQU	01B7EH	;スクリーン編集実行 KEYBUFに入力文字列 STOPキーによる中断でCY<-1 (ALL)
                      	
                      	;2000H
  2D13                	PRTHLDEC	EQU	02D13H	;HLレジスタの値を10進数で出力する 0抑止
                      	
                      	;3000H
  309F                	CNVFACDEC	EQU	0309FH	;16ビット10進文字列変換 FACを(HL)以降に文字列で格納する
  3BF9                	ERROR		EQU	03BF9H	;エラー出力 E<-エラーコード
  3D76                	PRGFIT		EQU	03D76H	;BASICプログラムのアドレスをその番地にフィットさせる
  3DE0                	NEW		EQU	03DE0H	;NEW
  3DF4                	RUN		EQU	03DF4H	;RUN
  3E5C                	INPUT		EQU	03E5CH	;=INPUT KEYBUFに入力文字列+0 HL<-KEYBUF-1
                      	
                      	;4000H
  409B                	TPSEEK		EQU	0409BH	;次の文字が見つかるまでストリングポインタを進める 見つからなければZ<-1
  44C7                	CNVDECWORD	EQU	044C7H	;(HL)以降に格納された"0"~"65529"の10進数文字列を2バイトの数値に変換してDEに入れる 
  4A8F                	EVALEXP		EQU	04A8FH	;ストリングポインタの式を評価してFACに入れる
                      	
                      	;5000H
  52ED                	PRINT		EQU 	052EDH	;(HL)以降に格納された文字列を出力する (ALL)
  56FA                	BYTE_EVALEXP	EQU	056FAH	;ストリングポインタの式を評価してAに入れる
                      	
  592A                	FAC2INT		EQU	0592AH	;HL<-INT(FAC)
  5C66                	MON		EQU	05C66H	;モニタ復帰
  5E21                	GETADRS		EQU	05E21H	;キーボードから4桁の16進を入力してHLに格納する
  5E83                	CNVBYTEHEX	EQU	05E83H	;1バイトの数値を2バイトの16進文字列に変換 A->D,E
  5B85                	RNUM2RAD	EQU	05B85H	;行番号→行アドレス
  5B86                	RAD2RNUM	EQU	05B86H	;行アドレス→行番号。BASIC保存前に実行する
  5EA0                	CNVHEXBYTE	EQU	05EA0H	;2バイトの16進文字列を1バイトの数値に変換 D,E->A
  5EC0                	PRTHLHEX	EQU	05EC0H	;HLレジスタの値を4桁の16進数で出力する (A)
  5EC5                	PRTAHEX		EQU	05EC5H	;Aレジスタの値を2桁の16進数で出力する (A)
  5ED3                	CPHLDE		EQU	05ED3H	;ペアレジスタ比較 HL-DE (-)
  5FC1                	CAPITAL		EQU	05FC1H	;大文字化
  5FCA                	PUT_CR		EQU 	05FCAH	;改行出力 (A)
  5FD4                	PUT_SPC		EQU	05FD4H	;スペース出力
                      	
                      	
                      	;-----------------------------
                      	;PC-8001ワークエリア
                      	;-----------------------------
  EA68                	FKEY_FLAG	EQU	0EA68H	;ファンクションキーが押されていれば1になる
  EA76                	DT_SEC		EQU	0EA76H	;秒 BCD形式 "CALL TIME_READ"が必要
  EA77                	DT_MIN		EQU	0EA77H	;分
  EA78                	DT_HOUR		EQU	0EA78H	;時
  EA79                	DT_DAY		EQU	0EA79H	;日
  EA7A                	DT_MONTH	EQU	0EA7AH	;月
  EA7B                	DT_YEAR		EQU	0EA7BH	;年
  EA7C                	FKEYDATA	EQU	0EA7CH	;ファンクションキーの内容
                      	
  EAC0                	FKEY_POINTER	EQU	0EAC0H	;リセット時ACTIVE_FKEYにセットされているアドレス
  EB50                	STACK_BEGIN	EQU	0EB50H	;スタックの底
  EB52                	EXECLINENUM	EQU	0EB52H	;現在実行中の行番号 停止中は0FFFFH
  EB54                	BASBEGIN	EQU	0EB54H	;N-BASICのプログラムエリア先頭アドレス ~0EB55H (8021H)
  EC96                	KEYBUF		EQU	0EC96H	;キー入力された文字列の格納先
  EDC0                	ACTIVE_FKEY	EQU	0EDC0H	;押されているファンクションキーのアドレス
  EF54                	FREE_END	EQU	0EF54H	;フリーエリアの最終アドレス ~0EF55H (0E9FFH)
  EF79                	STR_BEGIN	EQU	0EF79H	;文字列フリースペース先頭アドレス ~0EF7AH
  EFA0                	VARBEGIN	EQU	0EFA0H	;変数エリアの先頭アドレス   ~0EFA1H ( 8023H)
  EFA2                	ARRBEGIN	EQU	0EFA2H	;配列エリアの先頭アドレス   ~0EFA3H ( 8023H)
  EFA4                	FREBEGIN	EQU	0EFA4H	;フリーエリアの先頭アドレス ~0EFA5H ( 8023H)
  F216                	SYSUNUSED	EQU	0F216H	;システム未使用領域	    ~0F2FFH 233バイト
  F300                	VRAM		EQU	0F300H	;VRAMエリア                 ~0FEB7H
  FF3D                	BOOTSTACK	EQU	0FF3DH	;リセット時のスタックエリア ~0FFFEH 193バイト
                      	
  EDCE                	RS232BF1	EQU	0EDCEH	;RS-232C CH1 バッファ       ~0EE4DH 128バイト
  EE4E                	RS232BF2	EQU	0EE4EH	;RS-232C CH2 バッファ       ~0EECDH 128バイト
  EED2                	IEEEWK		EQU	0EED2H	;IEEE用ワークエリア	    ~0EEF5H 35バイト
                      	
  F0FD                	ENT_CMD		EQU	0F0FDH	;拡張命令のエントリアドレス+1
  F10C                	ENT_TALK	EQU	0F10CH	;
  F115                	ENT_POLL	EQU	0F115H	;
  F13C                	ENT_MERGE	EQU	0F13CH	;
  F142                	ENT_KILL	EQU	0F142H	;
  F139                	ENT_LOAD	EQU	0F139H	;
  F14B                	ENT_SAVE	EQU	0F14BH	;
  F14E                	ENT_FILES	EQU	0F14EH	;
  F154                	ENT_MOUNT	EQU	0F154H	;
  F13F                	ENT_NAME	EQU	0F13FH	;
  F11B                	ENT_RBYTE	EQU	0F11BH	;
                      	
                      	;-----------------------------
                      	;エラーコード
                      	;-----------------------------
  0002                	SYNTAX_ERROR		EQU	02H
  0005                	ILLEGAL_FUNCTION_CALL	EQU	05H
  0007                	OUT_OF_MEMORY		EQU	07H
  000F                	STRING_TOO_LONG		EQU	0FH
  0015                	UNPRINTABLE		EQU	15H
  0016                	MISSING_OPERAND		EQU	16H
  0017                	LINE_BFFR_OVERFLOW	EQU	17H
  0019                	BAD_FILE_DATA		EQU	19H
                      	;FILE_NOT_FOUND		EQU	35H
                      	;FILE_ALREADY_EXISTS	EQU	3AH
                      	
[EOF:N80.asm]
                      	
  0000                	DEBUG	EQU	FALSE				;
                      	
  6000                		ORG	06000H
                      	
  6000  4142          		DB	"AB"				;自動起動用マーカー
                      	
                      	if DEBUG
;;                   -		CALL	INIT_DEBUG			;デバッグルーチン初期化
                      	endif
                      	
  6002  CDDD67        		CALL	INIT_FAT16			;FAT16関連ワーク初期化
  6005  CD786A        		CALL	INIT_DW				;ダブルワード用スタック初期化
  6008  CD6760        		CALL	INIT_CMDHOOK			;コマンドフック書き換え
  600B  CD3760        		CALL	INIT_FKEY			;ファンクションキー設定変更
  600E  CD1B60        		CALL	INIT_BASIC			;BASIC初期化
  6011  CD2375        		CALL	CMD_ON				;インフォメーションスイッチ
                      	
  6014  21CA77        		LD	HL,MSG_TITLE			;タイトル表示
  6017  CDED52        		CALL	PRINT				;
  601A  C9            		RET					;
                      	
                      	;=================================================
                      	;BASIC初期化
                      	;=================================================
  601B                	INIT_BASIC:
  601B  2158EF        		LD	HL,0EF58H			;ストリングディスクリプタ初期化
  601E  2256EF        		LD	(0EF56H),HL			;
  6021  212180        		LD	HL,8021H			;
  6024  2254EB        		LD	(BASBEGIN),HL			;BASIC先頭アドレス
  6027  23            		INC	HL				;
  6028  23            		INC	HL				;
  6029  22A0EF        		LD	(VARBEGIN),HL			;変数先頭アドレス
  602C  23            		INC	HL				;
  602D  23            		INC	HL				;
  602E  22A2EF        		LD	(ARRBEGIN),HL			;配列先頭アドレス
  6031  23            		INC	HL				;
  6032  23            		INC	HL				;
  6033  22A4EF        		LD	(FREBEGIN),HL			;フリーエリア先頭アドレス
  6036  C9            		RET					;
                      	
                      	;=================================================
                      	;ファンクションキー登録
                      	;=================================================
  6037                	INIT_FKEY:
  6037  217CEA        		LD	HL,FKEYDATA			;
  603A  115860        		LD	DE,.DATA			;
  603D  0E03          		LD	C,03H				;
  603F  0605          	.L2:	LD	B,05H				;
  6041  1A            	.L1:	LD	A,(DE)				;
  6042  77            		LD	(HL),A				;
  6043  23            		INC	HL				;
  6044  13            		INC	DE				;
  6045  10FA          		DJNZ	.L1				;
  6047  CD4E60        		CALL	.L3				;
  604A  0D            		DEC	C				;
  604B  20F2          		JR	NZ,.L2				;
  604D  C9            		RET					;
                      	
  604E  C5            	.L3:	PUSH	BC				;
  604F  AF            		XOR	A				;
  6050  060B          		LD	B,11				;
  6052  77            	.L4:	LD	(HL),A				;
  6053  23            		INC	HL				;
  6054  10FC          		DJNZ	.L4				;
  6056  C1            		POP	BC				;
  6057  C9            		RET					;
                      	
  6058  6D6F756E74    	.DATA:	DB	"mount"				;F1
  605D  6C6F616420    		DB	"load "				;F2
  6062  66696C6573    		DB	"files"				;F3
                      	
                      	;=================================================
                      	;コマンドフックの書き換え
                      	;=================================================
  6067                	INIT_CMDHOOK:
  6067  211776        		LD	HL,FILES			;ファイル一覧を表示する
  606A  224EF1        		LD	(ENT_FILES),HL			;
  606D  216C75        		LD	HL,LOAD				;ファイルをロードする
  6070  2239F1        		LD	(ENT_LOAD),HL			;
  6073  21FC75        		LD	HL,MOUNT			;SDCをマウントする
  6076  2254F1        		LD	(ENT_MOUNT),HL			;
  6079  218975        		LD	HL,SAVE				;ファイルをセーブする
  607C  224BF1        		LD	(ENT_SAVE),HL			;
  607F  21CE74        		LD	HL,CMD				;汎用コマンド
  6082  22FDF0        		LD	(ENT_CMD),HL			;
  6085  21C675        		LD	HL,KILL				;ファイルを削除する
  6088  2242F1        		LD	(ENT_KILL),HL			;
  608B  21B675        		LD	HL,POLL				;ワーキングディレクトリを変更する
  608E  2215F1        		LD	(ENT_POLL),HL			;
  6091  213176        		LD	HL,MERGE			;CMTファイルにプログラムを追記する
  6094  223CF1        		LD	(ENT_MERGE),HL			;
  6097  215476        		LD	HL,NAME				;ファイル名を変更する
  609A  223FF1        		LD	(ENT_NAME),HL			;
                      	
  609D  215675        		LD	HL,RBYTE			;任意のファイルをロードする
  60A0  221BF1        		LD	(ENT_RBYTE),HL			;
                      	
  60A3  C9            		RET					;
                      	
                      	;=================================================
                      	;インクルードファイル
                      	;=================================================
                      	
                      	if DEBUG
;;                   -	INCLUDE "DEBUG.asm"				;デバッグ用ツール
                      	endif
                      	
                      	INCLUDE	"MMC.asm"				;MMCドライバ
                      	
                      	;MMCドライバ
                      	;・出典 http://w01.tp1.jp/~a571632211/pc8001/index.html
                      	
  0001                	HI		EQU	1
                      	
  0010                	PA_IN		EQU	00010000B
  0002                	PB_IN		EQU	00000010B
  0001                	PCL_IN		EQU	00000001B
  0008                	PCH_IN		EQU	00001000B
                      	
  00FC                	A8255		EQU 	0FCH		;8255 ポートアドレス
  00FC                	PPI_A		EQU	A8255		;
  00FD                	PPI_B		EQU	A8255+1		;
  00FE                	PPI_C		EQU	A8255+2		;
  00FF                	PPI_CTL		EQU	A8255+3		;
                      	
  0088                	PPI_MMC		EQU	10000000B + PCH_IN	;MMCドライバで使用する8255のポート設定
                      	
  F34E                	VLED_POS:	EQU	VRAM+78			;仮想LEDの位置
                      	
                      	;MMCADR0:	DS	1	;MMC 物理アドレス L   MMCのアドレスは32ビット長
                      	;MMCADR1:	DS	1	;MMC 物理アドレス H
                      	;MMCADR2:	DS	1	;MMC 物理アドレス HH
                      	;MMCADR3:	DS	1	;MMC 物理アドレス HHH
                      	
                      	;=================================================
                      	;[MMC]8255モードセット
                      	;=================================================
  60A4                	INIT_8255:
  60A4  E5            		PUSH	HL
                      	
  60A5  3E88          		LD	A,PPI_MMC		;MODE=0,A=IN,B=OUT,CH=IN,CL=OUT
  60A7  D3FF          		OUT	(PPI_CTL),A
  60A9  3EF7          		LD	A,0F7H
  60AB  D3FD          		OUT	(PPI_B),A
  60AD  DBFD          		IN	A,(PPI_B)
  60AF  FEF7          		CP	0F7H
  60B1  2809          		JR	Z,.L1
                      	
  60B3  21E377        		LD	HL,MSG_NOT_FOUND
  60B6  CDED52        		CALL	PRINT
  60B9  CD750F        		CALL	KEYWAIT
                      	
  60BC  3EFF          	.L1:	LD	A,0FFH
  60BE  D3FD          		OUT	(PPI_B),A
                      	
  60C0  E1            		POP	HL
  60C1  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMCに1バイト送る
                      	;IN  C=送信データ
                      	;OUT -
                      	;=================================================
  60C2                	MMC_1WR:
  60C2  C5            		PUSH	BC
  60C3  0608          		LD	B,8
  60C5  DBFD          	.L1:	IN	A,(PPI_B)
  60C7  E6FE          		AND	0FEH
  60C9  D3FD          		OUT	(PPI_B),A
  60CB  CDFF62        		CALL	MMC_WAIT
  60CE  DBFD          		IN	A,(PPI_B)
  60D0  E6FD          		AND	0FDH
  60D2  CB11          		RL	C
  60D4  3002          		JR	NC,.L2
  60D6  F602          		OR	02H
  60D8  D3FD          	.L2:	OUT	(PPI_B),A
  60DA  CDFF62        		CALL	MMC_WAIT
  60DD  DBFD          		IN	A,(PPI_B)
  60DF  F601          		OR	01H
  60E1  D3FD          		OUT	(PPI_B),A
  60E3  CDFF62        		CALL	MMC_WAIT
  60E6  10DD          		DJNZ	.L1
  60E8  C1            		POP	BC
  60E9  DBFD          		IN	A,(PPI_B)
  60EB  F602          		OR	02H
  60ED  D3FD          		OUT	(PPI_B),A
  60EF  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMCから1バイト受け取る
                      	;IN  -
                      	;OUT C=受信データ
                      	;=================================================
  60F0                	MMC_1RD:
  60F0  0608          		LD	B,8
  60F2  DBFD          	.LOOP:	IN	A,(PPI_B)
  60F4  E6FE          		AND	0FEH
  60F6  D3FD          		OUT	(PPI_B),A
  60F8  F601          	        OR	001H
  60FA  D3FD          		OUT	(PPI_B),A
  60FC  AF            		XOR	A
  60FD  CB11          		RL	C
  60FF  DBFE          		IN	A,(PPI_C)
  6101  E610          		AND	010H
  6103  2801          		JR	Z,.L1
  6105  0C            		INC	C
  6106  10EA          	.L1:	DJNZ	.LOOP
  6108  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMCから1バイトレスポンスを受け取る
                      	;IN  -
                      	;OUT C=レスポンス
                      	;=================================================
  6109                	MMC_RES:
  6109  AF            		XOR	A				;タイムアウト用カウンタリセット
  610A  32737D        		LD	(TIMEOUT),A
                      	
  610D  E5            	.LOOP:	PUSH	HL
  610E  21737D        		LD	HL,TIMEOUT
  6111  34            		INC	(HL)
  6112  7E            		LD	A,(HL)
  6113  E1            		POP	HL
  6114  B7            		OR	A
  6115  2810          		JR	Z,MMC_TIMEOUT
                      	
  6117  0601          		LD	B,1
  6119  CD4661        		CALL	MMC_CLK
                      	
  611C  DBFE          		IN	A,(PPI_C)
  611E  E610          		AND	010H
  6120  20EB          		JR	NZ,.LOOP
                      	
  6122  010007        		LD	BC,0700H			;B<-7
  6125  18CB          		JR	MMC_1RD.LOOP
                      	
                      	;=================================================
                      	;[MMC]タイムアウト処理
                      	;=================================================
  6127                	MMC_TIMEOUT:
  6127  CD506A        		CALL	IPRINT
  612A  53657420534443		DB	"Set SDC then ",DQUOTE,"MOUNT",DQUOTE,CR,LF,EOL
        207468656E2022	
        4D4F554E54220D	
        0A00          	
  6141  1E15          		LD	E,UNPRINTABLE
  6143  C3F93B        		JP	ERROR
                      	
                      	;=================================================
                      	;[MMC]MMCクロック
                      	;IN  B=回数
                      	;OUT 
                      	;=================================================
  6146                	MMC_CLK:
  6146  DBFD          		IN	A,(PPI_B)
  6148  E6FE          		AND	11111110B
  614A  D3FD          		OUT	(PPI_B),A
  614C  CDFF62        		CALL	MMC_WAIT
  614F  DBFD          		IN	A,(PPI_B)
  6151  F601          		OR	00000001B
  6153  D3FD          		OUT	(PPI_B),A
  6155  CDFF62        		CALL	MMC_WAIT
  6158  10EC          		DJNZ	MMC_CLK
  615A  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]CS=HにしてMMCクロックX8
                      	;=================================================
  615B                	MMC_CLK8:
  615B  DBFD          		IN	A,(PPI_B)
  615D  F604          		OR	00000100B
  615F  D3FD          		OUT	(PPI_B),A  			;CS=H
  6161  0608          		LD	B,8
  6163  CD4661        		CALL	MMC_CLK   			;MMCクロック実行
  6166  DBFD          		IN	A,(PPI_B)
  6168  E6FB          		AND	11111011B
  616A  D3FD          		OUT	(PPI_B),A  			;CS=L
  616C  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMCをSPIモードに初期化する
                      	;=================================================
  616D                	MMC_INIT:
  616D  DBFD          		IN	A,(PPI_B)
  616F  F604          		OR	00000100B
  6171  D3FD          		OUT	(PPI_B),A
  6173  06C8          		LD	B,200
  6175  CD4661        		CALL	MMC_CLK
  6178  DBFD          		IN	A,(PPI_B)
  617A  E6FB          		AND	11111011B
  617C  D3FD          		OUT	(PPI_B),A
  617E  0E40          		LD	C,01000000B
  6180  CDC260        		CALL	MMC_1WR
  6183  0E00          		LD	C,0
  6185  CDC260        		CALL	MMC_1WR
  6188  CDC260        		CALL	MMC_1WR
  618B  CDC260        		CALL	MMC_1WR
  618E  CDC260        		CALL	MMC_1WR
  6191  0E95          		LD	C,10010101B
  6193  CDC260        		CALL	MMC_1WR
  6196  CD0961        		CALL	MMC_RES
  6199  3E01          		LD	A,01H
  619B  B9            		CP	C
  619C  20CF          		JR	NZ,MMC_INIT
                      	
  619E  CD5B61        	.L1:	CALL	MMC_CLK8
  61A1  0E41          		LD	C,01000001B
  61A3  CDC260        		CALL	MMC_1WR
  61A6  0E00          		LD	C,0
  61A8  CDC260        		CALL	MMC_1WR
  61AB  CDC260        		CALL	MMC_1WR
  61AE  CDC260        		CALL	MMC_1WR
  61B1  CDC260        		CALL	MMC_1WR
  61B4  0EF9          		LD	C,11111001B
  61B6  CDC260        		CALL	MMC_1WR
  61B9  CD0961        		CALL	MMC_RES
  61BC  3E00          		LD	A,0
  61BE  B9            		CP	C
  61BF  20DD          		JR	NZ,.L1
  61C1  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]ブロックREADコマンド
                      	;=================================================
  61C2                	MMC_BRD_CMD:
  61C2  CD5B61        		CALL	MMC_CLK8
  61C5  0E51          		LD	C,01010001B
  61C7  CDC260        		CALL	MMC_1WR
  61CA  3A777D        		LD	A,(MMCADR3)
  61CD  4F            		LD	C,A
  61CE  CDC260        		CALL	MMC_1WR
  61D1  3A767D        		LD	A,(MMCADR2)
  61D4  4F            		LD	C,A
  61D5  CDC260        		CALL	MMC_1WR
  61D8  3A757D        		LD	A,(MMCADR1)
  61DB  4F            		LD	C,A
  61DC  CDC260        		CALL	MMC_1WR
  61DF  3A747D        		LD	A,(MMCADR0)
  61E2  4F            		LD	C,A
  61E3  CDC260        		CALL	MMC_1WR
  61E6  0E01          		LD	C,00000001B
  61E8  CDC260        		CALL	MMC_1WR
  61EB  CD0961        		CALL	MMC_RES
  61EE  3E00          		LD	A,0
  61F0  B9            		CP	C
  61F1  20CF          		JR	NZ,MMC_BRD_CMD
                      	
  61F3  CDF060        	.L1:	CALL	MMC_1RD
  61F6  79            		LD	A,C
  61F7  E6E0          		AND	11100000B
  61F9  28C7          		JR	Z,MMC_BRD_CMD
  61FB  79            		LD	A,C
  61FC  FEFE          		CP	0FEH
  61FE  20F3          		JR	NZ,.L1
  6200  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]ブロックREAD終了処理
                      	;=================================================
  6201                	MMC_BRD_END:
  6201  CDF060        		CALL	MMC_1RD
  6204  CDF060        		CALL	MMC_1RD
  6207  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]ブロックWRITEコマンド
                      	;=================================================
  6208                	MMC_BWR_CMD:
  6208  CD5B61        		CALL	MMC_CLK8
  620B  0E58          		LD	C,01011000B
  620D  CDC260        		CALL	MMC_1WR
  6210  3A777D        		LD	A,(MMCADR3)
  6213  4F            		LD	C,A
  6214  CDC260        		CALL	MMC_1WR
  6217  3A767D        		LD	A,(MMCADR2)
  621A  4F            		LD	C,A
  621B  CDC260        		CALL	MMC_1WR
  621E  3A757D        		LD	A,(MMCADR1)
  6221  4F            		LD	C,A
  6222  CDC260        		CALL	MMC_1WR
  6225  3A747D        		LD	A,(MMCADR0)
  6228  4F            		LD	C,A
  6229  CDC260        		CALL	MMC_1WR
  622C  0E01          		LD	C,00000001B
  622E  CDC260        		CALL	MMC_1WR
  6231  CD0961        		CALL	MMC_RES
  6234  3E00          		LD	A,0
  6236  B9            		CP	C
  6237  20CF          		JR	NZ,MMC_BWR_CMD
                      	
  6239  0EFF          		LD	C,0FFH
  623B  CDC260        		CALL	MMC_1WR
  623E  0EFE          		LD	C,0FEH
  6240  CDC260        		CALL	MMC_1WR
  6243  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]ブロックWRITE終了処理
                      	;=================================================
  6244                	MMC_BWR_END:
  6244  0E00          		LD	C,0
  6246  CDC260        		CALL	MMC_1WR
  6249  0E00          		LD	C,0
  624B  CDC260        		CALL	MMC_1WR
  624E  CD0961        		CALL	MMC_RES
                      	
  6251  DBFD          	.L1:	IN	A,(PPI_B)
  6253  E6FE          		AND	11111110B
  6255  D3FD          		OUT	(PPI_B),A
  6257  CDFF62        		CALL	MMC_WAIT
  625A  DBFD          		IN	A,(PPI_B)
  625C  F601          		OR	00000001B
  625E  D3FD          		OUT	(PPI_B),A
  6260  CDFF62        		CALL	MMC_WAIT
  6263  DBFE          		IN	A,(PPI_C)
  6265  E610          		AND	00010000B
  6267  28E8          		JR	Z,.L1
  6269  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]物理アドレスクリア
                      	;=================================================
  626A                	MMC_CLR_ADR:
  626A  AF            		XOR	A
  626B  32747D        		LD	(MMCADR0),A
  626E  32757D        		LD	(MMCADR1),A
  6271  32767D        		LD	(MMCADR2),A
  6274  32777D        		LD	(MMCADR3),A
  6277  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]物理アドレスを1ブロック分進める
                      	;=================================================
  6278                	MMC_INC_ADR:
  6278  3A757D        		LD	A,(MMCADR1)
  627B  C602          		ADD	A,2
  627D  32757D        		LD	(MMCADR1),A
  6280  3A767D        		LD	A,(MMCADR2)
  6283  CE00          		ADC	A,0
  6285  32767D        		LD	(MMCADR2),A
  6288  3A777D        		LD	A,(MMCADR3)
  628B  CE00          		ADC	A,0
  628D  32777D        		LD	(MMCADR3),A
  6290  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMC読み込み
                      	;IN  MMCADR0,1,2,3=MMCアドレス HL=メモリアドレス B=ブロック数
                      	;OUT 
                      	;=================================================
  6291                	MMC_READ:
  6291  C5            		PUSH	BC
                      	
  6292  CD0363        		CALL	MMC_LED_ON
                      	
  6295  CDC261        		CALL	MMC_BRD_CMD
  6298  0602          		LD	B,2
  629A  C5            	.L1:	PUSH	BC
  629B  0600          		LD	B,0				;256回ループ
  629D  C5            	.L2:	PUSH	BC
  629E  CDF060        		CALL	MMC_1RD
  62A1  71            		LD	(HL),C
  62A2  23            		INC	HL
  62A3  C1            		POP 	BC
  62A4  10F7          		DJNZ	.L2
  62A6  C1            		POP	BC
  62A7  10F1          		DJNZ	.L1
  62A9  CD0162        		CALL	MMC_BRD_END
  62AC  CD7862        		CALL	MMC_INC_ADR
  62AF  C1            		POP	BC
                      	
  62B0  CD1763        		CALL	MMC_LED_OFF
                      	
  62B3  10DC          		DJNZ	MMC_READ
  62B5  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMC書き込み
                      	;IN  MMCADR0,1,2,3=MMCアドレス HL=メモリアドレス B=ブロック数
                      	;OUT 
                      	;=================================================
  62B6                	MMC_WRITE:
  62B6  C5            		PUSH	BC
                      	
  62B7  CD0363        		CALL	MMC_LED_ON
                      	
  62BA  CD0862        		CALL	MMC_BWR_CMD
  62BD  0602          		LD	B,2
  62BF  C5            	.L1:	PUSH	BC
  62C0  0600          		LD	B,0
  62C2  C5            	.L2:	PUSH	BC
  62C3  4E            		LD	C,(HL)
  62C4  23            		INC	HL
  62C5  CDC260        		CALL	MMC_1WR
  62C8  C1            		POP	BC
  62C9  10F7          		DJNZ	.L2
  62CB  C1            		POP	BC
  62CC  10F1          		DJNZ	.L1
  62CE  CD4462        		CALL	MMC_BWR_END
  62D1  CD7862        		CALL	MMC_INC_ADR
  62D4  C1            		POP	BC
                      	
  62D5  CD1763        		CALL	MMC_LED_OFF
                      	
  62D8  10DC          		DJNZ	MMC_WRITE
  62DA  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMC埋め尽くし
                      	;IN  MMCADR0,1,2,3=MMCアドレス L=埋める値 B=ブロック数
                      	;OUT -
                      	;=================================================
  62DB                	MMC_FILLB:
  62DB  C5            		PUSH	BC
                      	
  62DC  CD0363        		CALL	MMC_LED_ON
                      	
  62DF  CD0862        		CALL	MMC_BWR_CMD
  62E2  0602          		LD	B,2
  62E4  C5            	.L1:	PUSH	BC
  62E5  0600          		LD	B,0
  62E7  C5            	.L2:	PUSH	BC
  62E8  4D            		LD	C,L
  62E9  CDC260        		CALL	MMC_1WR
  62EC  C1            		POP	BC
  62ED  10F8          		DJNZ	.L2
  62EF  C1            		POP	BC
  62F0  10F2          		DJNZ	.L1
  62F2  CD4462        		CALL	MMC_BWR_END
  62F5  CD7862        		CALL	MMC_INC_ADR
  62F8  C1            		POP	BC
                      	
  62F9  CD1763        		CALL	MMC_LED_OFF
                      	
  62FC  10DD          		DJNZ	MMC_FILLB
  62FE  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]12クロックのウェイト挿入
                      	;=================================================
  62FF                	MMC_WAIT:
  62FF  00            		NOP
  6300  00            		NOP
  6301  00            		NOP
  6302  C9            		RET
                      	
                      	;=================================================
                      	;アクセスランプ点灯
                      	;=================================================
  6303                	MMC_LED_ON:
  6303  DBFD          		IN	A,(PPI_B)
  6305  E6F7          		AND	11110111B			;LED信号を立てる(負論理)
  6307  D3FD          		OUT	(PPI_B),A
                      	
                      	IF USE_VIRTUAL_SOUND
  6309  CD2963        		CALL	MMC_SOUND
                      	ENDIF
                      	
  630C  3AC47D        		LD	A,(INFO_SW)			;インフォメーションフラグが降りていたら戻る
  630F  A7            		AND	A
  6310  C8            		RET	Z
                      	
                      	IF USE_VIRTUAL_LED
  6311  3E2A          		LD	A,02AH				;="*"
  6313  324EF3        		LD	(VLED_POS),A
                      	ENDIF
                      	
  6316  C9            		RET
                      	
                      	;=================================================
                      	;アクセスランプ消灯
                      	;=================================================
  6317                	MMC_LED_OFF:
  6317  DBFD          		IN	A,(PPI_B)
  6319  E6FE          		AND	11111110B			;PB0=CLK<-L microSDモジュールのLEDを消す
  631B  F608          		OR	00001000B			;LED信号を降ろす(負論理)
  631D  D3FD          		OUT	(PPI_B),A
                      	
  631F  3AC47D        		LD	A,(INFO_SW)
  6322  A7            		AND	A
  6323  C8            		RET	Z
                      	
                      	IF USE_VIRTUAL_LED
  6324  AF            		XOR	A				;=NULL文字
  6325  324EF3        		LD	(VLED_POS),A
                      	ENDIF
  6328  C9            		RET
                      	
                      	;=================================================
                      	;疑似アクセス音
                      	;=================================================
                      	IF USE_VIRTUAL_SOUND
  6329                	MMC_SOUND:
  6329  C5            		PUSH	BC
                      	
  632A  0620          		LD	B,20H
  632C  3A67EA        	.L1:	LD	A,(0EA67H)
  632F  F620          		OR	00100000B
  6331  D340          		OUT	(40H),A
  6333  E6DF          		AND	11011111B
  6335  D340          		OUT	(40H),A
  6337  10F3          		DJNZ	.L1
                      	
  6339  C1            		POP	BC
  633A  C9            		RET
                      	ENDIF
                      	
[EOF:MMC.asm]
                      	INCLUDE	"FAT.asm"				;FAT
                      	
                      	;=================================================
                      	;[FAT]FATのリンク先をすべて「空き」にする
                      	;IN  HL=クラスタ＃
                      	;OUT 
                      	;=================================================
  633B                	ERASE_FAT_LINK:
  633B  CD9463        	.L1:	CALL	READ_FAT_DATA			;
  633E  7A            		LD	A,D				;FATデータが0000Hなら終了
  633F  B3            		OR	E				;
  6340  C8            		RET	Z				;
                      	
  6341  D5            		PUSH	DE				;FATデータを退避
  6342  110000        		LD	DE,0000H			;
  6345  CD5F63        		CALL	WRITE_FAT_DATA			;クラスタHLのFATデータを0000Hにセットする
  6348  E1            		POP	HL				;FATデータを復帰
  6349  23            		INC	HL				;FATデータがFFFFHなら終了
  634A  7C            		LD	A,H				;
  634B  B5            		OR	L				;
  634C  C8            		RET	Z				;
  634D  2B            		DEC	HL				;HLをもとに戻す
  634E  110200        		LD	DE,MIN_CLSTR			;DE<-最小論理クラスタ＃
  6351  CDD35E        		CALL	CPHLDE				;
  6354  3808          		JR	C,.EXIT2			;
  6356  11F7FF        		LD	DE,MAX_CLSTR+1			;DE<-最大論理クラスタ＃+1
  6359  CDD35E        		CALL	CPHLDE				;
  635C  38DD          		JR	C,.L1
                      	
  635E                	.EXIT2:
  635E  FF            		DB	0FFH				;TRAP
                      	
                      	;=================================================
                      	;[FAT]FATデータをFATバッファに書き込む
                      	;IN  HL=クラスタ＃,DE=FATデータ
                      	;OUT 
                      	;=================================================
  635F                	WRITE_FAT_DATA:
  635F  DDE5          		PUSH	IX				;！重要！
  6361  DD21FA7C      		LD	IX,FAT1_BFFR_STRCT		;
  6365  D5            		PUSH	DE				;FATデータを退避
  6366  E5            		PUSH	HL				;クラスタ＃を退避
  6367  CDB063        		CALL	GET_FAT_SCTR			;(DW0)<-クラスタ＃に対応するFATのセクタ＃
  636A  CD7064        		CALL	LOAD_BFFR			;
  636D  E1            		POP	HL				;クラスタ＃を復帰
  636E  CDC163        		CALL	GET_FAT_POINTER			;HL<-FATバッファのポインタ
  6371  D1            		POP	DE				;FATデータを復帰
  6372  73            		LD	(HL),E				;データをFATバッファに書き込む
  6373  23            		INC	HL				;
  6374  72            		LD	(HL),D				;
  6375  3EFF          		LD	A,TRUE
  6377  32007D        		LD	(FAT1_BFFR_STRCT+IDX_BUPD),A	;FAT1バッファの更新フラグを立てる
  637A  32077D        		LD	(FAT2_BFFR_STRCT+IDX_BUPD),A	;FAT2バッファの更新フラグを立てる
  637D  DDE1          		POP	IX				;
  637F  C9            		RET
                      	
                      	;=================================================
                      	;[FAT]FAT2バッファ構造体のセクタ＃をFAT1と同期する
                      	;IN  -
                      	;OUT (FAT2_BFFR_STRCT.SCTR)
                      	;=================================================
  6380                	SYNC_FAT2_SCTR:
  6380  DDE5          		PUSH	IX				;！重要！
  6382  DD21017D      		LD	IX,FAT2_BFFR_STRCT		;
  6386  2AFA7C        		LD	HL,(FAT1_BFFR_STRCT.SCTR) 	;HL<-バッファされているFATセクタ＃の下位2バイト！上位2バイトは必ず0000Hなので無視する！
  6389  ED5B427D      		LD	DE,(FAT_SIZE)			;DE<-FAT１面に必要なセクタ数
  638D  19            		ADD	HL,DE				;HL<-FATに対応するFAT2のセクタ＃
  638E  22017D        		LD	(FAT2_BFFR_STRCT.SCTR),HL 	;FAT2バッファ構造体のセクタ＃に、FATに対応するFAT2のセクタ＃をセットする！セクタ＃の上位２バイトは必ず0000Hなので手を付けない！
  6391  DDE1          		POP	IX				;
  6393  C9            		RET					;
                      	
                      	;=================================================
                      	;[FAT]FATデータをFATから読み出す
                      	;IN  HL=クラスタ＃
                      	;OUT DE=FATデータ=次のクラスタ＃
                      	;=================================================
  6394                	READ_FAT_DATA:
  6394  E5            		PUSH	HL				;
  6395  DDE5          		PUSH	IX				;！重要！
  6397  E5            		PUSH	HL				;クラスタ＃を退避
  6398  CDB063        		CALL	GET_FAT_SCTR			;(DW0)<-クラスタ＃に対応するFATのセクタ＃
  639B  DD21FA7C      		LD	IX,FAT1_BFFR_STRCT		;
  639F  CD7064        		CALL	LOAD_BFFR			;セクタ(DW0)をFATバッファに読み込む
  63A2  CD8063        		CALL	SYNC_FAT2_SCTR			;FAT2バッファ構造体のセクタ＃をFATに合わせる
  63A5  E1            		POP	HL				;クラスタ＃を復帰
  63A6  CDC163        		CALL	GET_FAT_POINTER			;HL<-FATバッファポインタ
  63A9  5E            		LD	E,(HL)				;DE<-次のクラスタ＃
  63AA  23            		INC	HL				;
  63AB  56            		LD	D,(HL)				;
  63AC  DDE1          		POP	IX				;
  63AE  E1            		POP	HL				;
  63AF  C9            		RET					;
                      	
                      	;=================================================
                      	;[FAT]クラスタHLのFATデータが含まれるセクタ＃を(DW0)に求める = FAT_SCTR + (クラスタ＃の上位バイト)
                      	;IN  HL=クラスタ＃
                      	;OUT (DW0)=セクタ＃
                      	;=================================================
  63B0                	GET_FAT_SCTR:
  63B0  CD236B        		CALL	DW0_CLR				;(DW0)<-クラスタ＃の上位バイト
  63B3  7C            		LD	A,H				;
  63B4  327C7D        		LD	(DW0),A				;
  63B7  217C7D        		LD	HL,DW0				;(DW0)<-(DW0)+(FAT_SCTR)
  63BA  114F7D        		LD	DE,FAT_SCTR			;
  63BD  CD606B        		CALL	DW_ADD				;
  63C0  C9            		RET					;
                      	
                      	;=================================================
                      	;[FAT]クラスタのFATデータを示すポインタを求める = バッファアドレス + (クラスタ＃の下位バイト * 2)
                      	;IN  HL=クラスタ＃,IX=FATバッファ構造体のポインタ
                      	;OUT HL=ポインタ
                      	;=================================================
  63C1                	GET_FAT_POINTER:
  63C1  AF            		XOR	A				;A<-0
  63C2  67            		LD	H,A				;H<-0
  63C3  7D            		LD	A,L				;A<-L
  63C4  CB27          		SLA	A				;A<-A*2 & CY
  63C6  6F            		LD	L,A				;L<-A
  63C7  CB14          		RL	H				;CYをHのLSBへ
  63C9  DD5E04        		LD	E,(IX+IDX_BADR)			;DE<-FATバッファの先頭アドレス+(クラスタ＃の下位バイト*2)
  63CC  DD5605        		LD	D,(IX+IDX_BADR+1)		;
  63CF  19            		ADD	HL,DE				;
  63D0  C9            		RET					;
                      	
                      	;=================================================
                      	;[FAT]FATから空きクラスタを探す
                      	;・！入力クラスタ＃は探索対象外！
                      	;IN  HL=クラスタ＃
                      	;OUT HL=空きクラスタ＃,CY=1:見つかった
                      	;=================================================
  63D1                	FIND_NULL_CLSTR:
  63D1  E5            		PUSH	HL				;二次探索用にクラスタ＃を退避
  63D2  11F6FF        		LD	DE,MAX_CLSTR			;
  63D5  EB            		EX	DE,HL				;
  63D6  B7            		OR	A				;CY<-0
  63D7  ED52          		SBC	HL,DE				;
  63D9  EB            		EX	DE,HL				;
  63DA  383C          		JR	C,.ERR1				;クラスタ＃が上限値を超えていたらエラー
  63DC  2811          		JR	Z,.L4				;クラスタ＃＝最終クラスタ＃なら二次探索へ
  63DE  42            		LD	B,D				;BC=カウンタ<-最終クラスタ＃-クラスタ＃
  63DF  4B            		LD	C,E				;
  63E0  23            		INC	HL				;！重要！次のクラスタ＃から探索
  63E1  CD0E64        	.L1:	CALL	.SUB				;FATデータが0000HならZ=1になる
  63E4  2003          		JR	NZ,.L2				;
  63E6  D1            		POP	DE				;降順探索用スタックを捨てる
  63E7  1823          		JR	.FOUND				;発見したので終了へ
  63E9  23            	.L2:	INC	HL				;クラスタ＃を１進める
  63EA  0B            		DEC	BC				;カウンタが０になるまで繰り返す
  63EB  78            		LD	A,B				;
  63EC  B1            		OR	C				;
  63ED  20F2          		JR	NZ,.L1				;
  63EF  E1            	.L4:	POP	HL				;クラスタ＃復帰
  63F0  010200        		LD	BC,MIN_CLSTR			;クラスタ＃＝最小クラスタ＃なら終了へ
  63F3  B7            		OR	A				;
  63F4  ED42          		SBC	HL,BC				;
  63F6  3820          		JR	C,.ERR1				;クラスタ＃が下限値を超えていたらエラー
  63F8  2810          		JR	Z,.NOT				;
  63FA  44            		LD	B,H				;BC=カウンタ<-クラスタ＃-最小クラスタ＃
  63FB  4D            		LD	C,L				;
  63FC  210200        		LD	HL,MIN_CLSTR			;HL<-最小クラスタ＃
  63FF  CD0E64        	.L3:	CALL	.SUB				;FATデータが0000HならZ=1になる
  6402  2808          		JR	Z,.FOUND			;発見したので終了へ
  6404  23            		INC	HL				;クラスタ＃を１進める
  6405  0B            		DEC	BC				;カウンタが０になるまで繰り返す
  6406  78            		LD	A,B				;
  6407  B1            		OR	C				;
  6408  20F5          		JR	NZ,.L3				;
  640A  B7            	.NOT:	OR	A				;見つからなかった CY<-0
  640B  C9            		RET					;
                      	
  640C  37            	.FOUND:	SCF					;発見で終了 CY<-1
  640D  C9            		RET					;
                      	
  640E  E5            	.SUB:	PUSH	HL				;クラスタ＃退避
  640F  C5            		PUSH	BC
  6410  CD9463        		CALL	READ_FAT_DATA			;DE<-FATデータ
  6413  C1            		POP	BC
  6414  E1            		POP	HL				;クラスタ＃復帰
  6415  7A            		LD	A,D				;FATデータが0000HならZ=1
  6416  B3            		OR	E				;
  6417  C9            		RET					;
                      	
  6418  FF            	.ERR1:	DB	0FFH				;TRAP
                      	
[EOF:FAT.asm]
                      	INCLUDE	"BUFFER.asm"				;バッファ
                      	
                      	;-----------------------------
                      	;バッファ構造体
                      	;-----------------------------
                      	;+00 セクタ＃ LSB
                      	;+01
                      	;+02
                      	;+03 セクタ＃ MSB
                      	;+04 バッファポインタ L
                      	;+05 バッファポインタ H
                      	;+06 更新フラグ
                      	;-----------------------------
                      	
                      	;=================================================
                      	;[BFFR]バッファ構造体を初期化する
                      	;IN  -
                      	;OUT -
                      	;=================================================
  6419                	INIT_BFFR:
  6419  21FA7C        		LD	HL,FAT1_BFFR_STRCT		;=FAT1用
  641C  11EE78        		LD	DE,FAT_BFFR			;バッファの先頭アドレス
  641F  CD3164        		CALL	.SUB
  6422  21017D        		LD	HL,FAT2_BFFR_STRCT		;=FAT2用
  6425  11EE78        		LD	DE,FAT_BFFR			;！バッファ領域をFATと共通にすることで複製になる！
  6428  CD3164        		CALL	.SUB
  642B  21087D        		LD	HL,FILE_BFFR_STRCT		;=ファイル用
  642E  11EE7A        		LD	DE,FILE_BFFR			;
  6431  CD2A6B        	.SUB:	CALL	DW_CLR				;バッファ構造体のセクタ＃を00000000Hにセットする
  6434  E5            		PUSH	HL				;
  6435  DDE1          		POP	IX				;
  6437  DD7304        		LD	(IX+IDX_BADR),E			;バッファの先頭アドレスをセットする
  643A  DD7205        		LD	(IX+IDX_BADR+1),D		;
  643D  DD360600      		LD	(IX+IDX_BUPD),FALSE		;バッファの更新フラグを降ろす
  6441  CD5F64        		CALL	CLR_BFFR			;バッファの内容をゼロクリアする
  6444  C9            		RET					;
                      	
                      	;=================================================
                      	;[BFFR]バッファをメディアに書き込む
                      	;・更新フラグが立っている場合のみ書き込まれる
                      	;=================================================
  6445                	FLUSH_BFFR:
  6445  DDE5          		PUSH	IX				;
  6447  DD21087D      		LD	IX,FILE_BFFR_STRCT		;
  644B  CD9264        		CALL	SAVE_BFFR			;
  644E  DD21FA7C      		LD	IX,FAT1_BFFR_STRCT		;
  6452  CD9264        		CALL	SAVE_BFFR			;
  6455  DD21017D      		LD	IX,FAT2_BFFR_STRCT		;
  6459  CD9264        		CALL	SAVE_BFFR			;
  645C  DDE1          		POP	IX				;
  645E  C9            		RET					;
                      	
                      	;=================================================
                      	;[BFFR]バッファの内容をゼロクリアする
                      	;IN  IX=バッファ構造体のポインタ
                      	;=================================================
  645F                	CLR_BFFR:
  645F  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-バッファの先頭アドレス
  6462  DD6605        		LD	H,(IX+IDX_BADR+1)		;
  6465  E5            		PUSH	HL				;
  6466  D1            		POP	DE				;
  6467  13            		INC	DE				;
  6468  3600          		LD	(HL),00H			;
  646A  01FF01        		LD	BC,SCTR_SIZE-1			;
  646D  EDB0          		LDIR					;
  646F  C9            		RET					;
                      	
                      	;=================================================
                      	;[BFFR]指定されたバッファにセクタを読み込む
                      	;-------------------------------------------------
                      	;IN  IX=バッファ構造体のポインタ,(DW0)=読み込みたいセクタ＃
                      	;OUT (IX+0) ~ (IX+3)=読み込まれたセクタ＃
                      	;=================================================
  6470                	LOAD_BFFR:
  6470  DDE5          		PUSH	IX				;
  6472  E1            		POP	HL				;
  6473  117C7D        		LD	DE,DW0				;=読み込みたいセクタ＃
  6476  CD956A        		CALL	DW_CP				;目的のセクタがバッファされていれば終了
  6479  3801          		JR	C,.L1				;条件:CY=0,Z=1
  647B  C8            		RET	Z				;
  647C  CD9264        	.L1:	CALL	SAVE_BFFR			;現在のバッファ内容が更新されていればメディアに書き戻す
  647F  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-バッファの先頭アドレス
  6482  DD6605        		LD	H,(IX+IDX_BADR+1)		;
  6485  CD2669        		CALL	READ_SCTR			;セクタ(DW0)をバッファHLに読み込む。エラーなら戻らずに終了する
  6488  217C7D        		LD	HL,DW0				;バッファ構造体のセクタ＃を更新する！最後に行うこと！
  648B  DDE5          		PUSH	IX				;
  648D  D1            		POP	DE				;
  648E  CDB66A        		CALL	DW_COPY				;
                      	
                      	IF DEBUG
;;                   -		PUSH	HL
;;                   -		PUSH	DE
;;                   -		PUSH	BC
;;                   -	
;;                   -		CALL	IPRINT
;;                   -		DB	"<R>",EOL
;;                   -		LD	HL,DW0
;;                   -		CALL	PRT_DW_HEX
;;                   -		CALL	PUT_CR
;;                   -	
;;                   -		POP	BC
;;                   -		POP	DE
;;                   -		POP	HL
                      	ENDIF
  6491  C9            		RET
                      	
                      	
                      	;=================================================
                      	;[BFFR]指定されたバッファをセクタに書き込む
                      	;IN  IX=バッファ構造体のポインタ
                      	;OUT 
                      	;=================================================
  6492                	SAVE_BFFR:
  6492  DD7E06        		LD	A,(IX+IDX_BUPD)			;バッファの更新フラグが降りていれば書き戻さない
  6495  B7            		OR	A				;
  6496  C8            		RET	Z				;
  6497  CDC26A        		CALL	DW0_PUSH			;！重要！
  649A  DD360600      		LD	(IX+IDX_BUPD),FALSE		;バッファの更新フラグを降ろす
  649E  DDE5          		PUSH	IX				;(DW0)<-バッファに読み込まれているセクタ＃
  64A0  E1            		POP	HL				;
  64A1  117C7D        		LD	DE,DW0				;
  64A4  CDB66A        		CALL	DW_COPY				;
  64A7  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-バッファの先頭アドレス
  64AA  DD6605        		LD	H,(IX+IDX_BADR+1)		;
  64AD  CD2F69        		CALL	WRITE_SCTR			;セクタ(DW0)にバッファのデータを書き込む
                      	
                      	IF DEBUG
;;                   -		PUSH	HL
;;                   -		PUSH	DE
;;                   -		PUSH	BC
;;                   -	
;;                   -		CALL	IPRINT
;;                   -		DB	"<W>",EOL
;;                   -		LD	HL,DW0
;;                   -		CALL	PRT_DW_HEX
;;                   -		CALL	PUT_CR
;;                   -	
;;                   -		POP	BC
;;                   -		POP	DE
;;                   -		POP	HL
                      	ENDIF
                      	
  64B0  CDE86A        		CALL	DW0_POP				;！重要！
  64B3  C9            		RET
                      	
                      	
[EOF:BUFFER.asm]
                      	INCLUDE	"CD.asm"				;ディレクトリ変更
                      	
                      	;=================================================
                      	;[CD]ディレクトリエントリバッファのエントリ名をゼロクリアする
                      	;=================================================
  64B4                	CLR_DNAME:
  64B4  E5            		PUSH	HL				;
  64B5  210F7D        		LD	HL,DNAME			;
  64B8  CDAD77        		CALL	NULL_STR			;
  64BB  E1            		POP	HL				;
  64BC  C9            		RET
                      	
                      	;=================================================
                      	;[CD]パス文字列で指定されたディレクトリに、ワーキングディレクトリを移動する
                      	;IN  (ARG0)=パス文字列の先頭アドレス
                      	;OUT HL=エントリ名の先頭アドレス,(WDIR_CLSTR)=新しいワーキングディレクトリのクラスタ＃,(WDIR_ORG)=実行前ワーキングディレクトリのクラスタ＃
                      	;=================================================
  64BD                	CHANGE_WDIR:
  64BD  CD4965        		CALL	STORE_WDIR			;ワーキングディレクトリのクラスタ＃を退避する
  64C0  2AEE7C        		LD	HL,(ARG0)			;HL<-パス文字列の先頭アドレス
  64C3  CDF264        		CALL	SPLIT_FPATH			;パスとファイル名を00Hで分割する
  64C6  D0            		RET	NC				;CY=1ならパス部が存在するので、ディレクトリを移動する
  64C7  CD1965        		CALL	TRACE_PATH			;
  64CA  23            		INC	HL				;HLは分割点を指しているので、１つ進めてファイル名の先頭に合わせる
  64CB  C9            		RET
                      	
                      	;=================================================
                      	;[CD]ワーキングディレクトリを、(DIR_ENTRY)に一致するサブディレクトリに移動する
                      	;IN  (DIR_ENTRY+IDX_NAME),(DIR_ENTRY+IDX_ATRB)
                      	;OUT (WDIR_CLSTR)
                      	;=================================================
  64CC                	ENTER_SUBDIR:
  64CC  E5            		PUSH	HL				;
  64CD  3A107D        		LD	A,(DIR_ENTRY+IDX_NAME)		;文字列の先頭が00Hなら中身は空なので終了する
  64D0  B7            		OR	A				;
  64D1  2817          		JR	Z,.EXIT				;
  64D3  210F7D        		LD	HL,DNAME			;
  64D6  CD5765        		CALL	EOL2SPC				;エントリ名の00Hをすべて20Hに変換する
  64D9  3E10          		LD	A,ATRB_DIR			;
  64DB  321B7D        		LD	(DIR_ENTRY+IDX_ATRB),A		;
  64DE  CD6D65        		CALL	GET_DENT.MAIN			;
  64E1  CA7678        		JP	Z,ERR_NOT_FOUND			;
  64E4  2A2A7D        		LD	HL,(DIR_ENTRY+IDX_FAT)		;HL<-一致したディレクトリエントリのクラスタ＃
  64E7  225B7D        	.E1:	LD	(WDIR_CLSTR),HL			;(WDIR_CLSTR)<-ディレクトリエントリのクラスタ＃
  64EA  E1            	.EXIT:	POP	HL				;
  64EB  C9            		RET					;
                      	
                      	;=================================================
                      	;[CD]ワーキングディレクトリをルートディレクトリに移動する
                      	;=================================================
  64EC                	ENTER_ROOT:
  64EC  E5            		PUSH	HL
  64ED  210000        		LD	HL,ROOT
  64F0  18F5          		JR	ENTER_SUBDIR.E1
                      	
                      	;=================================================
                      	;[CD]パス付きファイル名を、パス部とファイル名部に分割する
                      	;・例 "/DIR/DIR/FILE.EXT" -> "/DIR/DIR",00H,"FILE.EXT"
                      	;IN  HL=文字列の先頭アドレス
                      	;OUT HL=文字列の先頭アドレス,CY=1:パスとファイル名を分割した
                      	;=================================================
  64F2                	SPLIT_FPATH:
  64F2  E5            		PUSH	HL				;
  64F3  E5            		PUSH	HL				;文字列の先頭アドレスを退避
  64F4  7E            	.L1:	LD	A,(HL)				;HLを文字列の末尾+1まで進める
  64F5  23            		INC	HL				;
  64F6  CDA877        		CALL	IS_EOT				;
  64F9  20F9          		JR	NZ,.L1				;
  64FB  2B            		DEC	HL				;HL<-末尾アドレス
  64FC  D1            		POP	DE				;DE<-先頭アドレス
  64FD  CDD35E        		CALL	CPHLDE				;末尾アドレス:先頭アドレス
  6500  2815          		JR	Z,.EXIT				;文字列の先頭アドレスと末尾アドレスが同じなら戻る。CY<-0
  6502  E5            		PUSH	HL				;文字列の末尾アドレスを退避
  6503  B7            		OR	A				;
  6504  ED52          		SBC	HL,DE				;HL<-末尾アドレス-先頭アドレス=文字列の長さ-1
  6506  23            		INC	HL				;HL<-文字列の長さ
  6507  44            		LD	B,H				;BC<-文字列の長さ
  6508  4D            		LD	C,L				;
  6509  E1            		POP	HL				;HL<-文字列の末尾アドレス
  650A  3E2F          		LD	A,"/"				;A<-検索する文字
  650C  EDB9          		CPDR					;A:(HL),HL--,BC--
  650E  2803          		JR	Z,.FOUND			;
  6510  B7            		OR	A				;CY<-0
  6511  1804          		JR	.EXIT				;
                      	
  6513  AF            	.FOUND:	XOR	A				;分割点に識別用コードを挿入する
  6514  23            		INC	HL				;
  6515  77            		LD	(HL),A				;
  6516  37            		SCF					;CY<-1
  6517  E1            	.EXIT:	POP	HL				;
  6518  C9            		RET					;
                      	
                      	;=================================================
                      	;[CD]パス文字列の先頭から00Hまでの範囲を解析し、順次ワーキングディレクトリを移動する
                      	;IN  HL=パス文字列の先頭アドレス
                      	;OUT (WDIR_CLSTR)=パス文字列から求められたクラスタ＃,HL=エントリ名の開始アドレス-1
                      	;=================================================
  6519                	TRACE_PATH:
  6519  7E            		LD	A,(HL)				;！重要！最初の文字が00Hなら「ルート」に移動して終了
  651A  B7            		OR	A				;例えば"/FILE.EXT" は 00H,"FILE.EXT" と変換されるため
  651B  28CF          		JR	Z,ENTER_ROOT			;
  651D  FE2F          		CP	"/"				;最初の文字が"/"なら「ルート」に移動
  651F  2004          		JR	NZ,.L4				;
  6521  CDEC64        		CALL	ENTER_ROOT			;
  6524  23            		INC	HL				;
  6525  CDB464        	.L4:	CALL	CLR_DNAME			;バッファのエントリ名を00Hでクリア
  6528  7E            	.L1:	LD	A,(HL)				;Aが00Hまたは22Hなら
  6529  CDA877        		CALL	IS_EOT				;
  652C  289E          		JR	Z,ENTER_SUBDIR			;バッファに残っているディレクトリに移動して終了
  652E  23            		INC	HL				;区切り文字検出
  652F  FE2F          		CP	"/"				;
  6531  2005          		JR	NZ,.ADD				;
  6533  CDCC64        		CALL	ENTER_SUBDIR			;ディレクトリ移動実行
  6536  18ED          		JR	.L4				;
                      	
  6538  E5            	.ADD:	PUSH	HL				;
  6539  CD8A77        		CALL	FIX_CHR				;文字コードを修正
  653C  CD9377        		CALL	IS_NGCHR			;使用できない文字を検出
  653F  210F7D        		LD	HL,DNAME			;
  6542  4F            		LD	C,A				;
  6543  CDBA77        		CALL	ADD_STR				;エントリ名に文字を追加する
  6546  E1            		POP	HL				;
  6547  18DF          		JR	.L1				;
                      	
                      	;=================================================
                      	;[CD]ワーキングディレクトリのクラスタ＃を退避する
                      	;IN  (WDIR_CLSTR)
                      	;OUT (WDIR_ORG)
                      	;=================================================
  6549                	STORE_WDIR:
  6549  2A5B7D        		LD	HL,(WDIR_CLSTR)			;
  654C  225D7D        		LD	(WDIR_ORG),HL			;
  654F  C9            		RET
                      	
                      	;=================================================
                      	;[CD]ワーキングディレクトリのクラスタ＃を復帰する
                      	;IN  (WDIR_ORG)
                      	;OUT (WDIR_CLSTR)
                      	;=================================================
  6550                	RESTORE_WDIR:
  6550  2A5D7D        		LD	HL,(WDIR_ORG)			;
  6553  225B7D        		LD	(WDIR_CLSTR),HL			;
  6556  C9            		RET
                      	
                      	;=================================================
                      	;[STR]文字列の00Hを20Hに変換する
                      	;IN  HL=文字列の先頭アドレス
                      	;OUT 文字列(HL)
                      	;=================================================
  6557                	EOL2SPC:
  6557  46            		LD	B,(HL)				;B<-文字数
  6558  23            		INC	HL				;
  6559  7E            	.L1:	LD	A,(HL)				;
  655A  B7            		OR	A				;
  655B  2002          		JR	NZ,.L2				;
  655D  3620          		LD	(HL),SPC			;
  655F  23            	.L2:	INC	HL				;
  6560  10F7          		DJNZ	.L1				;
  6562  C9            		RET
                      	
[EOF:CD.asm]
                      	INCLUDE	"DIR.asm"				;ディレクトリエントリ
                      	
                      	;--------------------------
                      	;ディレクトリエントリ構造
                      	;--------------------------
                      	;00~07H:ファイル名	:8	IDX_NAME
                      	;08~0AH:拡張子		:3	IDX_EXT
                      	;0B    :属性		:1	IDX_ATRB
                      	;0C~0DH:未使用		:2
                      	;0E~0FH:作成時刻	:2	IDX_CTIME
                      	;10~11H:作成日時	:2	IDX_CDATE
                      	;12~13H:アクセス日付	:2	IDX_ADATE
                      	;14~15H:未使用		:2
                      	;16~17H:更新時刻	:2	IDX_TIME
                      	;18~19H:更新日付	:2	IDX_DATE
                      	;1A~1BH:FATエントリ	:2	IDX_FAT
                      	;1C~1FH:ファイルサイズ	:4	IDX_SIZE
                      	;--------------------------
                      	
                      	;=================================================
                      	;[DIR]エントリ名と属性に一致するディレクトリエントリを探して(DIR_ENTRY)に格納する
                      	;・ワーキングディレクトリ内が対象
                      	;IN  HL=エントリ名の先頭アドレス,C=属性値
                      	;OUT (DIR_ENTRY),Z=1:見つからなかった
                      	;=================================================
  6563                	GET_DENT:
  6563  CD6D67        		CALL	CLR_DENT_BFFR			;ディレクトリエントリバッファをクリアする
  6566  79            		LD	A,C				;
  6567  321B7D        		LD	(DIR_ENTRY+IDX_ATRB),A		;
  656A  CD1577        		CALL	STR2SFN				;テキストポインタの文字列を8.3形式ファイル名に変換し、(DIR_ENTRY+IDX_NAME)にセットする
  656D  2A5B7D        	.MAIN:	LD	HL,(WDIR_CLSTR)			;
  6570  FD21AA66      		LD	IY,GET_DENT_SUB			;IY<-ディレクトリエントリ検索サブルーチン
  6574  CD4066        		CALL	DIR_WALK			;ディレクトリ巡回処理
  6577  3A367D        		LD	A,(FOUND)			;A<-結果フラグ
  657A  B7            		OR	A				;不一致ならZ<-1
  657B  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]ディレクトリエントリの有効性をチェックする
                      	;・無効なら直前の呼び出し元をキャンセルして、その親に戻す
                      	;IN  HL=ディレクトリエントリの先頭アドレス
                      	;OUT CY=1:エントリ終端
                      	;=================================================
  657C                	IS_VALID_DENT:
  657C  7E            		LD	A,(HL)				;エントリの先頭が「無効」を示すIDなら
  657D  FEE5          		CP	ID_DISABLED			;次のエントリへスキップする
  657F  2003          		JR	NZ,.L1				;
  6581  F1            		POP	AF				;戻りアドレスを捨てる
  6582  B7            		OR	A				;CY<-0
  6583  C9            		RET					;
  6584  B7            	.L1:	OR	A				;エントリの先頭が00Hなら終了へ
  6585  C0            		RET	NZ				;
  6586  F1            		POP	AF				;戻りアドレスを捨てる
  6587  37            		SCF					;終了フラグを立てる
  6588  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]読み込み専用属性チェック
                      	;IN  (DIR_ENTRY+IDX_ATRB)
                      	;OUT -
                      	;=================================================
  6589                	IS_READ_ONLY:
  6589  3A1B7D        		LD	A,(DIR_ENTRY+IDX_ATRB)		;
  658C  E601          		AND	00000001B			;
  658E  C8            		RET	Z				;
  658F  216C78        		LD	HL,MSG_READ_ONLY		;
  6592  C30A6A        		JP	ERR				;
                      	
                      	;=================================================
                      	;[DIR]ディレクトリエントリのFATエントリが空なら空きクラスタを探して、値をFATエントリとターゲットクラスタにセットする
                      	;IN  (DIR_ENTRY+IDX_FAT)
                      	;OUT (TGT_CLSTR)
                      	;=================================================
  6595                	SET_DENT_FAT:
  6595  2A2A7D        		LD	HL,(DIR_ENTRY+IDX_FAT)		;HL<-FATエントリ
  6598  7C            		LD	A,H				;
  6599  B5            		OR	L				;
  659A  2011          		JR	NZ,.L1				;FATエントリが0000Hなら空きクラスタを探す
  659C  2A5F7D        		LD	HL,(TGT_CLSTR)			;空きクラスタを探す起点となるクラスタ＃
  659F  CDD163        		CALL	FIND_NULL_CLSTR			;HL<-空きクラスタ＃
  65A2  3806          		JR	C,.FOUND			;
  65A4  213A78        		LD	HL,MSG_MEDIA_FULL		;見つからなければエラー
  65A7  C30A6A        		JP	ERR				;
                      	
  65AA  222A7D        	.FOUND:	LD	(DIR_ENTRY+IDX_FAT),HL		;FATエントリ<-空きクラスタ＃
  65AD  225F7D        	.L1:	LD	(TGT_CLSTR),HL			;ターゲットクラスタ<-FATエントリ
  65B0  C9            		RET
                      	
                      	;=================================================
                      	;[DIR]指定した属性と名前を持った、空のディレクトリエントリを作成する
                      	;・FATエントリ値とファイルサイズは0にセットされる
                      	;・ディレクトリエントリがすでに存在すれば、更新日時のみを新しくする
                      	;IN  C=属性,HL=名前の先頭アドレス
                      	;OUT Z=1:
                      	;=================================================
  65B1                	TOUCH:
  65B1  CD6365        		CALL	GET_DENT			;すでに存在すればZ<-0
  65B4  201C          		JR	NZ,.UP				;
  65B6  2A5B7D        	.NEW:	LD	HL,(WDIR_CLSTR)			;
  65B9  FD219F66      		LD	IY,SEARCH_NULL_DENT		;IY<-ワーキングディレクトリから空エントリのアドレスを探すサブルーチン
  65BD  CD4066        		CALL	DIR_WALK			;
  65C0  3A367D        		LD	A,(FOUND)			;
  65C3  B7            		OR	A				;
  65C4  2006          		JR	NZ,.L1				;
  65C6  213F78        		LD	HL,MSG_DIR_FULL			;見つからなければエラー
  65C9  C30A6A        		JP	ERR				;
                      	
  65CC  211E7D        	.L1:	LD	HL,DIR_ENTRY+IDX_CTIME		;ディレクトリエントリバッファの「作成日時」に現在日時をセットする
  65CF  CDFD65        		CALL	SET_DATETIME			;
  65D2  21267D        	.UP:	LD	HL,DIR_ENTRY+IDX_TIME		;ディレクトリエントリバッファの「更新日時」に現在日時をセットする
  65D5  CDFD65        		CALL	SET_DATETIME			;
  65D8  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]ディレクトリエントリバッファの内容をメディアに書き込む
                      	;IN  (DIR_ENTRY),(DIR_ENTRY.BP)
                      	;=================================================
  65D9                	WRITE_DENT:
  65D9  DD21087D      		LD	IX,FILE_BFFR_STRCT		;
  65DD  21307D        		LD	HL,DIR_ENTRY.SCTR		;(DW0)<-ディレクトリエントリの格納先セクタ＃
  65E0  117C7D        		LD	DE,DW0				;
  65E3  CDB66A        		CALL	DW_COPY				;
  65E6  CD7064        		CALL	LOAD_BFFR			;
  65E9  2A347D        		LD	HL,(DIR_ENTRY.BP)		;
  65EC  EB            		EX	DE,HL				;DE<-ディレクトリエントリの格納先アドレス
  65ED  21107D        		LD	HL,DIR_ENTRY			;HL<-ディレクトリエントリバッファの先頭アドレス
  65F0  012000        		LD	BC,DENT_SIZE			;BC<-ディレクトリエントリバッファのサイズ
  65F3  EDB0          		LDIR					;ディレクトリエントリをファイルバッファにコピーする
  65F5  DD3606FF      		LD	(IX+IDX_BUPD),TRUE		;バッファの更新フラグを立てる
  65F9  CD9264        		CALL	SAVE_BFFR			;バッファを書き戻す
  65FC  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]指定されたアドレスにエンコードされた現在日時をセットする
                      	;IN  HL=書き込み先のアドレス
                      	;OUT 
                      	;=================================================
  65FD                	SET_DATETIME:
  65FD  E5            		PUSH	HL				;書き込み先のアドレスを退避
  65FE  CD0216        		CALL	TIME_READ			;システムワークに日時データをセットする
  6601  3A76EA        		LD	A,(DT_SEC)			;秒
  6604  CD3A6A        		CALL	BCD2BIN				;
  6607  4F            		LD	C,A				;
  6608  3A77EA        		LD	A,(DT_MIN)			;分
  660B  CD3A6A        		CALL	BCD2BIN				;
  660E  5F            		LD	E,A				;
  660F  3A78EA        		LD	A,(DT_HOUR)			;時
  6612  CD3A6A        		CALL	BCD2BIN				;
  6615  57            		LD	D,A				;
  6616  CD6073        		CALL	ENC_TIME			;IN:C,D,E OUT:HL=エンコードされた時刻
  6619  EB            		EX	DE,HL				;
  661A  E1            		POP	HL				;
  661B  73            		LD	(HL),E				;
  661C  23            		INC	HL				;
  661D  72            		LD	(HL),D				;
  661E  23            		INC	HL				;
  661F  E5            		PUSH	HL				;書き込み先のアドレスを退避
  6620  3A7BEA        		LD	A,(DT_YEAR)			;年 BCD形式
  6623  CD3A6A        		CALL	BCD2BIN				;BCDをバイナリに変換 IN:A,OUT:A
  6626  C614          		ADD	A,20				;FAT16では年の基準値が「1980」なので、入力値に20を加える 例:2019->19+20=39
  6628  57            		LD	D,A				;
  6629  3A7AEA        		LD	A,(DT_MONTH)			;月
  662C  CD3A6A        		CALL	BCD2BIN				;
  662F  5F            		LD	E,A				;
  6630  3A79EA        		LD	A,(DT_DAY)			;日
  6633  CD3A6A        		CALL	BCD2BIN				;
  6636  4F            		LD	C,A				;
  6637  CD7873        		CALL	ENC_DATE			;IN:C,D,E OUT:HL=エンコードされた日付
  663A  EB            		EX	DE,HL				;DE=エンコードされた日付
  663B  E1            		POP	HL				;HL=書き込み先のアドレス
  663C  73            		LD	(HL),E				;
  663D  23            		INC	HL				;HL++
  663E  72            		LD	(HL),D				;
  663F  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]ディレクトリの全エントリに対し共通な処理を行う
                      	;・GET_DENT_SUB
                      	;・SEARCH_NULL_DENT -> FIND_FREE_DENT
                      	;・PRT_DENT -> PRT_DENT
                      	;IN  HL=ディレクトリのクラスタ＃,IY=サブルーチンのアドレス
                      	;OUT 
                      	;=================================================
  6640                	DIR_WALK:
  6640  3E00          		LD	A,FALSE				;発見フラグを降ろす
  6642  32367D        		LD	(FOUND),A			;
  6645  DD21087D      		LD	IX,FILE_BFFR_STRCT		;
  6649  7C            		LD	A,H				;HL=0000Hならルートディレクトリの処理へ
  664A  B5            		OR	L				;
  664B  280A          		JR	Z,.ROOT				;
  664D  E5            	.L4:	PUSH	HL				;クラスタ＃を退避
  664E  3A397D        		LD	A,(SCTRS_PER_CLSTR)		;B<-クラスタの総セクタ数
  6651  47            		LD	B,A				;
  6652  CD3869        		CALL	GET_FIRST_SCTR			;(DW0)<-クラスタHLの開始セクタ＃
  6655  180E          		JR	.L2				;
                      	
  6657  E5            	.ROOT:	PUSH	HL				;クラスタ＃を退避(スタック合わせのダミー)
  6658  3A4E7D        		LD	A,(ROOT_SCTR_SIZE)		;B<-ルートディレクトリの総セクタ数
  665B  47            		LD	B,A				;
  665C  21537D        		LD	HL,ROOT_SCTR			;(DW0)<-ルートディレクトリの開始セクタ＃
  665F  117C7D        		LD	DE,DW0				;
  6662  CDB66A        		CALL	DW_COPY				;
  6665  C5            	.L2:	PUSH	BC				;ループ回数を退避
  6666  CD7064        		CALL	LOAD_BFFR			;セクタ(DW0)をバッファIXに読み込む
  6669  0610          		LD	B,DENT_PER_SCTR			;=１セクタ当たりのディレクトリエントリ数
  666B  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-バッファの先頭アドレス
  666E  DD6605        		LD	H,(IX+IDX_BADR+1)		;
  6671  C5            	.L1:	PUSH	BC				;
  6672  E5            		PUSH	HL				;
  6673  DDE5          		PUSH	IX				;
  6675  117B66        		LD	DE,.RET				;戻りアドレスをスタックに積む
  6678  D5            		PUSH	DE				;
  6679  FDE9          		JP	(IY)				;IY=共通処理のサブルーチンアドレス。BC,HL,IX保持。CY=1:EODで終了したことを示す
                      	
  667B  DDE1          	.RET:	POP	IX				;
  667D  E1            		POP	HL				;
  667E  C1            		POP	BC				;
  667F  381B          		JR	C,.QUIT				;CY=1なら途中終了へ
  6681  112000        	.L3:	LD	DE,DENT_SIZE			;バッファポインタを次のエントリの先頭に進める
  6684  19            		ADD	HL,DE				;
  6685  10EA          		DJNZ	.L1				;ディレクトリエントリの数だけ繰り返す
  6687  CD8F6B        		CALL	DW0_INC				;セクタ＃++
  668A  C1            		POP	BC				;ループ回数を復帰
  668B  10D8          		DJNZ	.L2				;クラスタの最終セクタまで処理する
  668D  E1            		POP	HL				;クラスタ＃を復帰
  668E  7C            		LD	A,H				;
  668F  B5            		OR	L				;
  6690  C8            		RET	Z				;ルートディレクトリなら次のクラスタは無いので、ここで終了する
  6691  CD9463        		CALL	READ_FAT_DATA			;DE<-HLクラスタのFATデータ
  6694  EB            		EX	DE,HL				;HL=次のクラスタ＃,DE=不要
  6695  23            		INC	HL				;次のクラスタ＃がFFFFH（ファイルエンド）なら0000Hになる
  6696  7C            		LD	A,H				;！INC命令ではフラグ変化しないので注意！
  6697  B5            		OR	L				;
  6698  C8            		RET	Z				;Z=1なら終了
  6699  2B            		DEC	HL				;HLを戻す
  669A  18B1          		JR	.L4				;
                      	
  669C  C1            	.QUIT:	POP	BC				;ループカウンタBCを捨てる
  669D  E1            		POP	HL				;クラスタ＃HLを捨てる
  669E  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]空のディレクトリエントリを探す
                      	;・新しいファイルやディレクトリを作成する時に必要
                      	;IN  HL=ディレクトリエントリの先頭アドレス
                      	;OUT Z=0:見つからなかった
                      	;=================================================
  669F                	SEARCH_NULL_DENT:
  669F  7E            		LD	A,(HL)				;
  66A0  FEE5          		CP	ID_DISABLED			;
  66A2  2802          		JR	Z,.FOUND			;
  66A4  B7            		OR	A				;CY<-0
  66A5  C0            		RET	NZ				;A!=0なら戻る ！CY=0になっていることに注意！
  66A6  CDE066        	.FOUND:	CALL	DENT_FOUND			;エントリが見つかったことを知らせるフラグや値をセットする
  66A9  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]エントリ名と属性が一致するディレクトリエントリを(DIR_ENTRY)に読み込む
                      	;・DIR_WALK用サブルーチン
                      	;・20H ファイル（アーカイブ）
                      	;・10H ディレクトリ
                      	;IN  HL=検索対象となるディレクトリエントリの先頭アドレス
                      	;OUT (DIR_ENTRY),(FOUND)=TRUE:見つかった
                      	;=================================================
  66AA                	GET_DENT_SUB:
  66AA  CD7C65        		CALL	IS_VALID_DENT			;ディレクトリエントリの有効性をチェックする
  66AD  E5            		PUSH	HL				;ファイルバッファポインタを退避
  66AE  11107D        		LD	DE,DIR_ENTRY			;DE<-ディレクトリエントリバッファの先頭アドレス
  66B1  060B          		LD	B,DNAME_SIZE			;
  66B3  1A            	.L1:	LD	A,(DE)				;エントリ名を照合
  66B4  BE            		CP	(HL)				;
  66B5  2026          		JR	NZ,.EXIT			;一致しなければ終了
  66B7  13            		INC	DE				;
  66B8  23            		INC	HL				;
  66B9  10F8          		DJNZ	.L1				;エントリ名の文字数だけ繰り返す
  66BB  7E            		LD	A,(HL)				;A<-検索される側の属性値
  66BC  4F            		LD	C,A				;属性値を退避
  66BD  E60E          		AND	00001110B			;=ボリューム+システム+隠し属性
  66BF  201C          		JR	NZ,.EXIT			;いずれかのビットが立っていれば終了
  66C1  79            		LD	A,C				;属性値を復帰
  66C2  E610          		AND	00010000B			;ディレクトリ属性以外をマスクする
  66C4  4F            		LD	C,A				;C<-マスクされた属性値
  66C5  1A            		LD	A,(DE)				;A<-検索する側の属性値
  66C6  B7            		OR	A				;00Hなら属性チェックを省略
  66C7  2805          		JR	Z,.FOUND			;
  66C9  E610          		AND	00010000B			;ディレクトリ属性以外をマスクする
  66CB  B9            		CP	C				;ディレクトリ属性のみを比較
  66CC  200F          		JR	NZ,.EXIT			;一致しなければ終了
  66CE  E1            	.FOUND:	POP	HL				;バッファポインタを復帰
  66CF  E5            		PUSH	HL				;バッファポインタを退避
  66D0  11107D        		LD	DE,DIR_ENTRY			;一致したディレクトリエントリを(DIR_ENTRY)にコピーする
  66D3  012000        		LD	BC,DENT_SIZE			;
  66D6  EDB0          		LDIR					;
  66D8  E1            		POP	HL				;バッファポインタを復帰
  66D9  CDE066        		CALL	DENT_FOUND			;一致したことを知らせるフラグや値をセットする
  66DC  C9            		RET					;
                      	
  66DD  B7            	.EXIT:	OR	A				;CY<-0
  66DE  E1            		POP	HL				;
  66DF  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]GET_DENT_SUBでエントリが見つかったことを知らせるフラグや値をセットする
                      	;IN  HL=バッファポインタ,DW0=セクタ＃
                      	;OUT (DIR_ENTRY.BP),(DIR_ENTRY.SCTR),(FOUND),CY<-1
                      	;=================================================
  66E0                	DENT_FOUND:
  66E0  22347D        		LD	(DIR_ENTRY.BP),HL		;ディレクトリエントリ情報のバッファポインタ<-HL
  66E3  217C7D        		LD	HL,DW0				;
  66E6  11307D        		LD	DE,DIR_ENTRY.SCTR		;
  66E9  CDB66A        		CALL	DW_COPY				;ディレクトリエントリ情報のセクタ＃<-(DW0)
  66EC  3EFF          		LD	A,TRUE				;発見フラグを立てる
  66EE  32367D        		LD	(FOUND),A			;
  66F1  37            		SCF					;終了フラグを立てる
  66F2  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]エントリ名出力 FILES命令用
                      	;・DIR_WALK用サブルーチン
                      	;IN  HL=バッファポインタ
                      	;OUT CY:1=END OF DATA
                      	;=================================================
  66F3                	PRT_DENT:
  66F3  CD7C65        		CALL	IS_VALID_DENT			;
  66F6  C5            		PUSH	BC				;
  66F7  E5            		PUSH	HL				;
  66F8  DDE5          		PUSH	IX				;
  66FA  E5            		PUSH	HL				;IX<-バッファポインタ
  66FB  DDE1          		POP	IX				;
  66FD  CD7B69        		CALL	PAUSE				;一時停止処理
  6700  2003          		JR	NZ,.L6				;STOPキーで中断
  6702  37            		SCF					;強制終了フラグを立てる
  6703  1850          		JR	.EXIT2				;
                      	
  6705  DD7E0B        	.L6:	LD	A,(IX+0BH)			;=属性値
  6708  5F            		LD	E,A				;
  6709  E60E          		AND	00001110B			;隠しファイル、システム、ボリューム属性を排除する
  670B  2047          		JR	NZ,.EXIT			;
  670D  7B            		LD	A,E				;
  670E  E610          		AND	00010000B			;=「ディレクトリ」属性
  6710  200D          		JR	NZ,.DIR				;
  6712  CD506A        		CALL	IPRINT				;
  6715  20202020202022		DB	"      ",DQUOTE,EOL		;
        00            	
  671D  180B          		JR	.NAME				;ファイル・ディレクトリ名表示へ
                      	
  671F  CD506A        	.DIR:	CALL	IPRINT				;ディレクトリマーク表示
  6722  3C4449523E2022		DB	"<DIR> ",DQUOTE,EOL		;
        00            	
  672A  060B          	.NAME	LD	B,DNAME_SIZE			;ファイル・ディレクトリ名表示
  672C  0E00          		LD	C,00H				;空白カウンタ
  672E  7E            	.L1:	LD	A,(HL)				;
  672F  FE20          		CP	SPC				;空白をピリオドに置き換える
  6731  2834          		JR	Z,.L3				;
  6733  DF            	.L2:	RST	18H				;
  6734  23            		INC	HL				;
  6735  10F7          		DJNZ	.L1				;
  6737  3E22          	.L5:	LD	A,DQUOTE			;二重引用符表示
  6739  DF            		RST	18H				;
                      	
                      	IF FALSE
;;                   -		CALL	IPRINT				;FATエントリ表示
;;                   -		DB	3AH,27H,EOL			;
;;                   -		LD	L,(IX+1AH)			;
;;                   -		LD	H,(IX+1BH)			;
;;                   -		CALL	PRTHLHEX			;
                      	ENDIF
                      	
                      	
  673A  79            		LD	A,C				;位置合わせ用の空白表示
  673B  B7            		OR	A				;
  673C  2806          		JR	Z,.L8				;
  673E  CDD45F        	.L7:	CALL	PUT_SPC				;
  6741  0D            		DEC	C				;
  6742  20FA          		JR	NZ,.L7				;
  6744  CD506A        	.L8:	CALL	IPRINT				;
  6747  2700          		DB	27H,EOL				;= "'"
                      	
  6749  DD7E0B        		LD	A,(IX+0BH)			;
  674C  E610          		AND	00010000B			;
  674E  CC2068        		CALL	Z,PRT_FSIZE			;
                      	
                      	;	LD	E,(IX+18H)			;
                      	;	LD	D,(IX+19H)			;
                      	;	CALL	PRT_FDATE			;日付表示
                      	;	CALL	PUT_SPC				;
                      	;	LD	E,(IX+16H)			;
                      	;	LD	D,(IX+17H)			;
                      	;	CALL	PRT_FTIME			;時刻表示
                      	
  6751  CDCA5F        		CALL	PUT_CR				;改行
  6754  B7            	.EXIT:	OR	A				;CY<-0
  6755  DDE1          	.EXIT2:	POP	IX				;
  6757  E1            		POP	HL				;
  6758  C1            		POP	BC				;
  6759  C9            		RET					;
                      	
  675A  7E            	.L4:	LD	A,(HL)				;空白部をピリオドに置き換える
  675B  FE20          		CP	SPC				;
  675D  2808          		JR	Z,.L3				;
  675F  F5            		PUSH	AF				;
  6760  3E2E          		LD	A,"."				;
  6762  DF            		RST	18H				;
  6763  F1            		POP	AF				;
  6764  0D            		DEC	C				;
  6765  18CC          		JR	.L2				;
  6767  23            	.L3:	INC	HL				;バッファポインタ++
  6768  0C            		INC	C				;空白カウンタ++
  6769  10EF          		DJNZ	.L4				;
  676B  18CA          		JR	.L5				;
                      	
                      	;=================================================
                      	;[DIR]ディレクトリエントリバッファをクリアする
                      	;=================================================
  676D                	CLR_DENT_BFFR:
  676D  D9            		EXX
  676E  21107D        		LD	HL,DIR_ENTRY			;
  6771  11117D        		LD	DE,DIR_ENTRY+1			;
  6774  011F00        		LD	BC,DENT_SIZE-1			;
  6777  3600          		LD	(HL),00H			;
  6779  EDB0          		LDIR					;
  677B  D9            		EXX					;
  677C  C9            		RET					;
                      	
[EOF:DIR.asm]
                      	INCLUDE	"FS.asm"				;ファイルシステム
                      	
                      	;=================================================
                      	;[FS]自動実行
                      	;・"/HELLO.CMT"が存在すればロードしてBASICを実行する
                      	;=================================================
  677D                	AUTOEXEC:
  677D  DB08          		IN	A,(08H)				;
  677F  E640          		AND	01000000B			;"SHIFT"キーが押されていたらキャンセルする
  6781  C8            		RET	Z				;
                      	
  6782  E5            		PUSH	HL
  6783  21A667        		LD	HL,.NAME			;
  6786  CDC167        		CALL	STR2BUFF			;
  6789  213DFF        		LD	HL,STR_BUFF			;
  678C  CDB267        		CALL	IS_FILE				;
  678F  E1            		POP	HL				;
  6790  C8            		RET	Z				;
                      	
  6791  E5            		PUSH	HL
  6792  21A667        		LD	HL,.NAME			;
  6795  CDC167        		CALL	STR2BUFF			;
  6798  213DFF        		LD	HL,STR_BUFF			;
  679B  22EE7C        		LD	(ARG0),HL			;
  679E  E1            		POP	HL				;
  679F  CD7375        		CALL	LOAD.E1				;
  67A2  E1            		POP	HL				;！重要！
  67A3  C3F43D        		JP	RUN
                      	
  67A6  222F48454C4C4F	.NAME:	DB	DQUOTE,"/HELLO.CMT",EOL		;
        2E434D5400    	
                      	
                      	;=================================================
                      	;[FS]ファイルが存在するかを調べる
                      	;IN  HL=パス文字列の先頭アドレス
                      	;OUT Z=1:存在しない
                      	;=================================================
  67B2                	IS_FILE:
  67B2  22EE7C        		LD	(ARG0),HL			;
  67B5  CDBD64        		CALL	CHANGE_WDIR			;
  67B8  0E20          		LD	C,ATRB_FILE			;
  67BA  CD6365        		CALL	GET_DENT			;
  67BD  CD5065        		CALL	RESTORE_WDIR			;
  67C0  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]文字列式を評価して文字列バッファに格納する
                      	;=================================================
  67C1                	STR2BUFF:
  67C1  CD8F4A        		CALL	EVALEXP				;式を評価
  67C4  E5            		PUSH	HL				;TP退避
  67C5  CD9C54        		CALL	549CH				;DE<-結果の文字列の先頭アドレス
  67C8  2B            		DEC	HL				;
  67C9  2B            		DEC	HL				;
  67CA  46            		LD	B,(HL)				;B<-結果の文字列全体の長さ
  67CB  0E4F          		LD	C,STR_BUFF_SIZE-1		;C<-文字列バッファの長さ。終端識別コード用に１文字分減らす
  67CD  213DFF        		LD	HL,STR_BUFF			;HL<-文字列バッファの先頭アドレス
  67D0  1A            	.L2:	LD	A,(DE)				;
  67D1  77            		LD	(HL),A				;
  67D2  23            		INC	HL				;
  67D3  13            		INC	DE				;
  67D4  0D            		DEC	C				;
  67D5  2802          		JR	Z,.L3				;
  67D7  10F7          		DJNZ	.L2				;
  67D9  3600          	.L3:	LD	(HL),EOL			;終端コードをセットする
  67DB  E1            		POP	HL				;
  67DC  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]FAT16関連ワーク初期化
                      	;=================================================
  67DD                	INIT_FAT16:
  67DD  210000        		LD	HL,ROOT				;
  67E0  225B7D        		LD	(WDIR_CLSTR),HL			;ワーキングディレクトリのクラスタ＃<-ルートディレクトリ
  67E3  210200        		LD	HL,MIN_CLSTR			;
  67E6  225F7D        		LD	(TGT_CLSTR),HL			;ターゲットクラスタ＃<-最小クラスタ＃
  67E9  CD1964        		CALL	INIT_BFFR			;バッファ関連ワーク初期化
  67EC  210F7D        		LD	HL,DNAME			;ディレクトリエントリ文字列の文字数
  67EF  360B          		LD	(HL),DNAME_SIZE			;
  67F1  216A7D        		LD	HL,ATRB				;ファイル属性文字列の文字数
  67F4  3606          		LD	(HL),ATRB_SIZE			;
  67F6  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]ボリューム名を表示する
                      	;=================================================
  67F7                	PRT_VOLUME:
  67F7  21537D        		LD	HL,ROOT_SCTR			;(DW0)<-ルートディレクトリの開始セクタ＃
  67FA  117C7D        		LD	DE,DW0				;
  67FD  CDB66A        		CALL	DW_COPY				;
  6800  DD21087D      		LD	IX,FILE_BFFR_STRCT		;
  6804  CD7064        		CALL	LOAD_BFFR			;ルートディレクトリの開始セクタをバッファIXに読み込む
  6807  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-データポインタ=バッファの先頭アドレス
  680A  DD6605        		LD	H,(IX+IDX_BADR+1)		;
  680D  CD506A        		CALL	IPRINT				;
  6810  566F6C3A00    		DB	"Vol:",EOL			;
  6815  060B          		LD	B,DNAME_SIZE			;
  6817  7E            	.L1:	LD	A,(HL)				;
  6818  23            		INC	HL				;
  6819  DF            		RST	18H				;
  681A  10FB          		DJNZ	.L1				;
  681C  CDCA5F        		CALL	PUT_CR				;
  681F  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]ファイルサイズを16進数で現在位置に出力する
                      	;IN  IX=ディレクトリポインタ
                      	;OUT -
                      	;=================================================
  6820                	PRT_FSIZE:
  6820  E5            		PUSH	HL				;
  6821  DD7E1E        		LD	A,(IX+1EH)			;
  6824  DDB61F        		OR	(IX+1FH)			;
  6827  3E20          		LD	A," "				;
  6829  2802          		JR	Z,.L1				;
  682B  3E2B          		LD	A,"+"				;FFFFHより大きい場合は"+"を付ける
  682D  DF            	.L1:	RST	18H				;
  682E  DD6E1C        		LD	L,(IX+1CH)			;
  6831  DD661D        		LD	H,(IX+1DH)			;
  6834  CDC05E        		CALL	PRTHLHEX			;
  6837  E1            		POP	HL				;
  6838  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]FAT16のSDがマウントされているかをチェックする
                      	;=================================================
  6839                	IS_FAT16:
  6839  E5            		PUSH	HL				;
  683A  CD6D61        		CALL	MMC_INIT			;MMCをSPIモードに初期化する。オンラインでなければタイムアウトになるはず？
  683D  E1            		POP	HL				;
  683E  3A397D        		LD	A,(SCTRS_PER_CLSTR)		;
  6841  B7            		OR	A				;
  6842  C0            		RET	NZ				;
  6843  211F78        		LD	HL,MSG_NOT_FAT16		;
  6846  C30A6A        		JP	ERR				;
                      	
                      	;=================================================
                      	;[FS]MBRの読み込み
                      	;IN  
                      	;OUT (PP_SCTR)
                      	;=================================================
  6849                	READ_MBR:
  6849  21747D        		LD	HL,MMCADR0			;MMCアドレスを00000000Hにセット
  684C  CD2A6B        		CALL	DW_CLR				;
  684F  214A7D        		LD	HL,PP_SCTR			;プライマリパーティションの開始セクタ＃を00000000Hにセット
  6852  CD2A6B        		CALL	DW_CLR				;
  6855  21EE7A        		LD	HL,FILE_BFFR			;MBRをバッファに読み込む
  6858  0601          		LD	B,01H				;
  685A  E5            		PUSH	HL				;
  685B  CD9162        		CALL	MMC_READ			;
  685E  E1            		POP	HL				;セクタ＃0の最初のバイトが00Hならパーティションが切られているとする
  685F  7E            		LD	A,(HL)				;
  6860  B7            		OR	A				;
  6861  C0            		RET	NZ				;
  6862  11C601        		LD	DE,IDX_PP_SCTR			;「プライマリパーティションの開始セクタ＃」をワークに保存する
  6865  19            		ADD	HL,DE				;
  6866  114A7D        		LD	DE,PP_SCTR			;
  6869  CDB66A        		CALL	DW_COPY				;
  686C  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]IPLの読み込み
                      	;IN  
                      	;OUT (BPB)
                      	;=================================================
  686D                	READ_IPL:
  686D  21377D        		LD	HL,BPB				;BPB用ワークをクリアする
  6870  11387D        		LD	DE,BPB+1			;
  6873  3600          		LD	(HL),00H			;
  6875  011200        		LD	BC,0013H-1			;
  6878  EDB0          		LDIR					;
  687A  CD236B        		CALL	DW0_CLR				;(DW0)<-00000000H
  687D  21EE7A        		LD	HL,FILE_BFFR			;
  6880  E5            		PUSH	HL				;
  6881  CD2669        		CALL	READ_SCTR			;IPL領域をバッファに読み込む
  6884  E1            		POP	HL				;
  6885  E5            		PUSH	HL				;バッファアドレス退避
  6886  113600        		LD	DE,0036H			;HL<-「FATタイプ文字列」の先頭アドレス
  6889  19            		ADD	HL,DE				;
  688A  118878        		LD	DE,FAT_CODE			;コードと照合する
  688D  010800        		LD	BC,0008H			;=文字数
  6890  1A            	.L1:	LD	A,(DE)				;
  6891  EDA1          		CPI					;HL++,BC--
  6893  2806          		JR	Z,.L2				;
  6895  211F78        		LD	HL,MSG_NOT_FAT16		;
  6898  C30A6A        		JP	ERR				;
  689B  13            	.L2:	INC	DE				;
  689C  EA9068        		JP	PE,.L1				;
  689F  E1            		POP	HL				;バッファアドレス復帰
  68A0  110B00        		LD	DE,IDX_BPB			;HL<-BPB領域の先頭アドレス
  68A3  19            		ADD	HL,DE				;
  68A4  11377D        		LD	DE,BPB				;BPBをワークに保存する
  68A7  011300        		LD	BC,0013H			;
  68AA  EDB0          		LDIR					;
  68AC  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]BPBから必要な定数を求める
                      	;・(ROOT_SCTR)<-FAT開始セクタ＃+FAT１面に必要なセクタ数*2
                      	;・(DATA_SCTR)<-ルートディレクトリのセクタ＃+(総ルートディレクトリ数*ディレクトリサイズ)/セクタサイズ
                      	;=================================================
  68AD                	READ_BPB:
  68AD  214F7D        		LD	HL,FAT_SCTR			;(FAT_SCTR)<-FAT開始セクタ＃
  68B0  CD2A6B        		CALL	DW_CLR				;
  68B3  ED5B3A7D      		LD	DE,(FAT_START)			;
  68B7  73            		LD	(HL),E				;
  68B8  23            		INC	HL				;
  68B9  72            		LD	(HL),D				;
  68BA  217C7D        		LD	HL,DW0				;HL<-DW0
  68BD  E5            		PUSH	HL				;
  68BE  CD236B        		CALL	DW0_CLR				;(DW0)<-00000000H
  68C1  EB            		EX	DE,HL				;DE=DW0
  68C2  2A427D        		LD	HL,(FAT_SIZE)			;HL<-(BPB+11)=FAT１面に必要なセクタ数
  68C5  29            		ADD	HL,HL				;HL<-(BPB+11)*2
  68C6  EB            		EX	DE,HL				;DE=(BPB+11)*2,HL=DW0
  68C7  73            		LD	(HL),E				;(DW0)<-(BPB+11)*2
  68C8  23            		INC	HL				;HL++
  68C9  72            		LD	(HL),D				;
  68CA  E1            		POP	HL				;HL=DW0
  68CB  114F7D        		LD	DE,FAT_SCTR			;DE<-FAT_SCTR
  68CE  CD606B        		CALL	DW_ADD				;(DW0)<-(FAT_SCTR)+(BPB+11)*2
  68D1  11537D        		LD	DE,ROOT_SCTR			;
  68D4  CDB66A        		CALL	DW_COPY				;(ROOT_SCTR)<-(DW0)=(FAT_SCTR)+(BPB+11)*2
  68D7  2A3D7D        		LD	HL,(ROOT_SIZE)			;=総ルートディレクトリ数
  68DA  29            		ADD	HL,HL				;=X*2
  68DB  29            		ADD	HL,HL				;=X*4
  68DC  29            		ADD	HL,HL				;=X*8
  68DD  29            		ADD	HL,HL				;=X*16
  68DE  29            		ADD	HL,HL				;=X*32=総ルートディレクトリ数*ディレクトリのサイズ
  68DF  B7            		OR	A				;CY<-0
  68E0  0E00          		LD	C,00H				;ルートディレクトリの総セクタ数を求める
  68E2  110002        		LD	DE,SCTR_SIZE			;=200H
  68E5  ED52          	.L1:	SBC	HL,DE				;HL<-HL-200H
  68E7  0C            		INC	C				;
  68E8  30FB          		JR	NC,.L1				;
  68EA  0D            		DEC	C				;
  68EB  214E7D        		LD	HL,ROOT_SCTR_SIZE		;ルートディレクトリの総セクタ数<-C
  68EE  71            		LD	(HL),C				;
  68EF  21537D        		LD	HL,ROOT_SCTR			;
  68F2  11577D        		LD	DE,DATA_SCTR			;
  68F5  D5            		PUSH	DE				;
  68F6  CDB66A        		CALL	DW_COPY				;(DATA_SCTR)<-(ROOT_SCTR)
  68F9  E1            		POP	HL				;HL<-DATA_SCTR
  68FA  7E            		LD	A,(HL)				;(DATA_SCTR)<-(ROOT_SCTR)+C
  68FB  81            		ADD	A,C				;
  68FC  77            		LD	(HL),A				;
  68FD  23            		INC	HL				;
  68FE  7E            		LD	A,(HL)				;
  68FF  CE00          		ADC	A,0				;
  6901  77            		LD	(HL),A				;
  6902  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]セクタ＃から物理アドレスを求める
                      	;IN  (DW0)=セクタ＃
                      	;OUT (MMCADR0)=物理アドレス
                      	;=================================================
  6903                	GET_PHYSICAL_ADRS:
  6903  D5            		PUSH	DE				;
  6904  E5            		PUSH	HL				;
  6905  CDC26A        		CALL	DW0_PUSH			;(DW0)を退避
  6908  214A7D        		LD	HL,PP_SCTR			;(DW0)<-セクタ＃+プライマリパーティションの開始セクタ＃
  690B  11807D        		LD	DE,DW1				;
  690E  CDB66A        		CALL	DW_COPY				;
  6911  CD546B        		CALL	DW0_ADD				;
  6914  CDF06B        		CALL	DW_X512				;(MMCADR0)<-セクタ＃*セクタサイズ=物理アドレス
  6917  217C7D        		LD	HL,DW0				;
  691A  11747D        		LD	DE,MMCADR0			;
  691D  CDB66A        		CALL	DW_COPY				;
  6920  CDE86A        		CALL	DW0_POP				;(DW0)を復旧
  6923  E1            		POP	HL				;
  6924  D1            		POP	DE				;
  6925  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]セクタを指定領域に読み込む
                      	;IN  (DW0)=読み込みたいセクタ＃,HL=メモリ領域の先頭アドレス
                      	;OUT (MMCADR0~3)
                      	;=================================================
  6926                	READ_SCTR:
  6926  CD0369        		CALL	GET_PHYSICAL_ADRS		;(MMCADR0)<-セクタ＃(DW0)の物理アドレス
  6929  0601          		LD	B,01H				;=MMCブロック数
  692B  CD9162        		CALL	MMC_READ			;メモリ<-セクタデータ200Hバイト
  692E  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]指定領域をセクタに書き込む
                      	;IN  (DW0)=書き込みたいセクタ＃,HL=メモリ領域の先頭アドレス
                      	;OUT (MMCADR0~3)
                      	;=================================================
  692F                	WRITE_SCTR:
  692F  CD0369        		CALL	GET_PHYSICAL_ADRS		;(MMCADR0)<-セクタ＃(DW0)の物理アドレス
  6932  0601          		LD	B,01H				;=MMCブロック数
  6934  CDB662        		CALL	MMC_WRITE			;セクタ<-メモリデータ200Hバイト
  6937  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]クラスタの開始セクタ＃を求める
                      	;IN  HL=クラスタ＃
                      	;OUT (DW0)=セクタ＃
                      	;=================================================
  6938                	GET_FIRST_SCTR:
  6938  C5            		PUSH	BC				;
  6939  D5            		PUSH	DE				;
  693A  E5            		PUSH	HL				;
  693B  7C            		LD	A,H				;HL=0000H ?
  693C  B5            		OR	L				;
  693D  200B          		JR	NZ,.L1				;
  693F  21537D        		LD	HL,ROOT_SCTR			;(DW0)<-ルートディレクトリの開始セクタ＃
  6942  117C7D        		LD	DE,DW0				;
  6945  CDB66A        		CALL	DW_COPY				;
  6948  1814          		JR	.EXIT				;
  694A  2B            	.L1:	DEC	HL				;HL<-HL-2
  694B  2B            		DEC	HL				;
  694C  3A397D        		LD	A,(SCTRS_PER_CLSTR)		;=１クラスタ当たりのセクタ数
  694F  5F            		LD	E,A				;
  6950  1600          		LD	D,00H				;
  6952  CDF76B        		CALL	HLXDE				;(DW0)<-HL*DE
  6955  217C7D        		LD	HL,DW0				;
  6958  11577D        		LD	DE,DATA_SCTR			;
  695B  CD606B        		CALL	DW_ADD				;(DW0)<-セクタ＃
  695E  E1            	.EXIT:	POP	HL				;
  695F  D1            		POP	DE				;
  6960  C1            		POP	BC				;
  6961  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]ワーキングディレクトリ内からファイルを探して、そのクラスタ＃を求める
                      	;IN  HL=ファイル名の先頭アドレス
                      	;OUT (TGT_CLSTR)=一致したファイルのクラスタ＃
                      	;=================================================
  6962                	DNAME2CLSTR:
  6962  0E20          		LD	C,ATRB_FILE			;
  6964  CD6365        		CALL	GET_DENT			;
  6967  CA7678        		JP	Z,ERR_NOT_FOUND			;
  696A  2A2A7D        		LD	HL,(DIR_ENTRY+IDX_FAT)		;=一致したファイルのクラスタ＃
  696D  7C            		LD	A,H				;クラスタ＃が0000Hなら空ファイルなのでエラーへ
  696E  B5            		OR	L				;
  696F  CA7C78        		JP	Z,ERR_EMPTY_FILE		;
  6972  225F7D        		LD	(TGT_CLSTR),HL			;一致したファイルのクラスタ＃をターゲットクラスタにセットする
  6975  C9            		RET					;
                      	
[EOF:FS.asm]
                      	INCLUDE	"SUBS.asm"				;汎用サブルーチン
                      	;=================================================
                      	;[SUB]インフォメーションスイッチがオンかチェックする
                      	;IN  -
                      	;OUT Z=1:オフ（情報を表示しないモード）
                      	;=================================================
  6976                	IS_INFO_ON:
  6976  3AC47D        		LD	A,(INFO_SW)
  6979  A7            		AND	A
  697A  C9            		RET
                      	
                      	;=================================================
                      	;[SUB]日付が79年かチェックする
                      	;IN  (DT_YEAR)
                      	;OUT CF=1:79年
                      	;=================================================
                      	IF FALSE
;;                   -	IS_YEAR79:
;;                   -		LD	A,(DT_YEAR)			;
;;                   -		CP	79H				;=79年
;;                   -		RET	NZ				;
;;                   -		CALL	IPRINT				;
;;                   -		DB	"SET",CR,LF			;
;;                   -		DB	"DATE$=",DQUOTE,"00/00/00",DQUOTE
;;                   -		DB	":TIME$=",DQUOTE,"00:00:00",DQUOTE,CR,LF,EOL
;;                   -		RET
                      	ENDIF
                      	
                      	;=================================================
                      	;[SUB]一時停止
                      	;IN  
                      	;OUT :Z=1:STOPキーが押された
                      	;=================================================
  697B                	PAUSE:
  697B  DB09          		IN	A,(09H)				;
  697D  CB47          		BIT	00H,A				;STOP押下ならZ=1
  697F  C8            		RET	Z				;処理中断へ
  6980  CB7F          		BIT	07H,A				;エスケープ押下なら一時停止
  6982  C0            		RET	NZ				;
  6983  CD750F        		CALL	KEYWAIT				;リターン入力で再開
  6986  FE03          		CP	03H				;STOP押下ならZ=1
  6988  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]拡張子別にサブルーチンへジャンプする
                      	;IN  (TGT_CLSTR)=ファイルのクラスタ＃,HL=サブルーチンテーブルポインタ
                      	;OUT
                      	;=================================================
  6989                	EXT_TABLE_JUMP:
  6989  E5            	.L3:	PUSH	HL				;テーブルポインタを退避
  698A  11187D        		LD	DE,DIR_ENTRY+IDX_EXT		;DE<-ディレクトリエントリ拡張子部
  698D  0603          		LD	B,03H				;B<-拡張子の文字数
  698F  1A            	.L2:	LD	A,(DE)				;入力された拡張子とテーブルを照合する
  6990  BE            		CP	(HL)				;(DE):(HL)
  6991  200A          		JR	NZ,.L1				;不一致処理へ
  6993  13            		INC	DE				;それぞれのポインタを進める
  6994  23            		INC	HL				;
  6995  10F8          		DJNZ	.L2				;文字数分だけ繰り返す
                      	
  6997  D1            		POP	DE				;不要になったテーブルポインタを捨てる
  6998  5E            		LD	E,(HL)				;DE<-拡張子に対応したサブルーチンのアドレス
  6999  23            		INC	HL				;
  699A  56            		LD	D,(HL)				;
  699B  EB            		EX	DE,HL				;HL<-DE
  699C  E9            		JP	(HL)				;サブルーチンへ
                      	
  699D  E1            	.L1:	POP	HL				;HL<-行の先頭アドレス
  699E  010500        		LD	BC,0005H			;BC<-テーブル１行あたりのバイト数
  69A1  09            		ADD	HL,BC				;テーブルのポインタを次の行に進める
  69A2  7E            		LD	A,(HL)				;値が00Hになるまで繰り返す
  69A3  B7            		OR	A				;
  69A4  20E3          		JR	NZ,.L3				;
                      	
  69A6  21ED77        		LD	HL,MSG_NOT_SUPPORTED_EXT 	;不一致処理
  69A9  C30A6A        		JP	ERR				;
                      	
                      	;=================================================
                      	;[SUB]入力された引数をワークにセットする
                      	; "文字列",式1,式2 -> (ARG0),(ARG1),(ARG2),(ARG3)
                      	; 式1,式2,式3は省略可
                      	;IN  HL=TP
                      	;OUT HL=TP,(ARG0)=文字列ポインタ,(ARG1~3)=WORD型,(ARGNUM)=有効なWORD型パラメータの数 0~3
                      	;=================================================
  69AC                	GET_ARGS:
  69AC  CDE269        		CALL	RESET_ARGS			;入力パラメータ用ワークを初期化
  69AF  CDE276        		CALL	STR2ARG0			;(ARG0)<-文字列ポインタ
                      	
  69B2  2B            		DEC	HL				;！重要！
  69B3  D7            		RST	10H				;BASIC解析
  69B4  7E            		LD	A,(HL)				;カンマが無ければ終了する
  69B5  FE2C          		CP	","				;
  69B7  C0            		RET	NZ				;
                      	
  69B8  CDBB6D        		CALL	EXP2WORD			;(ARG1)<-式１の評価結果
  69BB  ED53F07C      		LD	(ARG1),DE			;
  69BF  CDDB69        		CALL	.INC				;(ARGNUM)++
  69C2  7E            		LD	A,(HL)				;
  69C3  FE2C          		CP	","				;
  69C5  C0            		RET	NZ				;
                      	
  69C6  CDBB6D        		CALL	EXP2WORD			;(ARG2)<-式２の評価結果
  69C9  ED53F27C      		LD	(ARG2),DE			;
  69CD  CDDB69        		CALL	.INC				;(ARGNUM)++
  69D0  7E            		LD	A,(HL)				;
  69D1  FE2C          		CP	","				;
  69D3  C0            		RET	NZ				;
                      	
  69D4  CDBB6D        		CALL	EXP2WORD			;(ARG2)<-式３の評価結果
  69D7  ED53F47C      		LD	(ARG3),DE			;
                      	
  69DB  E5            	.INC:	PUSH	HL				;有効な入力パラメータの数を＋１する
  69DC  21F67C        		LD	HL,ARGNUM			;
  69DF  34            		INC	(HL)				;
  69E0  E1            		POP	HL				;
  69E1  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]引数用ワークをリセットする
                      	;IN  -
                      	;OUT (ARG0~ARG3)<-0000H,ARGNUM<-0
                      	;=================================================
  69E2                	RESET_ARGS:
                      	;	PUSH	HL				;
                      	;	LD	HL,0000H			;
                      	;	LD	(ARG0),HL			;
                      	;	LD	(ARG1),HL			;
                      	;	LD	(ARG2),HL			;
                      	;	LD	(ARG3),HL			;
                      	;	XOR	A				;
                      	;	LD	(ARGNUM),A			;
                      	;	POP	HL
                      	
  69E2  E5            		PUSH	HL				;
  69E3  0609          		LD	B,09H				;
  69E5  21EE7C        		LD	HL,ARG0				;
  69E8  AF            		XOR	A				;
  69E9  77            	.L1:	LD	(HL),A				;
  69EA  23            		INC	HL				;
  69EB  10FC          		DJNZ	.L1				;
  69ED  E1            		POP	HL				;
  69EE  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]16進文字コード照合
                      	;IN  A=文字コード
                      	;OUT -
                      	;=================================================
  69EF                	IS_HEX:
  69EF  F5            		PUSH	AF				;
  69F0  CDC15F        		CALL	CAPITAL				;大文字化
  69F3  D630          		SUB	"0"				;"0"->0,"9"->9,"A"->17,"F"->22
  69F5  380C          		JR	C,.ERR				;00H~2FHを除外
  69F7  D60A          		SUB	10				;"A"->7,"F"->12
  69F9  380D          		JR	C,.EXIT				;"0"~"9"を抽出
  69FB  D607          		SUB	7				;"A"->0,"F"->5
  69FD  3804          		JR	C,.ERR				;":"~"@"を除外
  69FF  D606          		SUB	6				;
  6A01  3805          		JR	C,.EXIT				;"A"~"F"を抽出
                      	
  6A03  1E05          	.ERR:	LD	E,ILLEGAL_FUNCTION_CALL		;
  6A05  C3F93B        		JP	ERROR				;
                      	
  6A08  F1            	.EXIT:	POP	AF				;
  6A09  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]エラーメッセージ表示
                      	;IN  HL=メッセージのアドレス
                      	;OUT -
                      	;=================================================
  6A0A                	ERR:
  6A0A  CDED52        		CALL	PRINT				;
  6A0D  CDCA5F        		CALL	PUT_CR				;
  6A10  1E15          		LD	E,UNPRINTABLE			;
  6A12  C3F93B        		JP	ERROR				;
                      	
                      	;=================================================
                      	;[SUBS]YES / NO 入力待ち
                      	;IN  HL=メッセージ用文字列のアドレス
                      	;OUT Z=1:YES
                      	;=================================================
  6A15                	YES_NO:
  6A15  CDED52        		CALL	PRINT				;
  6A18  CD506A        		CALL	IPRINT				;
  6A1B  3F2028592F4E29		DB	"? (Y/N)",EOL			;
        00            	
  6A23  CD750F        		CALL	KEYWAIT				;A<-入力コード
  6A26  CDC15F        		CALL	CAPITAL				;大文字化
  6A29  F5            		PUSH	AF				;
  6A2A  DF            		RST	18H				;エコーバック
  6A2B  CDCA5F        		CALL	PUT_CR				;改行
  6A2E  F1            		POP	AF				;
  6A2F  FE59          		CP	"Y"				;"Y"ならZ<-1
  6A31  C8            		RET	Z				;
                      	
  6A32  212978        		LD	HL,MSG_CANCELED			;
  6A35  CDED52        		CALL	PRINT				;
  6A38  B7            		OR	A				;Z<-0
  6A39  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUBS]BCDをバイナリに変換する
                      	;IN  A=BCD値
                      	;OUT A=バイナリ値
                      	;=================================================
  6A3A                	BCD2BIN:
  6A3A  C5            		PUSH	BC				;A=59Hの場合
  6A3B  4F            		LD	C,A				;0101.1001B=59H
  6A3C  E6F0          		AND	11110000B			;0101.0000B=50H
  6A3E  CB3F          		SRL	A				;0010.1000B=28H=40
  6A40  47            		LD	B,A				;B<-40
  6A41  CB3F          		SRL	A				;0001.0100B
  6A43  CB3F          		SRL	A				;0000.1010B
  6A45  CB3F          		SRL	A				;0000.0101B=5
  6A47  87            		ADD	A,A				;=10
  6A48  80            		ADD	A,B				;A<-A+B=10+40=50
  6A49  47            		LD	B,A				;B=50
  6A4A  79            		LD	A,C				;A=0101.1001B=59H
  6A4B  E60F          		AND	00001111B			;A=0000.1001B=09H
  6A4D  80            		ADD	A,B				;A=A+B=9+50=59
  6A4E  C1            		POP	BC				;
  6A4F  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]文字列を表示する
                      	;IN  (SP)=文字列の先頭アドレス
                      	;OUT -
                      	;=================================================
  6A50                	IPRINT:
  6A50  E3            		EX	(SP),HL				;
  6A51  F5            		PUSH	AF				;
  6A52  7E            	.L1:	LD	A,(HL)				;
  6A53  23            		INC	HL				;
  6A54  B7            		OR	A				;
  6A55  2803          		JR	Z,.L2				;
  6A57  DF            		RST	18H				;
  6A58  18F8          		JR	.L1				;
  6A5A  F1            	.L2:	POP	AF				;
  6A5B  E3            		EX	(SP),HL				;
  6A5C  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]16進数を表示する
                      	;IN  A
                      	;OUT -
                      	;=================================================
  6A5D                	PUTHEX:
  6A5D  D5            		PUSH	DE				;
  6A5E  CD835E        		CALL	CNVBYTEHEX			;D,E<-文字
  6A61  7A            		LD	A,D				;
  6A62  DF            		RST	18H				;
  6A63  7B            		LD	A,E				;
  6A64  DF            		RST	18H				;
  6A65  D1            		POP	DE				;
  6A66  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]ダブルワードを16進数で表示する
                      	;IN  HL=ダブルワードのポインタ
                      	;OUT 
                      	;=================================================
  6A67                	PRT_DW_HEX:
  6A67  C5            		PUSH	BC				;
  6A68  E5            		PUSH	HL				;
  6A69  23            		INC	HL				;
  6A6A  23            		INC	HL				;
  6A6B  23            		INC	HL				;
  6A6C  0604          		LD	B,04H				;
  6A6E  7E            	.L1:	LD	A,(HL)				;
  6A6F  CD5D6A        		CALL	PUTHEX				;
  6A72  2B            		DEC	HL				;
  6A73  10F9          		DJNZ	.L1				;
  6A75  E1            		POP	HL				;
  6A76  C1            		POP	BC				;
  6A77  C9            		RET					;
                      	
[EOF:SUBS.asm]
                      	INCLUDE	"DWORD.asm"				;ダブルワード
                      	
                      	;=================================================
                      	;ダブルワード用ワーク LSB<<<MSB
                      	;=================================================
                      	;DW0:		DB	00H,00H,00H,00H		;変数
                      	;DW1:		DB	00H,00H,00H,00H		;変数
                      	;DW_SP_ORG:	DB	00H,00H			;スタックポインタの一時退避エリア
                      	;DW_SP:		DB	00H,00H			;ダブルワード用スタックポインタ
                      	;		DB	00H,00H,00H,00H		;ダブルワード用スタックエリア
                      	;		DB	00H,00H,00H,00H		;
                      	;		DB	00H,00H,00H,00H		;
                      	;		DB	00H,00H,00H,00H		;
                      	;DW_STACK	EQU	$			;
                      	
                      	;=================================================
                      	;ダブルワードスタック初期化
                      	;=================================================
  6A78                	INIT_DW:
  6A78  21987D        		LD	HL,DW_STACK			;
  6A7B  22867D        		LD	(DW_SP),HL			;
  6A7E  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード変数にレジスタの値をロードする
                      	;IN  HL=DW変数のポインタ,BCDE=MSB->LSB
                      	;OUT (HL)<-BCDE
                      	;=================================================
  6A7F                	DW_LD:
  6A7F  E5            		PUSH	HL				;
  6A80  73            		LD	(HL),E				;
  6A81  23            		INC	HL				;
  6A82  72            		LD	(HL),D				;
  6A83  23            		INC	HL				;
  6A84  71            		LD	(HL),C				;
  6A85  23            		INC	HL				;
  6A86  70            		LD	(HL),B				;
  6A87  E1            		POP	HL				;
  6A88  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)(DW1)を比較する
                      	;IN  -
                      	;OUT (DW0)<(DW1):CY=1 Z=?
                      	;    (DW0)=(DW1):CY=0 Z=1
                      	;    (DW0)>(DW1):CY=0 Z=0
                      	;=================================================
  6A89                	DW0_CP:
  6A89  C5            		PUSH	BC				;
  6A8A  D5            		PUSH	DE				;
  6A8B  E5            		PUSH	HL				;
  6A8C  217C7D        		LD	HL,DW0				;
  6A8F  11807D        		LD	DE,DW1				;
  6A92  C3986A        		JP	DW_CP.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HHLL)(DDEE)を比較する
                      	;IN  HL,DE
                      	;OUT (HHLL)<(DDEE):CY=1 Z=?
                      	;    (HHLL)=(DDEE):CY=0 Z=1
                      	;    (HHLL)>(DDEE):CY=0 Z=0
                      	;=================================================
  6A95                	DW_CP:
  6A95  C5            		PUSH	BC				;
  6A96  D5            		PUSH	DE				;DW0_CPと整合を取るために入れている
  6A97  E5            		PUSH	HL				;
  6A98  E5            	.E1:	PUSH	HL				;DW_POP用に退避
  6A99  CDCA6A        		CALL	DW_PUSH				;(HHLL)を退避する
  6A9C  CD7D6B        		CALL	DW_SUB				;(HHLL)<-(HHLL)-(DDEE)
  6A9F  380B          		JR	C,.EXIT				;CY=1なら(HHLL)<(DDEE) Zは無視してよい
  6AA1  AF            		XOR	A				;A<-0, CY<-0
  6AA2  010400        		LD	BC,0004H			;=バイト数
  6AA5  EDA1          	.L1:	CPI					;A-(HL) HL++ BC--
  6AA7  2003          		JR	NZ,.EXIT			;結果が0ではないので(HHLL)>(DDEE) CY=0, Z=0
  6AA9  EAA56A        		JP	PE,.L1				;結果が0なので(HHLL)=(DDEE) CY=0, Z=1
  6AAC  E1            	.EXIT:	POP	HL				;DW_POP用に復帰
  6AAD  F5            		PUSH	AF				;フラグを退避
  6AAE  CDF16A        		CALL	DW_POP				;(HHLL)を復旧する
  6AB1  F1            		POP	AF				;
  6AB2  E1            		POP	HL				;
  6AB3  D1            		POP	DE				;
  6AB4  C1            		POP	BC				;
  6AB5  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワードをコピーする
                      	;(HL)->(DE)
                      	;IN  HL=SOURCE,DE=DEST
                      	;OUT 
                      	;=================================================
  6AB6                	DW_COPY:
  6AB6  C5            		PUSH	BC				;
  6AB7  D5            		PUSH	DE				;
  6AB8  E5            		PUSH	HL				;
  6AB9  010400        		LD	BC,0004H			;
  6ABC  EDB0          		LDIR					;
  6ABE  E1            		POP	HL				;
  6ABF  D1            		POP	DE				;
  6AC0  C1            		POP	BC				;
  6AC1  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)をスタックに積む
                      	;IN  DW0
                      	;OUT -
                      	;=================================================
  6AC2                	DW0_PUSH:
  6AC2  D5            		PUSH	DE				;
  6AC3  E5            		PUSH	HL				;
  6AC4  217C7D        		LD	HL,DW0				;
  6AC7  C3CC6A        		JP	DW_PUSH.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HL)をスタックに積む
                      	;IN  HL
                      	;OUT -
                      	;=================================================
  6ACA                	DW_PUSH:
  6ACA  D5            		PUSH	DE				;
  6ACB  E5            		PUSH	HL				;
  6ACC  ED73847D      	.E1:	LD	(DW_SP_ORG),SP			;システムのスタックポインタを一時エリアに退避する
  6AD0  ED7B867D      		LD	SP,(DW_SP)			;スタックポインタをダブルワード用に変更する
  6AD4  5E            		LD	E,(HL)				;<-最下位バイト
  6AD5  23            		INC	HL				;
  6AD6  56            		LD	D,(HL)				;<-第２位バイト
  6AD7  23            		INC	HL				;
  6AD8  D5            		PUSH	DE				;
  6AD9  5E            		LD	E,(HL)				;<-第３位バイト
  6ADA  23            		INC	HL				;
  6ADB  56            		LD	D,(HL)				;<-最上位バイト
  6ADC  D5            		PUSH	DE				;
  6ADD  ED73867D      		LD	(DW_SP),SP			;ダブルワード用スタックポインタを保存する
  6AE1  ED7B847D      		LD	SP,(DW_SP_ORG)			;システムのスタックポインタを復旧する
  6AE5  E1            		POP	HL				;
  6AE6  D1            		POP	DE				;
  6AE7  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)をスタックから取り出す
                      	;IN  -
                      	;OUT (DW0)
                      	;=================================================
  6AE8                	DW0_POP:
  6AE8  C5            		PUSH	BC				;
  6AE9  D5            		PUSH	DE				;
  6AEA  E5            		PUSH	HL				;
  6AEB  217C7D        		LD	HL,DW0				;
  6AEE  C3F46A        		JP	DW_POP.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HL)をスタックから取り出す
                      	;IN  HL
                      	;OUT (HL)
                      	;=================================================
  6AF1                	DW_POP:
  6AF1  C5            		PUSH	BC				;
  6AF2  D5            		PUSH	DE				;
  6AF3  E5            		PUSH	HL				;
  6AF4  ED73847D      	.E1:	LD	(DW_SP_ORG),SP			;システムのスタックポインタを一時エリアに退避する
  6AF8  ED7B867D      		LD	SP,(DW_SP)			;スタックポインタをダブルワード用に変更する
  6AFC  D1            		POP	DE				;
  6AFD  C1            		POP	BC				;
  6AFE  71            		LD	(HL),C				;<-最下位バイト
  6AFF  23            		INC	HL				;
  6B00  70            		LD	(HL),B				;<-第２位バイト
  6B01  23            		INC	HL				;
  6B02  73            		LD	(HL),E				;<-第３位バイト
  6B03  23            		INC	HL				;
  6B04  72            		LD	(HL),D				;<-最上位バイト
  6B05  ED73867D      		LD	(DW_SP),SP			;ダブルワード用スタックポインタを保存する
  6B09  ED7B847D      		LD	SP,(DW_SP_ORG)			;システムのスタックポインタを復旧する
  6B0D  E1            		POP	HL				;
  6B0E  D1            		POP	DE				;
  6B0F  C1            		POP	BC				;
  6B10  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)に即値をロードする
                      	;IN  (SP)
                      	;BRK HL
                      	;=================================================
  6B11                	DW0_ILD:
  6B11  E3            		EX	(SP),HL				;
  6B12  D5            		PUSH	DE				;
  6B13  C5            		PUSH	BC				;
  6B14  117C7D        		LD	DE,DW0				;
  6B17  0604          		LD	B,4				;
  6B19  7E            	.L1:	LD	A,(HL)				;
  6B1A  23            		INC	HL				;
  6B1B  12            		LD	(DE),A				;
  6B1C  13            		INC	DE				;
  6B1D  10FA          		DJNZ	.L1				;
  6B1F  C1            	.L2:	POP	BC				;
  6B20  D1            		POP	DE				;
  6B21  E3            		EX	(SP),HL				;
  6B22  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)を０にする
                      	;IN  -
                      	;OUT (DW0)
                      	;=================================================
  6B23                	DW0_CLR:
  6B23  E5            		PUSH	HL				;
  6B24  217C7D        		LD	HL,DW0				;
  6B27  C32B6B        		JP	DW_CLR.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HHLL)を０にする
                      	;IN  HL
                      	;OUT (HHLL)
                      	;=================================================
  6B2A                	DW_CLR:
  6B2A  E5            		PUSH	HL				;
  6B2B  AF            	.E1:	XOR	A				;DW0_CLRのエントリポイント
  6B2C  77            		LD	(HL),A				;
  6B2D  23            		INC	HL				;
  6B2E  77            		LD	(HL),A				;
  6B2F  23            		INC	HL				;
  6B30  77            		LD	(HL),A				;
  6B31  23            		INC	HL				;
  6B32  77            		LD	(HL),A				;
  6B33  E1            		POP	HL				;
  6B34  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード交換 (DW0)<->(DW1)
                      	;IN  -
                      	;OUT (DW0),(DW1)
                      	;=================================================
  6B35                	DW0_SWAP:
  6B35  C5            		PUSH	BC				;
  6B36  D5            		PUSH	DE				;
  6B37  E5            		PUSH	HL				;
  6B38  117C7D        		LD	DE,DW0				;
  6B3B  21807D        		LD	HL,DW1				;
  6B3E  C3446B        		JP	DW_SWAP.E1			;
                      	
                      	;=================================================
                      	;ダブルワード交換 (DE)<->(HL)
                      	;IN  DE,HL
                      	;OUT (DE),(HL)
                      	;=================================================
  6B41                	DW_SWAP:
  6B41  C5            		PUSH	BC				;
  6B42  D5            		PUSH	DE				;
  6B43  E5            		PUSH	HL				;
  6B44  0604          	.E1:	LD	B,4				;DW0_SWAPのエントリポイント
  6B46  4E            	.L1:	LD	C,(HL)				;C<-(HL)
  6B47  1A            		LD	A,(DE)				;A<-(DE)
  6B48  EB            		EX	DE,HL				;
  6B49  71            		LD	(HL),C				;(DE)<-C
  6B4A  12            		LD	(DE),A				;(HL)<-A
  6B4B  EB            		EX	DE,HL				;結果として(HL)と(DE)が入れ替わっている
  6B4C  23            		INC	HL				;
  6B4D  13            		INC	DE				;
  6B4E  10F6          		DJNZ	.L1				;
  6B50  E1            		POP	HL				;
  6B51  D1            		POP	DE				;
  6B52  C1            		POP	BC				;
  6B53  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード加算 (DW0)<-(DW0)+(DW1)
                      	;IN  DW0=被加算数のポインタ,DW1=加算数のポインタ
                      	;OUT (DW0),CY
                      	;=================================================
  6B54                	DW0_ADD:
  6B54  C5            		PUSH	BC				;
  6B55  D5            		PUSH	DE				;
  6B56  E5            		PUSH	HL				;
  6B57  217C7D        		LD	HL,DW0				;
  6B5A  11807D        		LD	DE,DW1				;
  6B5D  C3636B        		JP	DW_ADD.E1			;
                      	
                      	;=================================================
                      	;ダブルワード加算 (HL)<-(HL)+(DE)
                      	;IN  HL=被加算数のポインタ,DE=加算数のポインタ
                      	;OUT (HL),CY
                      	;=================================================
  6B60                	DW_ADD:
  6B60  C5            		PUSH	BC				;
  6B61  D5            		PUSH	DE				;
  6B62  E5            		PUSH	HL				;
  6B63  0604          	.E1:	LD	B,4				;DW0_ADDのエントリポイント
  6B65  B7            		OR	A				;CY<-0
  6B66  1A            	.L1:	LD	A,(DE)				;(HL)<-(HL)+(DE) & CY
  6B67  8E            		ADC	A,(HL)				;
  6B68  77            		LD	(HL),A				;
  6B69  13            		INC	DE				;DE++
  6B6A  23            		INC	HL				;HL++
  6B6B  10F9          		DJNZ	.L1				;B--
  6B6D  E1            		POP	HL				;
  6B6E  D1            		POP	DE				;
  6B6F  C1            		POP	BC				;
  6B70  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード減算 (DW0)<-(DW0)-(DW1)
                      	;IN  DW0=被減算数のポインタ,DW1=減算数のポインタ
                      	;OUT (DW0),CY
                      	;=================================================
  6B71                	DW0_SUB:
  6B71  C5            		PUSH	BC				;
  6B72  D5            		PUSH	DE				;
  6B73  E5            		PUSH	HL				;
  6B74  217C7D        		LD	HL,DW0				;
  6B77  11807D        		LD	DE,DW1				;
  6B7A  C3806B        		JP	DW_SUB.E1			;
                      	
                      	;=================================================
                      	;ダブルワード減算 (HL)<-(HL)-(DE)
                      	;IN  HL=被減算数のポインタ,DE=減算数のポインタ
                      	;OUT (HL),CY
                      	;=================================================
  6B7D                	DW_SUB:
  6B7D  C5            		PUSH	BC				;
  6B7E  D5            		PUSH	DE				;
  6B7F  E5            		PUSH	HL				;
  6B80  EB            	.E1:	EX	DE,HL				;SBC命令でDEが使えないため入れ替える
  6B81  0604          		LD	B,4				;=バイト数
  6B83  B7            		OR	A				;CY<-0
  6B84  1A            	.L1:	LD	A,(DE)				;実質は (HL)<-(HL)-(DE)
  6B85  9E            		SBC	A,(HL)				;
  6B86  12            		LD	(DE),A				;
  6B87  13            		INC	DE				;
  6B88  23            		INC	HL				;
  6B89  10F9          		DJNZ	.L1				;
  6B8B  E1            		POP	HL				;
  6B8C  D1            		POP	DE				;
  6B8D  C1            		POP	BC				;
  6B8E  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)に１加算する
                      	;IN  -
                      	;OUT (DW0)
                      	;=================================================
  6B8F                	DW0_INC:
  6B8F  E5            		PUSH	HL				;
  6B90  217C7D        		LD	HL,DW0				;
  6B93  C3976B        		JP	DW_INC.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HHLL)に１加算する
                      	;IN  HL=ダブルワードのポインタ
                      	;OUT (HHLL)
                      	;=================================================
  6B96                	DW_INC:
  6B96  E5            		PUSH	HL				;
  6B97  34            	.E1:	INC	(HL)				;最下位バイトに１加算して０にならなければ
  6B98  200A          		JR	NZ,.EXIT			;桁上りがないと判断し終了へ
  6B9A  23            		INC	HL				;第２バイトに１加算して０にならなければ
  6B9B  34            		INC	(HL)				;桁上りがないと判断し終了へ
  6B9C  2006          		JR	NZ,.EXIT			;
  6B9E  23            		INC	HL				;第３バイトに１加算して０にならなければ
  6B9F  34            		INC	(HL)				;桁上りがないと判断し終了へ
  6BA0  2002          		JR	NZ,.EXIT			;
  6BA2  23            		INC	HL				;最上位バイトに１加算
  6BA3  34            		INC	(HL)				;
  6BA4  E1            	.EXIT:	POP	HL				;
  6BA5  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)を１減算する
                      	;IN  -
                      	;OUT (DW0),CY
                      	;=================================================
  6BA6                	DW0_DEC:
  6BA6  E5            		PUSH	HL				;
  6BA7  C5            		PUSH	BC				;
  6BA8  217C7D        		LD	HL,DW0				;
  6BAB  C3B06B        		JP	DW_DEC.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HL)を１減算する
                      	;IN  HL=ダブルワードのポインタ
                      	;OUT (HL),CY
                      	;=================================================
  6BAE                	DW_DEC:
  6BAE  E5            		PUSH	HL				;
  6BAF  C5            		PUSH	BC				;
  6BB0  7E            	.E1:	LD	A,(HL)				;最下位バイトから１減算して
  6BB1  D601          		SUB	1				;桁借りが生じなければ終了へ ！DECはCYが変化しないので使用できない！
  6BB3  77            		LD	(HL),A				;
  6BB4  300C          		JR	NC,.EXIT			;
  6BB6  23            		INC	HL				;
  6BB7  010003        		LD	BC,0300H			;B=ループ数, C=0
  6BBA  7E            	.L1:	LD	A,(HL)				;第２バイトから最上位バイトまで
  6BBB  99            		SBC	A,C				;キャリー付き減算を繰り返す
  6BBC  77            		LD	(HL),A				;
  6BBD  3003          		JR	NC,.EXIT			;桁借りが生じなければ終了へ
  6BBF  23            		INC	HL				;
  6BC0  10F8          		DJNZ	.L1				;
  6BC2  C1            	.EXIT:	POP	BC				;
  6BC3  E1            		POP	HL				;
  6BC4  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)を2倍する
                      	;IN  -
                      	;OUT (DW0),CY<-BIT31
                      	;=================================================
  6BC5                	DW0_X2:
  6BC5  E5            		PUSH	HL				;
  6BC6  217C7D        		LD	HL,DW0				;
  6BC9  C3CD6B        		JP	DW_X2.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HL)を2倍する
                      	;IN  HL
                      	;OUT (HL),CY<-BIT31
                      	;=================================================
  6BCC                	DW_X2:
  6BCC  E5            		PUSH	HL				;
  6BCD  CB26          	.E1:	SLA	(HL)				;BIT0<-0,CY<-BIT7
  6BCF  23            		INC	HL				;+1 フラグは変化しない
  6BD0  CB16          		RL	(HL)				;BIT8<-CY,CY<-BIT15
  6BD2  23            		INC	HL				;+2
  6BD3  CB16          		RL	(HL)				;BIT16<-CY,CY<-BIT23
  6BD5  23            		INC	HL				;+3
  6BD6  CB16          		RL	(HL)				;BIT24<-CY,CY<-BIT31
  6BD8  E1            		POP	HL				;
  6BD9  C9            		RET					;
                      	
                      	;=================================================
                      	;DW0を256倍する
                      	;IN  (DW0)
                      	;OUT -
                      	;=================================================
  6BDA                	DW_X256:
  6BDA  F5            		PUSH	AF				;
  6BDB  C5            		PUSH	BC				;
  6BDC  D5            		PUSH	DE				;
  6BDD  E5            		PUSH	HL				;
  6BDE  217E7D        		LD	HL,DW0+2			;転送元 00 01 02 03
  6BE1  117F7D        		LD	DE,DW0+3			;転送先 XX 00 01 02
  6BE4  010300        		LD	BC,0003H			;転送回数
  6BE7  EDB8          		LDDR					;BC--,DE--,HL--
  6BE9  AF            		XOR	A				;
  6BEA  12            		LD	(DE),A				;(DW0+0)<-0
  6BEB  E1            		POP	HL				;
  6BEC  D1            		POP	DE				;
  6BED  C1            		POP	BC				;
  6BEE  F1            		POP	AF				;
  6BEF  C9            		RET					;
                      	
                      	;=================================================
                      	;DW0を512倍する
                      	;IN  (DW0)
                      	;OUT CY
                      	;=================================================
  6BF0                	DW_X512:
  6BF0  CDC56B        		CALL	DW0_X2				;
  6BF3  CDDA6B        		CALL	DW_X256				;
  6BF6  C9            		RET					;
                      	
                      	;=================================================
                      	;ワードの乗算 (DW0)<-HLxDE 結果はダブルワード
                      	;HL X DE
                      	;IN  HL=被乗数,DE=乗数
                      	;OUT (DW0)
                      	;=================================================
  6BF7                	HLXDE:
  6BF7  C5            		PUSH	BC				;
  6BF8  CD236B        		CALL	DW0_CLR				;DW0,DW1<-0
  6BFB  CD356B        		CALL	DW0_SWAP			;
  6BFE  CD236B        		CALL	DW0_CLR				;
  6C01  7D            		LD	A,L				;
  6C02  327C7D        		LD	(DW0+0),A			;(DW0)<-HL=被乗数
  6C05  7C            		LD	A,H				;
  6C06  327D7D        		LD	(DW0+1),A			;
  6C09  0610          		LD	B,16				;ループ数
  6C0B  CB3A          	.L2:	SRL	D				;乗数DEを右シフトする
  6C0D  CB1B          		RR	E				;CY<-BIT0
  6C0F  3009          		JR	NC,.L1				;CY=1なら被乗数を結果に加算する
  6C11  CD356B        		CALL	DW0_SWAP			;(DW0)=結果, (DW1)=被乗数
  6C14  CD546B        		CALL	DW0_ADD				;(DW0)<-(DW0)+(DW1)
  6C17  CD356B        		CALL	DW0_SWAP			;(DW0)=被乗数, (DW1)=結果
  6C1A  CDC56B        	.L1:	CALL	DW0_X2				;被乗数を左シフトして2倍にする
  6C1D  10EC          		DJNZ	.L2				;
  6C1F  CD356B        		CALL	DW0_SWAP			;(DW0)=結果, (DW1)=被乗数
  6C22  C1            		POP	BC				;
  6C23  C9            		RET					;
                      	
[EOF:DWORD.asm]
                      	INCLUDE	"FP.asm"				;ファイルポインタ
                      	
                      	;-------------------------------------------------
                      	;ファイルポインタFPの構造
                      	;-------------------------------------------------
                      	;MSB                             LSB
                      	;00000000 00000000 00000000 00000000
                      	;                         1 11111111: 0~ 8  9bit オフセット値        0~511
                      	;                   111111          : 9~14  6bit セクタシリアル＃    0~63       FP_SCTR_SN
                      	;-1111111 11111111 1                :15~30 16bit クラスタシリアル＃  0~65535	FP_CLSTR_SN
                      	;
                      	;・オフセット値　　　…バッファ内での相対位置                 0~511
                      	;・セクタシリアル＃　…クラスタを構成するセクタのシリアル＃   0~(BPB+2)-1
                      	;・クラスタシリアル＃…ファイルを構成するクラスタのシリアル＃ 0~65535
                      	;
                      	;　※FPの最大値はファイルサイズ
                      	;-------------------------------------------------
                      	
                      	;=================================================
                      	;[FP]FP関連のワークを初期化する（読み込み＆書き込み）
                      	;IN  HL=ファイルの開始クラスタ＃
                      	;OUT (FP),(FP_CLSTR),(FP_SCTR_SN)
                      	;=================================================
  6C24                	INIT_FP:
  6C24  E5            		PUSH	HL				;
  6C25  22657D        		LD	(FP_CLSTR),HL			;(FP_CLSTR)<-ファイルの開始クラスタ＃
  6C28  21617D        		LD	HL,FP				;(FP)<-00.00.00.00H
  6C2B  CD2A6B        		CALL	DW_CLR				;
  6C2E  AF            		XOR	A				;(FP_SCTR_SN)<-00H
  6C2F  32697D        		LD	(FP_SCTR_SN),A			;
  6C32  210000        		LD	HL,0000H			;(FP_CLSTR_SN)<-0000H
  6C35  22677D        		LD	(FP_CLSTR_SN),HL		;
  6C38  E1            		POP	HL				;
  6C39  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]オフセット値のゼロ判定
                      	;IN  HL=FPのポインタ
                      	;OUT Z=1:FPのオフセット値はゼロ
                      	;=================================================
  6C3A                	IS_FP_OFST_ZERO:
  6C3A  7E            		LD	A,(HL)				;FPの下位９ビットをチェック
  6C3B  B7            		OR	A				;
  6C3C  C0            		RET	NZ				;
  6C3D  23            		INC	HL				;
  6C3E  7E            		LD	A,(HL)				;
  6C3F  CB3F          		SRL	A				;
  6C41  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FP関連ワークからセクタ＃を求める
                      	;IN (FP_CLSTR),(FP_CLSTR_SN),(FP_SCTR_SN)
                      	;OUT (DW0)
                      	;=================================================
  6C42                	FP2SCTR:
  6C42  CD596C        		CALL	GET_FP_CLSTR			;DE<-FPが存在するクラスタ＃
  6C45  EB            		EX	DE,HL				;HL<-FPが存在するクラスタ＃
  6C46  CD3869        		CALL	GET_FIRST_SCTR			;(DW0)<-FPが存在するクラスタの開始セクタ＃
  6C49  21807D        		LD	HL,DW1				;(DW1)<-00000000H
  6C4C  CD2A6B        		CALL	DW_CLR				;
  6C4F  3A697D        		LD	A,(FP_SCTR_SN)			;(DW1)<-セクタシリアル＃
  6C52  32807D        		LD	(DW1),A				;
  6C55  CD546B        		CALL	DW0_ADD				;(DW0)<-開始セクタ＃+セクタシリアル＃=目的のセクタ＃
  6C58  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]ファイルの(FP_CLSTR_SN)番目のクラスタ＃と、そのFATエントリを求める
                      	;IN  (FP_CLSTR)=ファイルの先頭クラスタ＃,(FP_CLSTR_SN)=FPが示すアドレスが、先頭から何番目のクラスタに含まれるか
                      	;OUT DE=クラスタ＃,HL=FATエントリ
                      	;=================================================
  6C59                	GET_FP_CLSTR:
  6C59  ED5B657D      		LD	DE,(FP_CLSTR)			;DE<-ファイルの先頭クラスタ＃。デフォルトの返り値
  6C5D  3A677D        		LD	A,(FP_CLSTR_SN)			;
  6C60  47            		LD	B,A				;
  6C61  04            		INC	B				;！重要！
  6C62  EB            		EX	DE,HL				;HL=ファイルの先頭クラスタ＃
  6C63  C5            	.L1:	PUSH	BC				;最終クラスタサーチ
  6C64  CD9463        		CALL	READ_FAT_DATA			;DE<-クラスタ＃HLのFATエントリ
  6C67  EB            		EX	DE,HL				;HL=FATエントリ,DE=クラスタ＃
  6C68  C1            		POP	BC				;
  6C69  10F8          		DJNZ	.L1				;
  6C6B  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FPが示すセクタをバッファに読み込む（読み込み）
                      	;IN  (FP_CLSTR),(FP_SCTR_SN),IX=バッファ構造体のポインタ
                      	;OUT (DW0),(DW1)
                      	;=================================================
  6C6C                	READ_FP_SCTR:
  6C6C  CD426C        		CALL	FP2SCTR				;FP関連ワークからセクタ＃を求める
  6C6F  CD7064        		CALL	LOAD_BFFR			;セクタ(DW0)をバッファ構造体IXに読み込む IXのセクタ＃も更新される
  6C72  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FPが示すメモリの値を取得しFP++する（読み込み）
                      	;！セクタがバッファに取り込まれていること！
                      	;IN  FP,IX=バッファ構造体のポインタ
                      	;OUT A=(FP)の値,FP
                      	;=================================================
  6C73                	FETCH_1BYTE:
  6C73  D9            		EXX					;
  6C74  CD7D6C        		CALL	FP2BP				;A<-FPが示すメモリの値
  6C77  7E            		LD	A,(HL)				;
  6C78  CD8C6C        		CALL	INC_FP				;FP++
  6C7B  D9            		EXX					;
  6C7C  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FPとバッファ構造体IXから、FPが示すバッファポインタを求める
                      	;IN  FP,IX=バッファ構造体のポインタ
                      	;OUT HL=バッファポインタ
                      	;=================================================
  6C7D                	FP2BP:
  6C7D  2A617D        		LD	HL,(FP)				;HL<-FPの下位２バイト
  6C80  7C            		LD	A,H				;H<-上位７ビットをオフ
  6C81  E601          		AND	00000001B			;
  6C83  67            		LD	H,A				;HL=オフセット値
  6C84  DD5E04        		LD	E,(IX+IDX_BADR)			;HL<-バッファアドレス+オフセット値=バッファポインタ
  6C87  DD5605        		LD	D,(IX+IDX_BADR+1)		;
  6C8A  19            		ADD	HL,DE				;
  6C8B  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]ファイルポインタを１進める（読み込み）
                      	;IN  FP
                      	;OUT FP
                      	;=================================================
  6C8C                	INC_FP:
  6C8C  F5            		PUSH	AF				;！重要 ！
  6C8D  21617D        		LD	HL,FP				;(FP)++
  6C90  CD966B        		CALL	DW_INC				;
  6C93  7E            		LD	A,(HL)				;バッファポインタが 0.00000000B であれば
  6C94  B7            		OR	A				;新たにセクタを読み込む
  6C95  2021          		JR	NZ,.EXIT			;
  6C97  23            		INC	HL				;
  6C98  7E            		LD	A,(HL)				;
  6C99  CB3F          		SRL	A				;
  6C9B  381B          		JR	C,.EXIT				;
  6C9D  F5            		PUSH	AF				;B<-(SCTRS_PER_CLSTR)=(BPB+2)
  6C9E  3A397D        		LD	A,(SCTRS_PER_CLSTR)		;
  6CA1  47            		LD	B,A				;
  6CA2  05            		DEC	B				;=FPからセクタシリアル＃を求めるためのビットマスク
  6CA3  F1            		POP	AF				;
  6CA4  A0            		AND	B				;
  6CA5  32697D        		LD	(FP_SCTR_SN),A			;
  6CA8  200B          		JR	NZ,.L1				;セクタシリアル＃が０なら
  6CAA  CDBA6C        		CALL	NEXT_CLSTR			;次のクラスタ＃をFATから求める
  6CAD  2006          		JR	NZ,.L1				;次のクラスタ＃が0FFFFHの場合は
  6CAF  21FD77        		LD	HL,MSG_SCTR_OVERFLOW		;ファイル上限を超過したことになるのでエラー終了
  6CB2  C30A6A        		JP	ERR				;
                      	
  6CB5  CD6C6C        	.L1:	CALL	READ_FP_SCTR			;FPが示すセクタをバッファに読み込む
  6CB8  F1            	.EXIT:	POP	AF				;
  6CB9  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]クラスタを１すすめる（読み込み）
                      	;IN  (FP_CLSTR),(FP_CLSTR_SN)
                      	;OUT (FP_CLSTR),(FP_CLSTR_SN),Z=1:EOF
                      	;=================================================
  6CBA                	NEXT_CLSTR:
  6CBA  D5            		PUSH	DE				;
  6CBB  E5            		PUSH	HL				;
  6CBC  2A677D        		LD	HL,(FP_CLSTR_SN)		;(FP_CLSTR_SN)++
  6CBF  23            		INC	HL				;
  6CC0  22677D        		LD	(FP_CLSTR_SN),HL		;
  6CC3  2A657D        		LD	HL,(FP_CLSTR)			;現在のクラスタ＃のFATデータを読み取る
  6CC6  CD9463        		CALL	READ_FAT_DATA			;
  6CC9  ED53657D      		LD	(FP_CLSTR),DE			;次のクラスタ＃に更新する
  6CCD  13            		INC	DE				;FATの値がFFFFH（ファイルエンド）ならZ=1になる
  6CCE  7A            		LD	A,D				;！INC命令ではフラグ変化しないので注意！
  6CCF  B3            		OR	E				;
  6CD0  E1            		POP	HL				;
  6CD1  D1            		POP	DE				;
  6CD2  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FPからクラスタシリアル＃、セクタシリアル＃、オフセット値を求める
                      	;IN  FP
                      	;OUT (FP_CLSTR_SN),(FP_SCTR_SN),HL=オフセット値 0000H~01FFH
                      	;=================================================
  6CD3                	PARSE_FP:
  6CD3  21617D        		LD	HL,FP				;HL<-FP
  6CD6  5E            		LD	E,(HL)				;E<-(FP)=オフセット値の下位バイト
  6CD7  23            		INC	HL				;HL=FP+1
  6CD8  7E            		LD	A,(HL)				;A<-(FP+1)
  6CD9  E601          		AND	00000001B			;=オフセット値を求めるためのビットマスク
  6CDB  57            		LD	D,A				;D<-オフセット値の上位バイト
  6CDC  D5            		PUSH	DE				;<-FPの0~8BIT
  6CDD  3A397D        		LD	A,(SCTRS_PER_CLSTR)		;A=0100.0000B=40H
  6CE0  3D            		DEC	A				;A=0011.1111B=3FH
  6CE1  F5            		PUSH	AF				;
  6CE2  56            		LD	D,(HL)				;D=XXXX.XXXoB=(FP+1)
  6CE3  CB3A          		SRL	D				;D=0XXX.XXXXB 右シフトして、オフセット部分の１ビットを落とす
  6CE5  A2            		AND	D				;A=00XX.XXXXB
  6CE6  32697D        		LD	(FP_SCTR_SN),A			;<-FPの9~14BIT
  6CE9  F1            		POP	AF				;A=0011.1111B=3FH
  6CEA  CB27          		SLA	A				;A=0111.1110B=7EH オフセット部分の１ビット分を空ける
  6CEC  3C            		INC	A				;A=0111.1111B=7FH このビットパターンを使って必要なビット数を抽出する
  6CED  5E            		LD	E,(HL)				;E=csss.sssoB=(FP+1) c=cluster,s=SCTR,o=offset bit
  6CEE  23            		INC	HL				;
  6CEF  4E            		LD	C,(HL)				;C=(FP+2)
  6CF0  23            		INC	HL				;
  6CF1  46            		LD	B,(HL)				;B=(FP+3)
  6CF2  CB27          	.L1:	SLA	A				;A=1111.1110B CY=0
  6CF4  3808          		JR	C,.L2				;CY=1なら抜ける
  6CF6  CB13          		RL	E				;B,C,Eをキャリー付き左ローテート
  6CF8  CB11          		RL	C				;
  6CFA  CB10          		RL	B				;
  6CFC  18F4          		JR	.L1				;
                      	
  6CFE  ED43677D      	.L2:	LD	(FP_CLSTR_SN),BC		;<-FPの15~30BIT
  6D02  E1            		POP	HL				;HL=オフセット値
  6D03  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FPが示すファイルバッファのメモリに値をセットしFP++する（書き込み）
                      	;IN  FP,IX=ファイルバッファ構造体のポインタ,A=(FP)に書き込む値
                      	;OUT FP
                      	;=================================================
  6D04                	POST_1BYTE:
  6D04  D9            		EXX					;
  6D05  F5            		PUSH	AF				;
  6D06  CD7D6C        		CALL	FP2BP				;FPとバッファ構造体IXからバッファポインタHLを求める
  6D09  F1            		POP	AF				;
  6D0A  77            		LD	(HL),A				;(バッファポインタ)<-A
  6D0B  3EFF          		LD	A,TRUE				;
  6D0D  320E7D        		LD	(FILE_BFFR_STRCT.FLG),A		;バッファの更新フラグを立てる
  6D10  CD156D        		CALL	INC_FP_W			;FP++
  6D13  D9            		EXX					;
  6D14  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]ファイルポインタを１進める（書き込み）
                      	;IN  FP,IX=ファイルバッファ構造体のポインタ
                      	;OUT FP
                      	;=================================================
  6D15                	INC_FP_W:
  6D15  21617D        		LD	HL,FP				;ファイルポインタを１進める
  6D18  CD966B        		CALL	DW_INC				;
  6D1B  7E            		LD	A,(HL)				;バッファポインタ(FPの下位９ビット)が0.00000000Bになったら、セクタを次に進める
  6D1C  B7            		OR	A				;それ以外は終了へ
  6D1D  2054          		JR	NZ,.EXIT			;
  6D1F  23            		INC	HL				;
  6D20  7E            		LD	A,(HL)				;
  6D21  CB3F          		SRL	A				;
  6D23  384E          		JR	C,.EXIT				;
  6D25  F5            		PUSH	AF				;ここではAの下位６ビットがセクタシリアル＃になっている
  6D26  3A397D        		LD	A,(SCTRS_PER_CLSTR)		;
  6D29  47            		LD	B,A				;B<-(SCTRS_PER_CLSTR)
  6D2A  05            		DEC	B				;=FPからセクタシリアル＃を求めるためのビットマスク
  6D2B  F1            		POP	AF				;
  6D2C  A0            		AND	B				;
  6D2D  32697D        		LD	(FP_SCTR_SN),A			;(FP_SCTR_SN)<-セクタシリアル＃
  6D30  202F          		JR	NZ,.NEW				;セクタシリアル＃が０でなければ
  6D32  2A657D        		LD	HL,(FP_CLSTR)			;HL<-現在のクラスタ＃
  6D35  CD9463        		CALL	READ_FAT_DATA			;DE<-クラスタHLのFATエントリ
  6D38  7A            		LD	A,D				;FATエントリがセットされていれば、それをそのまま使う
  6D39  B3            		OR	E				;
  6D3A  2806          		JR	Z,.NULL				;
  6D3C  ED53657D      		LD	(FP_CLSTR),DE			;現在のクラスタ＃<-クラスタHLのFATエントリ
  6D40  181F          		JR	.NEW				;
                      	
  6D42  CDD163        	.NULL:	CALL	FIND_NULL_CLSTR			;空きクラスタ＃HLをFATから求める OUT HL,CY=1:見つかった
  6D45  380F          		JR	C,.FOUND			;
  6D47  2A657D        		LD	HL,(FP_CLSTR)			;HL<-現在のクラスタ＃
  6D4A  11FFFF        		LD	DE,0FFFFH			;DE<-FATの終了コード
  6D4D  CD5F63        		CALL	WRITE_FAT_DATA			;現在のクラスタ＃のFATエントリに終了コードをセットする
  6D50  213A78        		LD	HL,MSG_MEDIA_FULL		;エラー終了
  6D53  C30A6A        		JP	ERR				;
                      	
  6D56  EB            	.FOUND:	EX	DE,HL				;DE=空きクラスタ＃
  6D57  2A657D        		LD	HL,(FP_CLSTR)			;HL<-現在のクラスタ＃
  6D5A  ED53657D      		LD	(FP_CLSTR),DE			;現在のクラスタ＃<-空きクラスタ＃
  6D5E  CD5F63        		CALL	WRITE_FAT_DATA			;クラスタ＃HLのFATエントリに空きクラスタ＃DEをセットしリンクさせる
  6D61  CD9264        	.NEW:	CALL	SAVE_BFFR			;現在のファイルバッファが更新されていればメディアに書き込む
  6D64  CD5F64        		CALL	CLR_BFFR			;次のセクタ用にファイルバッファをクリアする
  6D67  CD426C        		CALL	FP2SCTR				;(DW0)<-FPのセクタ＃
  6D6A  217C7D        		LD	HL,DW0				;バッファ構造体のセクタ＃<-(DW0)
  6D6D  DDE5          		PUSH	IX				;
  6D6F  D1            		POP	DE				;
  6D70  CDB66A        		CALL	DW_COPY				;
  6D73  C9            	.EXIT:	RET					;
                      	
                      	;=================================================
                      	;[FP]FPをファイル終端にセットし、ファイルバッファに最終セクタを読み込む
                      	;IN  (DIR_ENTRY)
                      	;OUT (FP),(FP_CLSTR),(FP_CLSTR_SN),(FP_SCTR_SN)
                      	;=================================================
  6D74                	SET_FP_END:
  6D74  2A2A7D        		LD	HL,(DIR_ENTRY+IDX_FAT)		;HL<-ファイルのクラスタ＃
  6D77  7C            		LD	A,H				;
  6D78  B5            		OR	L				;
  6D79  CA7C78        		JP	Z,ERR_EMPTY_FILE		;クラスタ＃が0000Hならエラー
  6D7C  22657D        		LD	(FP_CLSTR),HL			;(FP_CLSTR)<-ファイルの開始クラスタ＃
  6D7F  212C7D        		LD	HL,DIR_ENTRY+IDX_SIZE		;HL<-ファイルサイズのポインタ
  6D82  11617D        		LD	DE,FP				;DE<-ファイルポインタ
  6D85  CDB66A        		CALL	DW_COPY				;FP<-(ファイルサイズ)=ファイルの終端位置
  6D88  CDD36C        		CALL	PARSE_FP			;FPから(FP_CLSTR_SN),(FP_SCTR_SN)を求める
  6D8B  CD596C        		CALL	GET_FP_CLSTR			;DE<-FPが存在するクラスタ＃,HL<-そのFATエントリ
  6D8E  23            		INC	HL				;FATの値がFFFFH（ファイル終端）ならZ=1になる！INC命令はフラグ変化しない！
  6D8F  7C            		LD	A,H				;
  6D90  B5            		OR	L				;
  6D91  2806          		JR	Z,.L1				;ファイル終端でなければエラー
  6D93  211478        		LD	HL,MSG_BAD_FORMAT		;選択されたクラスタのFATが0FFFFHでない
  6D96  C30A6A        		JP	ERR				;
                      	
  6D99  CD6C6C        	.L1:	CALL	READ_FP_SCTR			;FPが示すセクタをバッファに読み込む
  6D9C  C9            		RET					;
                      	
[EOF:FP.asm]
                      	INCLUDE	"TP.asm"				;テキストポインタ
                      	
                      	;=================================================
                      	;[TP]カンマで区切られた２つの文字列式のポインタを取得する
                      	;IN  HL=TP
                      	;OUT (ARG0)=１番目の文字列式のポインタ,(ARG1)=２番目の文字列式のポインタ
                      	;=================================================
  6D9D                	GET_2STR_PTR:
  6D9D  CD096E        		CALL	SKIP_SPC			;
  6DA0  22EE7C        		LD	(ARG0),HL			;
  6DA3  0E2C          		LD	C,","				;
  6DA5  CD106E        		CALL	SKIP_CHR			;
  6DA8  1E16          		LD	E,MISSING_OPERAND		;
  6DAA  D2F93B        		JP	NC,ERROR			;
  6DAD  CD096E        		CALL	SKIP_SPC			;
  6DB0  22F07C        		LD	(ARG1),HL			;
  6DB3  0E3A          		LD	C,":"				;
  6DB5  CD106E        		CALL	SKIP_CHR			;
  6DB8  D0            		RET	NC				;
  6DB9  2B            		DEC	HL				;
  6DBA  C9            		RET					;
                      	
                      	;=================================================
                      	;[TP]テキストポインタの式を評価して16ビットレジスタに取得する
                      	;・値=0000~FFFFH
                      	;IN  HL=TP
                      	;OUT HL=TP,DE=式の結果
                      	;=================================================
  6DBB                	EXP2WORD:
  6DBB  D7            		RST	10H				;！重要！
  6DBC  CD8F4A        	.SKIP:	CALL	EVALEXP				;FAC<-式の計算結果
  6DBF  E5            		PUSH	HL				;TP退避
  6DC0  CD2A59        		CALL	FAC2INT				;HL<-INT(FAC)
  6DC3  EB            		EX	DE,HL				;
  6DC4  E1            		POP	HL				;TP復帰
  6DC5  C9            		RET					;
                      	
                      	;=================================================
                      	;[TP]テキストポインタの式を評価して８ビットレジスタに取得する
                      	;・値=00~FFH
                      	;IN  HL=TP
                      	;OUT HL=TP,A=式の結果
                      	;=================================================
                      	IF FALSE
;;                   -	
;;                   -	EXP2BYTE:
;;                   -		RST	10H				;！重要！BASIC解析命令
;;                   -		CALL	BYTE_EVALEXP			;A<-式の計算結果(0~255)
;;                   -		RET
;;                   -	
                      	ENDIF
                      	
                      	;=================================================
                      	;[TP]テキストポインタ以降の文字列とコマンドテーブルを比較して、一致すればジャンプする
                      	;IN  C=ジャンプ用インデックスの初期値,DE=コマンドテーブルポインタ,HL=現在のテキストポインタ
                      	;OUT HL=次のテキストポインタ
                      	;=================================================
  6DC6                	WORD_JUMP:
  6DC6  CD096E        		CALL	SKIP_SPC			;
  6DC9  E5            	.L1:	PUSH	HL				;TPを退避
  6DCA  1A            		LD	A,(DE)				;ここでDEはコマンド文字列の先頭を指している
  6DCB  B7            		OR	A				;その値が00Hならすべて不一致を意味するので
  6DCC  2005          		JR	NZ,.L3				;エラーを出力して終了
  6DCE  1E02          		LD	E,SYNTAX_ERROR			;
  6DD0  C3F93B        		JP	ERROR				;
  6DD3  BE            	.L3:	CP	(HL)				;コマンド文字とTPの内容を比較
  6DD4  280A          		JR	Z,.EQUAL			;等しくなければ次のコマンド文字列へ
  6DD6  13            	.NEXT:	INC	DE				;コマンド文字に00Hが見つかるまでCPを進める
  6DD7  1A            		LD	A,(DE)				;
  6DD8  B7            		OR	A				;
  6DD9  20FB          		JR	NZ,.NEXT			;
  6DDB  13            		INC	DE				;00Hの次の文字にポインタをセットする
  6DDC  0C            		INC	C				;ジャンプ用インデックス値++
  6DDD  E1            		POP	HL				;TPを復帰
  6DDE  18E9          		JR	.L1				;
  6DE0  13            	.EQUAL:	INC	DE				;ここから文字が等しい場合の処理
  6DE1  23            		INC	HL				;TPとCPを１進める
  6DE2  1A            		LD	A,(DE)				;CPが指す内容が文字列終端マーカーならすべて一致したことになるので
  6DE3  B7            		OR	A				;一致処理へ進む
  6DE4  20ED          		JR	NZ,.L3				;
  6DE6  D1            		POP	DE				;ここから一致処理。スタックに退避していたTPを捨てる
  6DE7  E5            		PUSH	HL				;現在のTPを退避
  6DE8  21B878        		LD	HL,JUMP_TABLE			;HL<-JUMP_TABLE+C*2=ジャンプ先
  6DEB  CB21          		SLA	C				;
  6DED  0600          		LD	B,0				;
  6DEF  09            		ADD	HL,BC				;
  6DF0  7E            		LD	A,(HL)				;HL<-(HL)=ジャンプ先
  6DF1  23            		INC	HL				;
  6DF2  66            		LD	H,(HL)				;
  6DF3  6F            		LD	L,A				;
  6DF4  E3            		EX	(SP),HL				;(SP)<-ジャンプ先,HL<-現在のTP
  6DF5  C9            		RET					;ここでスタックからジャンプ先が取り出される
                      	
                      	;=================================================
                      	;[TP]TPを開二重引用符の次に進める。存在しなければエラーにする
                      	;IN  HL=TP
                      	;OUT HL=TP
                      	;=================================================
  6DF6                	OPEN_DQUOTE:
  6DF6  CD096E        		CALL	SKIP_SPC			;
  6DF9  7E            		LD	A,(HL)				;
  6DFA  FE22          		CP	DQUOTE				;
  6DFC  1E16          		LD	E,MISSING_OPERAND		;
  6DFE  C2F93B        		JP	NZ,ERROR			;
  6E01  23            		INC	HL				;
  6E02  C9            		RET					;
                      	
                      	;=================================================
                      	;[TP]TPを閉二重引用符の次に進める
                      	;IN  HL=TP
                      	;OUT HL=TP
                      	;=================================================
  6E03                	CLOSE_DQUOTE:
  6E03  0E22          		LD	C,DQUOTE			;
  6E05  CD106E        		CALL	SKIP_CHR			;
  6E08  C9            		RET					;
                      	
                      	;=================================================
                      	;[TP]空白以外の文字が現れるまでTPを進める
                      	;IN  HL=TP
                      	;OUT HL=TP,Z<-1
                      	;=================================================
  6E09                	SKIP_SPC:
  6E09  7E            	.L1:	LD	A,(HL)				;
  6E0A  FE20          		CP	SPC				;
  6E0C  C0            		RET	NZ				;
  6E0D  23            		INC	HL				;
  6E0E  18F9          		JR	.L1				;
                      	
                      	;=================================================
                      	;[TP]指定された文字の次、または00HまでTPを進める
                      	;IN  HL=TP,C=スキップする文字
                      	;OUT HL=新しいTP,CY=1:目的の文字が見つかった 0:EOLが見つかった
                      	;=================================================
  6E10                	SKIP_CHR:
  6E10  7E            	.L1:	LD	A,(HL)				;EOLならCY<-0で終了
  6E11  B7            		OR	A				;
  6E12  C8            		RET	Z				;
  6E13  23            		INC	HL				;TPを進める
  6E14  B9            		CP	C				;目的の文字ならCY<-1で終了
  6E15  20F9          		JR	NZ,.L1				;
  6E17  37            		SCF					;
  6E18  C9            		RET					;
                      	
[EOF:TP.asm]
                      	INCLUDE	"CMT.asm"				;CMTファイル関連
                      	
                      	;CMTファイルフォーマット
                      	
  003A                	BIN_MARK: 	EQU	03AH	;CMTファイルで使用されるマシン語用マーカー
  00D3                	BAS_MARK: 	EQU	0D3H	;CMTファイルで使用されるBASIC用マーカー
  000A                	BAS_MARK_LEN:	EQU	0AH	;CMTファイルで使用されるBASIC用マーカーの数
                      	
                      	;BAS_ZERO:	EQU	04H	;BASICファイルの終端を判定するための00Hの数
  000A                	BAS_ZERO:	EQU	0AH	;BASICファイルの終端を判定するための00Hの数
                      	
  0040                	CMT_STACK_LVL:	EQU	40H	;OUT OF MEMORY判定用のスタックレベル=だいたいの値
  0006                	BFNAME_SIZE:	EQU	06H	;BASICファイル名の長さ
                      	;CMT_ZERO:	EQU	10H	;CMTファイルの終端を判定するための00Hの数
                      	
                      	;-------------------------------------------------
                      	;BASICプログラムファイル構造
                      	;-------------------------------------------------
                      	;ヘッダー	10 バイト D3 D3 D3 D3 D3 D3 D3 D3 D3 D3 
                      	;ファイル名	 6 バイト XX XX XX XX XX XX 
                      	;プログラム本体	
                      	;エンドマーク	 3 バイト 00 00 00
                      	;フッター	 9 バイト 00 00 00 00 00 00 00 00 00
                      	;-------------------------------------------------
                      	
                      	;-------------------------------------------------
                      	;マシン語プログラムファイル構造
                      	;-------------------------------------------------
                      	;スタートアドレス部	3A hi lo cs
                      	;データ部		3A nn XX ... XX cs
                      	;エンドマーク		3A 00 00
                      	;
                      	;hi & lo:アドレス, nn:サイズ, cs:チェックサム
                      	;-------------------------------------------------
                      	
                      	;=================================================
                      	;[CMT]CMTファイルの読み込み
                      	;IN  (TGT_CLSTR)
                      	;OUT -
                      	;=================================================
  6E19                	READ_CMT:
  6E19  21C0EA        		LD	HL,FKEY_POINTER		;ファンクションキーのポインタを初期化 ！オートスタート対策！
  6E1C  22C0ED        		LD	(ACTIVE_FKEY),HL	;
  6E1F  CD4C70        		CALL	PREP_READ		;
  6E22  CD736C        	.LOOP:	CALL	FETCH_1BYTE		;A<-(FP),FP++
  6E25  FED3          		CP	BAS_MARK		;BASICマーカーか？
  6E27  2004          		JR	NZ,.L1			;
  6E29  CD4E6E        		CALL	READ_CMT_BASIC		;
  6E2C  AF            		XOR	A			;A<-0
  6E2D  FE3A          	.L1:	CP	BIN_MARK		;マシン語マーカーか？
  6E2F  2004          		JR	NZ,.L3			;
  6E31  CDA66E        		CALL	READ_CMT_BINARY		;
  6E34  AF            		XOR	A			;A<-0
  6E35  A7            	.L3:	AND	A			;00Hとマーカー以外の値ならスキップ
  6E36  200A          		JR	NZ,.L4			;
  6E38  2168EA        	.L5:	LD	HL,FKEY_FLAG		;ファンクションキー押下フラグが立てられているか
  6E3B  7E            		LD	A,(HL)			;
  6E3C  B7            		OR	A			;
  6E3D  2803          		JR	Z,.L4			;
  6E3F  CD406F        		CALL	PSEUDO_MON		;キーバッファの文字列を1行だけ疑似モニタ内で処理する。対象は"G"コマンドのみ
  6E42  212C7D        	.L4:	LD	HL,DIR_ENTRY+IDX_SIZE	;=ファイルサイズのポインタ
  6E45  11617D        		LD	DE,FP			;=FP
  6E48  CD956A        		CALL	DW_CP			;FPがファイルサイズを超えるまで繰り返す
  6E4B  30D5          		JR	NC,.LOOP		;
  6E4D  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]BASICファイルの読み込み
                      	;・終了時にFPはBAS_ZERO個目の00Hを指している
                      	;IN  FP=ファイルポインタ
                      	;OUT FP
                      	;=================================================
  6E4E                	READ_CMT_BASIC:
  6E4E  0609          		LD	B,BAS_MARK_LEN-1	;ヘッダーの残り９バイトをチェック
  6E50  CD736C        	.L4:	CALL	FETCH_1BYTE		;A<-(FP),FP++
  6E53  FED3          		CP	BAS_MARK		;
  6E55  C2FA6E        		JP	NZ,READ_ERR		;
  6E58  10F6          		DJNZ	.L4			;
                      	
  6E5A  21C87D        		LD	HL,INFO_BUF		;
  6E5D  E5            		PUSH	HL			;
  6E5E  0606          		LD	B,BFNAME_SIZE		;=CSAVE命令でのファイル名サイズ
  6E60  CD736C        	.L1:	CALL	FETCH_1BYTE		;A<-(FP),FP++
  6E63  77            		LD	(HL),A			;
  6E64  23            		INC	HL			;
  6E65  10F9          		DJNZ	.L1			;
  6E67  AF            		XOR	A			;
  6E68  77            		LD	(HL),A			;=EOL
  6E69  E1            		POP	HL			;
  6E6A  CD7669        		CALL	IS_INFO_ON		;
  6E6D  2816          		JR	Z,.L9			;
                      	
  6E6F  CD506A        		CALL	IPRINT			;
  6E72  5B4241535D0D0A		DB	"[BAS]",CR,LF		;
  6E79  4E414D453A00  		DB	"NAME:",EOL		;
  6E7F  CDED52        		CALL	PRINT			;
  6E82  CDCA5F        		CALL	PUT_CR			;
                      	
  6E85  2A54EB        	.L9:	LD	HL,(BASBEGIN)		;HL<-BASIC先頭アドレス
  6E88  CD346F        		CALL	GET_FIREWALL		;DE<-スタックエリアとフリーエリアの境界値
  6E8B  060A          	.L2:	LD	B,BAS_ZERO		;=ファイル終了と判断する00Hの数(ゼロカウンタ)
  6E8D  C5            	.L3:	PUSH	BC			;
  6E8E  CD736C        		CALL	FETCH_1BYTE		;A<-(FP),FP++
  6E91  77            		LD	(HL),A			;メモリへ転送
  6E92  C1            		POP	BC			;
  6E93  CDD35E        		CALL	CPHLDE			;OUT OF MEMORY チェック
  6E96  3805          		JR	C,.L5			; HL=アドレス
  6E98  1E07          		LD	E,OUT_OF_MEMORY		; DE=境界値
  6E9A  C3F93B        		JP	ERROR			; HL>=DEでエラー
  6E9D  23            	.L5:	INC	HL			;転送先アドレス++
  6E9E  B7            		OR	A			;値が00Hでなければゼロカウンタを初期値に戻す
  6E9F  20EA          		JR	NZ,.L2			;
  6EA1  10EA          		DJNZ	.L3			;値が00HならBのカウントダウンを続ける
                      	
  6EA3  C35E70        		JP	FIN_READ_BASIC		;
                      	
                      	
                      	;=================================================
                      	;[CMT]マシン語ファイルの読み込み
                      	;IN  FP=ファイルポインタ
                      	;OUT FP,Z=1:正常終了
                      	;=================================================
  6EA6                	READ_CMT_BINARY:
  6EA6  CD346F        		CALL	GET_FIREWALL		;スタックエリア侵入防止用の境界値をセットする
                      	;	LD	(FIREWALL),DE		;
                      	
  6EA9  CD736C        		CALL	FETCH_1BYTE		;A<-(FP),FP++
  6EAC  67            		LD	H,A			;HL<-マシン語ファイルの先頭アドレス
  6EAD  CD736C        		CALL	FETCH_1BYTE		;A<-(FP),FP++
  6EB0  6F            		LD	L,A			;
  6EB1  CD736C        		CALL	FETCH_1BYTE		;A<-(FP),FP++ チェックバイト部は捨てる
                      	
  6EB4  CD7669        		CALL	IS_INFO_ON		;
  6EB7  280E          		JR	Z,.L1			;
  6EB9  CD506A        		CALL	IPRINT			;
  6EBC  5B42494E5D0D0A		DB	"[BIN]",CR,LF,EOL	;
        00            	
  6EC4  CDC05E        		CALL	PRTHLHEX		;先頭アドレスを表示
                      	
  6EC7  CD736C        	.L1:	CALL	FETCH_1BYTE		;A<-(FP),FP++
  6ECA  FE3A          		CP	BIN_MARK		;マーカーでなければエラー処理へ
  6ECC  C2FA6E        		JP	NZ,READ_ERR		;
                      	
  6ECF  CD736C        		CALL	FETCH_1BYTE		;A<-(FP),FP++
  6ED2  A7            		AND	A			;データ長が0なら終了へ
  6ED3  2812          		JR	Z,.L3			;
                      	
  6ED5  47            		LD	B,A			;B=データ長
  6ED6  C5            	.L2:	PUSH	BC			;
  6ED7  CD736C        		CALL	FETCH_1BYTE		;データ転送処理
  6EDA  77            		LD	(HL),A			;
  6EDB  23            		INC	HL			;
  6EDC  CD146F        		CALL	CHECK_STACK_AREA	;スタックエリアに侵入しているかチェックする
  6EDF  C1            		POP	BC			;
  6EE0  10F4          		DJNZ	.L2			;データ長だけ繰り返す
  6EE2  CD736C        		CALL	FETCH_1BYTE		;A<-(FP),FP++ チェックバイト部は捨てる
  6EE5  18E0          		JR	.L1			;
                      	
  6EE7  2B            	.L3:	DEC	HL			;
                      	
  6EE8  CD7669        		CALL	IS_INFO_ON		;
  6EEB  2809          		JR	Z,.L5			;
  6EED  3E2D          		LD	A,"-"			;終了アドレスを表示
  6EEF  DF            		RST	18H			;
  6EF0  CDC05E        		CALL	PRTHLHEX		;
  6EF3  CDCA5F        		CALL	PUT_CR			;
                      	
  6EF6  CD736C        	.L5:	CALL	FETCH_1BYTE		;FP++
  6EF9  C9            		RET				;
                      	
                      	;=================================================
                      	;[CMT]リードエラー
                      	;IN  HL=アドレス
                      	;=================================================
  6EFA                	READ_ERR:
  6EFA  CD506A        		CALL	IPRINT			;
  6EFD  0D0A4552524F52		DB	CR,LF,"ERROR IN ",EOL	;
        20494E2000    	
  6F09  CDC05E        		CALL	PRTHLHEX		;
  6F0C  CDCA5F        		CALL	PUT_CR			;
  6F0F  1E19          		LD	E,BAD_FILE_DATA		;
  6F11  C3F93B        		JP	ERROR			;
                      	
                      	;=================================================
                      	;[CMT]スタックエリア侵入チェック
                      	;IN  HL=対象のアドレス
                      	;OUT 
                      	;=================================================
  6F14                	CHECK_STACK_AREA:
  6F14  D5            		PUSH	DE
  6F15  E5            		PUSH	HL
                      	
  6F16  EB            		EX	DE,HL			;DE=アドレス
  6F17  2A54EF        		LD	HL,(FREE_END)		;HL<-フリーエリアの底
  6F1A  CDD35E        		CALL	CPHLDE			;
  6F1D  3812          		JR	C,.EXIT			;スタックエリアの底 < アドレス
                      	
  6F1F  2A717D        		LD	HL,(FIREWALL)		;HL<-スタックエリアとフリーエリアの境界値
  6F22  CDD35E        		CALL	CPHLDE			;
  6F25  300A          		JR	NC,.EXIT		;スタックエリアとフリーエリアの境界値 >= アドレス
                      	
  6F27  AF            	.ERR:	XOR	A			;
  6F28  3268EA        		LD	(FKEY_FLAG),A		;！重要！ファンクションキー押下フラグを降ろす
  6F2B  210678        		LD	HL,MSG_MEMORY_CONFLICT	;スタックエリア侵入エラー
  6F2E  C30A6A        		JP	ERR			;
                      	
  6F31  E1            	.EXIT:	POP	HL
  6F32  D1            		POP	DE
  6F33  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]スタックエリアとフリーエリアの境界値を求める
                      	;OUT DE=境界値
                      	;=================================================
  6F34                	GET_FIREWALL:
  6F34  E5            		PUSH	HL
  6F35  21E0FF        		LD	HL,-32
  6F38  39            		ADD	HL,SP
  6F39  EB            		EX	DE,HL
  6F3A  E1            		POP	HL
  6F3B  ED53717D      		LD	(FIREWALL),DE
  6F3F  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]疑似モニタ
                      	;・"G"コマンドのみ処理し、それ以外のコマンドは無視される
                      	;・プログラム中からコールされた場合は処理を行わない！F5キーで実行した場合、必ずFキー押下フラグが立ってしまうため！
                      	;=================================================
  6F40                	PSEUDO_MON:
  6F40  2A52EB        		LD	HL,(EXECLINENUM)	;=現在実行中の行番号
  6F43  23            		INC	HL			;停止中は0FFFFHなので、１加えてZフラグが立つかで判別している
  6F44  7C            		LD	A,H			;
  6F45  B5            		OR	L			;
  6F46  C0            		RET	NZ			;プログラムから呼ばれた場合は処理しないで戻る
                      	
  6F47  CD750F        	.L1:	CALL	KEYWAIT			;A<-キー入力された文字
  6F4A  CDC15F        		CALL	CAPITAL			;大文字化
  6F4D  FE0D          		CP	CR			;
  6F4F  2813          		JR	Z,.EXIT			;
  6F51  FE47          		CP	"G"			;
  6F53  20F2          		JR	NZ,.L1			;
  6F55  CD656F        		CALL	.SUB			;16進コード DE→16進 A
  6F58  67            		LD	H,A
  6F59  CD656F        		CALL	.SUB
  6F5C  6F            		LD	L,A			;HL<-ジャンプアドレス
  6F5D  CD750F        		CALL	KEYWAIT			;改行を読み捨てる
                      	
  6F60  C1            		POP	BC			;->READ_CMT	戻りアドレスを捨てる
  6F61  C1            		POP	BC			;->PUSH BC	スタックを捨てる
  6F62  C1            		POP	BC			;->LOAD		戻りアドレスを捨てる
  6F63  E9            		JP	(HL)			;Gコマンド実行
                      	
  6F64  C9            	.EXIT:	RET
                      	
  6F65  CD750F        	.SUB:	CALL	KEYWAIT			;
  6F68  57            		LD	D,A			;
  6F69  CD750F        		CALL	KEYWAIT			;
  6F6C  5F            		LD	E,A			;
  6F6D  CDA05E        		CALL	CNVHEXBYTE		;16進コード DE→16進 A
  6F70  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]CMTファイルの書き込み
                      	;IN  (TGT_CLSTR),(ARG0),(ARG1),(ARG2)
                      	;OUT 
                      	;=================================================
  6F71                	WRITE_CMT:
  6F71  CD6B70        		CALL	PREP_WRITE
                      	
  6F74                	.MERGE:					;MERGEのエントリポイント
  6F74  21926F        		LD	HL,.RET			;！重要！戻りアドレスをスタックにセットする
  6F77  E5            		PUSH	HL			;
                      	
  6F78  3AF67C        		LD	A,(ARGNUM)		;A<-入力パラメータ数
  6F7B  A7            		AND	A			;入力パラメータ数が0ならBASICセーブへ
  6F7C  2820          		JR	Z,WRITE_CMT_BASIC	;
                      	
  6F7E  3D            		DEC	A			;入力パラメータ数が1ならエラーへ
  6F7F  280C          		JR	Z,.ERR			;
                      	
                      	;	LD	DE,(ARG1)		;=開始アドレス
                      	;	LD	HL,(ARG2)		;=終了アドレス
                      	;	CALL	CPHLDE			;終了アドレス-開始アドレス
                      	;	JR	Z,.ERR			;終了アドレス=開始アドレス？
                      	;	JR	NC,WRITE_CMT_BINARY	;終了アドレス>開始アドレス？
                      	
  6F81  ED5BF07C      		LD	DE,(ARG1)		;=開始アドレス
  6F85  2AF27C        		LD	HL,(ARG2)		;=終了アドレス
  6F88  CDD35E        		CALL	CPHLDE			;終了アドレス-開始アドレス
  6F8B  306E          		JR	NC,WRITE_CMT_BINARY	;終了アドレスが、開始アドレスより小さければエラー
                      	
  6F8D  1E05          	.ERR:	LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  6F8F  C3F93B        		JP	ERROR
                      	
  6F92  C38870        	.RET:	JP	FIN_WRITE
                      	
                      	;=================================================
                      	;[CMT]メモリにBASICプログラムが存在するか
                      	;IN  -
                      	;OUT Z=1:プログラムなし
                      	;=================================================
  6F95                	IS_BASIC:
  6F95  E5            		PUSH	HL			;
  6F96  2A54EB        		LD	HL,(BASBEGIN)		;開始２バイトが00Hなら空とみなす
  6F99  7E            		LD	A,(HL)			;
  6F9A  23            		INC	HL			;
  6F9B  B6            		OR	(HL)			;
  6F9C  E1            		POP	HL			;
  6F9D  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]BASICファイルの書き込み
                      	;=================================================
  6F9E                	WRITE_CMT_BASIC:
  6F9E  CD956F        		CALL	IS_BASIC		;
  6FA1  CA7C78        		JP	Z,ERR_EMPTY_FILE	;
                      	
  6FA4  CD865B        		CALL	RAD2RNUM		;BASICの行アドレスを行番号に変換する！重要！
  6FA7  CD506A        		CALL	IPRINT			;
  6FAA  5B4241535D0D0A		DB	"[BAS]",CR,LF,EOL	;
        00            	
                      	
  6FB2  060A          		LD	B,BAS_MARK_LEN		;ヘッダ
  6FB4  3ED3          	.HEADR:	LD	A,BAS_MARK		;
  6FB6  CD046D        		CALL	POST_1BYTE		;
  6FB9  10F9          		DJNZ	.HEADR			;
                      	
  6FBB  CD506A        		CALL	IPRINT			;ファイル名
  6FBE  4E414D453A00  		DB	"NAME:",EOL		;
                      	
  6FC4  21107D        		LD	HL,DIR_ENTRY		;
  6FC7  0606          		LD	B,BFNAME_SIZE		;
  6FC9  7E            	.FNAME:	LD	A,(HL)			;
  6FCA  DF            		RST	18H			;
  6FCB  FE20          		CP	SPC			;ファイル名の20Hを00Hに変換する
  6FCD  2001          		JR	NZ,.L1			;
  6FCF  AF            		XOR	A			;
  6FD0  CD046D        	.L1:	CALL	POST_1BYTE		;
  6FD3  23            		INC	HL			;
  6FD4  10F3          		DJNZ	.FNAME			;
  6FD6  CDCA5F        		CALL	PUT_CR			;
                      	
  6FD9  ED5B54EB      		LD	DE,(BASBEGIN)		;=先頭アドレス
  6FDD  2AA0EF        		LD	HL,(VARBEGIN)		;=終了アドレス
  6FE0  E5            		PUSH	HL			;
  6FE1  B7            		OR	A			;CY<-0
  6FE2  ED52          		SBC	HL,DE			;HL<-終了アドレス-先頭アドレス
  6FE4  44            		LD	B,H			;
  6FE5  4D            		LD	C,L			;BC<-プログラムのサイズ
  6FE6  E1            		POP	HL			;
  6FE7  EB            		EX	DE,HL			;HL=先頭アドレス,DE=終了アドレス
                      	
  6FE8  7E            	.DATA:	LD	A,(HL)			;プログラムデータ部
  6FE9  CD046D        		CALL	POST_1BYTE		;
  6FEC  23            		INC	HL			;
  6FED  0B            		DEC	BC			;
  6FEE  78            		LD	A,B			;
  6FEF  B1            		OR	C			;
  6FF0  20F6          		JR	NZ,.DATA		;
                      	
  6FF2  0609          		LD	B,9			;フッタ部
  6FF4  AF            	.FOOTR:	XOR	A			;
  6FF5  CD046D        		CALL	POST_1BYTE		;
  6FF8  10FA          		DJNZ	.FOOTR			;
                      	
  6FFA  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]マシン語ファイルの書き込み
                      	;IN  DE=先頭アドレス,HL=終了アドレス
                      	;OUT 
                      	;=================================================
  6FFB                	WRITE_CMT_BINARY:
  6FFB  CD9E70        		CALL	PRT_WRITE_BIN_INFO	;
                      	
  6FFE  23            		INC	HL			;！重要！データ長計算の便宜上、終了アドレスに１加えておく
  6FFF  3E3A          		LD	A,BIN_MARK		;先頭マーカー部
  7001  CD046D        		CALL	POST_1BYTE		;
                      	
  7004  7A            		LD	A,D			;先頭アドレス部
  7005  CD046D        		CALL	POST_1BYTE		;
  7008  7B            		LD	A,E			;
  7009  CD046D        		CALL	POST_1BYTE		;
                      	
  700C  7A            		LD	A,D			;チェックサム計算
  700D  83            		ADD	A,E			;
  700E  2F            		CPL				;
  700F  3C            		INC	A			;
  7010  CD046D        		CALL	POST_1BYTE		;チェックサム部
                      	
  7013  3E3A          	.L2:	LD	A,BIN_MARK		;マーカー部
  7015  CD046D        		CALL	POST_1BYTE		;
                      	
  7018  CDD35E        		CALL	CPHLDE			;
  701B  2826          		JR	Z,.EXIT			;先頭アドレス=(終了アドレス+1)なら終了
                      	
  701D  E5            		PUSH	HL			;終了アドレス退避
  701E  06FF          		LD	B,0FFH			;ブロック内データの最大値 255
  7020  B7            		OR	A			;CY<-0
  7021  ED52          		SBC	HL,DE			;HL<-終了アドレス-先頭アドレス
  7023  7C            		LD	A,H			;H>0ならB<-0FFH
  7024  B7            		OR	A			;H=0ならB<-L
  7025  2001          		JR	NZ,.L3			;
  7027  45            		LD	B,L			;
  7028  78            	.L3:	LD	A,B			;
  7029  CD046D        		CALL	POST_1BYTE		;ブロックサイズ部
  702C  E1            		POP	HL			;終了アドレス復帰
                      	
  702D  EB            		EX	DE,HL			;HL=先頭アドレス,DE=終了アドレス
  702E  48            		LD	C,B			;C<-サイズ チェックサム用
                      	
  702F  7E            	.L1:	LD	A,(HL)			;A<-(先頭アドレス)
  7030  F5            		PUSH	AF			;
  7031  CD046D        		CALL	POST_1BYTE		;データ部
  7034  F1            		POP	AF			;
                      	
  7035  81            		ADD	A,C			;データブロックのチェックサムを計算
  7036  4F            		LD	C,A			;C<-C+A
                      	
  7037  23            		INC	HL			;先頭アドレス++
  7038  10F5          		DJNZ	.L1			;
                      	
  703A  EB            		EX	DE,HL			;DE=先頭アドレス,HL=終了アドレス
  703B  79            		LD	A,C			;A<-チェックサム
  703C  ED44          		NEG				;符号を反転
  703E  CD046D        		CALL	POST_1BYTE		;チェックサム部
  7041  18D0          		JR	.L2			;
                      	
  7043  AF            	.EXIT:	XOR	A			;
  7044  CD046D        		CALL	POST_1BYTE		;終了マーカ 00H,00H
  7047  AF            		XOR	A			;
  7048  CD046D        		CALL	POST_1BYTE		;
                      	
  704B  C9            		RET
                      	
                      	;=================================================
                      	;読み込みの前処理
                      	;=================================================
  704C                	PREP_READ:
  704C  AF            		XOR	A			;コールバックフラグを降ろす
  704D  32C57D        		LD	(IS_CALLBACK),A		;
  7050  2A5F7D        		LD	HL,(TGT_CLSTR)		;HL<-ファイルの開始クラスタ＃
  7053  CD246C        		CALL	INIT_FP			;ファイルポインタ初期化
  7056  DD21087D      		LD	IX,FILE_BFFR_STRCT	;IX<-ファイルバッファ構造体のポインタ
  705A  CD6C6C        		CALL	READ_FP_SCTR		;FPが示すセクタをIXバッファ構造体に読み込む
  705D  C9            		RET
                      	
                      	;=================================================
                      	;BASIC読み込みの後処理
                      	;=================================================
  705E                	FIN_READ_BASIC:
  705E  22A0EF        		LD	(VARBEGIN),HL		;BASIC終了アドレスをセット
  7061  22A2EF        		LD	(ARRBEGIN),HL		;
  7064  22A4EF        		LD	(FREBEGIN),HL		;
  7067  CD763D        		CALL	PRGFIT			;
  706A  C9            		RET
                      	
                      	;=================================================
                      	;書き込みの前処理
                      	;=================================================
  706B                	PREP_WRITE:
  706B  2A5F7D        		LD	HL,(TGT_CLSTR)		;
  706E  CD246C        		CALL	INIT_FP			;
  7071  CD3B63        		CALL	ERASE_FAT_LINK		;
  7074  DD21087D      		LD	IX,FILE_BFFR_STRCT	;
  7078  CD5F64        		CALL	CLR_BFFR		;
                      	
  707B  CD426C        		CALL	FP2SCTR			;(DW0)<-FPのセクタ＃
  707E  217C7D        		LD	HL,DW0			;バッファのセクタ情報<-(DW0)
  7081  DDE5          		PUSH	IX			;
  7083  D1            		POP	DE			;
  7084  CDB66A        		CALL	DW_COPY			;
                      	
  7087  C9            		RET
                      	
                      	;=================================================
                      	;書き込みの後処理
                      	;=================================================
  7088                	FIN_WRITE:
  7088  21617D        		LD	HL,FP			;ファイルサイズをディレクトリエントリにセットする
  708B  112C7D        		LD	DE,DIR_ENTRY+IDX_SIZE	;
  708E  CDB66A        		CALL	DW_COPY			;
  7091  2A657D        		LD	HL,(FP_CLSTR)		;HL<-最終クラスタ＃
  7094  11FFFF        		LD	DE,0FFFFH		;最終クラスタのFATエントリにFFFFHを書き込む
  7097  CD5F63        		CALL	WRITE_FAT_DATA		;
  709A  CD4564        		CALL	FLUSH_BFFR		;ファイルバッファとFAT1,2バッファをメディアに書き込む
  709D  C9            		RET
                      	
                      	;=================================================
                      	;機械語書き込み情報表示
                      	;IN  DE=開始アドレス,HL=終了アドレス
                      	;=================================================
  709E                	PRT_WRITE_BIN_INFO:
  709E  CD506A        		CALL	IPRINT			;
  70A1  5B42494E5D0D0A		DB	"[BIN]",CR,LF,EOL	;
        00            	
  70A9  D5            		PUSH	DE			;
  70AA  E5            		PUSH	HL			;
  70AB  EB            		EX	DE,HL			;
  70AC  CDC05E        		CALL	PRTHLHEX		;
  70AF  3E2D          		LD	A,"-"			;
  70B1  DF            		RST	18H			;
                      	
  70B2  EB            		EX	DE,HL			;
  70B3  CDC05E        		CALL	PRTHLHEX		;
  70B6  CDCA5F        		CALL	PUT_CR			;
  70B9  E1            		POP	HL			;
  70BA  D1            		POP	DE			;
  70BB  C9            		RET
                      	
                      	
                      	
                      	
                      	
[EOF:CMT.asm]
                      	INCLUDE	"BIN.asm"				;BINファイル関連
                      	
                      	;=================================================
                      	;[BIN]セーフゾーンチェック
                      	;DE~HLのアドレス領域がスタック領域を犯していないかチェックする
                      	;フリーエリアの底＜開始アドレス または 終了アドレス＜境界値 であればセーフ
                      	;IN  DE=開始アドレス,HL=終了アドレス
                      	;OUT -
                      	;=================================================
  70BC                	IS_SAFE_ZONE:
  70BC  E5            		PUSH	HL
  70BD  2A54EF        		LD	HL,(FREE_END)		;HL<-フリーエリアの底
  70C0  CDD35E        		CALL	CPHLDE			;フリーエリアの底-開始アドレス
  70C3  E1            		POP	HL			;HL=終了アドレス
  70C4  D8            		RET	C			;フリーエリアの底<開始アドレス
                      	
  70C5  D5            		PUSH	DE			;
  70C6  ED5B717D      		LD	DE,(FIREWALL)		;DE<-スタックエリアとフリーエリアの境界値
  70CA  CDD35E        		CALL	CPHLDE			;終了アドレス-境界値
  70CD  D1            		POP	DE			;DE=開始アドレス
  70CE  D8            		RET	C			;境界値>終了アドレス
                      	
  70CF  C3276F        		JP	CHECK_STACK_AREA.ERR	;エラー
                      	
                      	;=================================================
                      	;[BIN]バイナリファイルの読み込み
                      	;IN  (TGT_CLSTR),(ARG0),(ARG1)=新しい開始アドレス<省略可>
                      	;OUT -
                      	;=================================================
  70D2                	READ_BIN:
  70D2  CD4C70        		CALL	PREP_READ		;
  70D5  CD346F        		CALL	GET_FIREWALL		;
                      	;	LD	(FIREWALL),DE		;
                      	
  70D8  CD736C        		CALL	FETCH_1BYTE		;
  70DB  6F            		LD	L,A			;HL<-マシン語ファイルの開始アドレス
  70DC  CD736C        		CALL	FETCH_1BYTE		;
  70DF  67            		LD	H,A			;
  70E0  CD736C        		CALL	FETCH_1BYTE		;
  70E3  5F            		LD	E,A			;DE<-マシン語ファイルの終了アドレス
  70E4  CD736C        		CALL	FETCH_1BYTE		;
  70E7  57            		LD	D,A			;
  70E8  CD736C        		CALL	FETCH_1BYTE		;
  70EB  4F            		LD	C,A			;BC<-マシン語ファイルの実行アドレス
  70EC  CD736C        		CALL	FETCH_1BYTE		;
  70EF  47            		LD	B,A			;
  70F0  ED43F87C      		LD	(EXECADR),BC		;実行アドレスをセット
                      	
  70F4  CD7669        		CALL	IS_INFO_ON		;ファイル情報を出力
  70F7  2828          		JR	Z,.L6			;
  70F9  D5            		PUSH	DE			;=終了アドレス
  70FA  E5            		PUSH	HL			;=開始アドレス
  70FB  CD506A        		CALL	IPRINT			;
  70FE  5B42494E5D0D0A		DB	"[BIN]",CR,LF,EOL	;
        00            	
  7106  CDC05E        		CALL	PRTHLHEX		;開始アドレスを表示
  7109  3E2D          		LD	A,"-"			;
  710B  DF            		RST	18H			;
  710C  EB            		EX	DE,HL			;
  710D  CDC05E        		CALL	PRTHLHEX		;終了アドレスを表示
  7110  60            		LD	H,B			;
  7111  69            		LD	L,C			;
  7112  7C            		LD	A,H			;
  7113  B5            		OR	L			;
  7114  2809          		JR	Z,.L10			;
  7116  3E3A          		LD	A,":"			;実行アドレスを出力
  7118  DF            		RST	18H			;
  7119  CDC05E        		CALL	PRTHLHEX		;
  711C  CDCA5F        		CALL	PUT_CR			;
  711F  E1            	.L10:	POP	HL			;HL<-開始アドレス
  7120  D1            		POP	DE			;DE<-終了アドレス
                      	
  7121  EB            	.L6:	EX	DE,HL			;DE=開始アドレス,HL=終了アドレス
  7122  CDD35E        		CALL	CPHLDE			;終了アドレスが、開始アドレスより小さければエラー
  7125  3005          		JR	NC,.L5			;
  7127  1E19          		LD	E,BAD_FILE_DATA		;
  7129  C3F93B        		JP	ERROR			;
                      	
  712C  CDBC70        	.L5:	CALL	IS_SAFE_ZONE		;セーフゾーンチェック
  712F  B7            		OR	A			;CY<-0
  7130  ED52          		SBC	HL,DE			;HL<-終了アドレス-開始アドレス
  7132  44            		LD	B,H			;
  7133  4D            		LD	C,L			;
  7134  03            		INC	BC			;BC<-ファイルサイズ
  7135  62            		LD	H,D			;HL<-DE=開始アドレス
  7136  6B            		LD	L,E			;
                      	
  7137  3AF67C        		LD	A,(ARGNUM)		;A<-入力パラメータ数
  713A  A7            		AND	A			;入力パラメータ数が0なら.L2へ
  713B  2820          		JR	Z,.L2
                      	
  713D  2AF07C        		LD	HL,(ARG1)		;HL<-新しい開始アドレス
  7140  FE01          		CP	1			;入力パラメータ数が1なら.L2へ
  7142  2819          		JR	Z,.L2
                      	
  7144  23            		INC	HL			;(ARG1)は0FFFFHか？
  7145  7C            		LD	A,H			;
  7146  B5            		OR	L			;
  7147  2805          		JR	Z,.L9			;
  7149  1E05          		LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  714B  C3F93B        		JP	ERROR			;
                      	
  714E  62            	.L9:	LD	H,D			;HL<-開始アドレス
  714F  6B            		LD	L,E			;
  7150  3EFF          		LD	A,TRUE			;コールバックフラグを立てる
  7152  32C57D        		LD	(IS_CALLBACK),A		;
  7155  ED5BF27C      		LD	DE,(ARG2)		;コールバックアドレスをセット
  7159  ED53C67D      		LD	(CALLBACK),DE		;
                      	
  715D  110002        	.L2:	LD	DE,CB_BYTES		;=コールバックタイミングカウンタ
                      	
  7160  CD736C        	.LOOP:	CALL	FETCH_1BYTE		;メモリに書き込み
  7163  77            		LD	(HL),A			;
  7164  23            		INC	HL			;
                      	
  7165  3AC57D        	.L1:	LD	A,(IS_CALLBACK)		;
  7168  A7            		AND	A			;
  7169  2812          		JR	Z,.L8			;
                      	
  716B  1B            		DEC	DE			;コールバックタイミングカウンタを減らす
  716C  7A            		LD	A,D			;
  716D  B3            		OR	E			;
  716E  200D          		JR	NZ,.L8			;
  7170  E5            		PUSH	HL			;
  7171  217971        		LD	HL,.RET			;戻り先アドレスをスタックに積む
  7174  E5            		PUSH	HL			;
  7175  2AC67D        		LD	HL,(CALLBACK)		;
  7178  E9            		JP	(HL)			;
  7179  110002        	.RET:	LD	DE,CB_BYTES		;コールバックタイミングカウンタをリセットする
  717C  E1            		POP	HL			;
                      	
  717D  0B            	.L8:	DEC	BC			;残りサイズ--
  717E  78            		LD	A,B			;
  717F  B1            		OR	C			;
  7180  20DE          		JR	NZ,.LOOP		;
                      	
  7182  2AF87C        	.L7:	LD	HL,(EXECADR)		;HL<-実行アドレス
  7185  7D            		LD	A,L			;実行アドレスが0000Hなら終了へ
  7186  B4            		OR	H			;
  7187  280C          		JR	Z,.L3			;
                      	
  7189  3AF77C        		LD	A,(EXECFLG)		;フラグが立っていたら機械語プログラムを実行する
  718C  A7            		AND	A			;
  718D  2806          		JR	Z,.L3			;
  718F  AF            		XOR	A			;フラグを降ろす
  7190  32F77C        		LD	(EXECFLG),A		;
  7193  1801          		JR	EXECUTE			;実行
                      	
  7195  C9            	.L3:	RET				;
                      	
                      	;=================================================
                      	;機械語プログラムを実行する
                      	; IN	(EXECADR)
                      	;=================================================
  7196                	EXECUTE:
  7196  CD5A04        		CALL	CLS
  7199  1140FE        		LD	DE,0FE40H	;VRAM
  719C  21CD71        		LD	HL,.L1
  719F  010500        		LD	BC,5
  71A2  EDB0          		LDIR			; VRAM <- FUNCTION KEY DATA
  71A4  D5            		PUSH	DE
  71A5  3AF97C        		LD	A,(EXECADR+1)
  71A8  CD835E        		CALL	CNVBYTEHEX
  71AB  E1            		POP	HL
  71AC  72            		LD	(HL),D
  71AD  23            		INC	HL
  71AE  73            		LD	(HL),E
  71AF  23            		INC	HL
  71B0  3AF87C        		LD	A,(EXECADR)
  71B3  CD835E        		CALL	CNVBYTEHEX
  71B6  72            		LD	(HL),D
  71B7  23            		INC	HL
  71B8  73            		LD	(HL),E
  71B9  23            		INC	HL
  71BA  360D          		LD	(HL),0DH
  71BC  23            		INC	HL
  71BD  3600          		LD	(HL),0
                      	
  71BF  3E01          		LD	A,1
  71C1  3268EA        		LD	(FKEY_FLAG),A
  71C4  2140FE        		LD	HL,0FE40H
  71C7  22C0ED        		LD	(ACTIVE_FKEY),HL
  71CA  C38100        		JP	BASIC
                      	
  71CD  4D4F4E0D47    	.L1:	DB	"MON",CR,"G"
                      	
                      	
                      	;=================================================
                      	;[BIN]バイナリファイルの書き込み
                      	;IN  (TGT_CLSTR),(ARG0),(ARG1)=開始アドレス,(ARG2)=終了アドレス,(ARG3)=実行アドレス<省略可>
                      	;OUT -
                      	;=================================================
  71D2                	WRITE_BIN:
  71D2  CD6B70        		CALL	PREP_WRITE		;
                      	
  71D5  3AF67C        		LD	A,(ARGNUM)		;入力パラメータ数が2未満ならエラーへ
  71D8  FE02          		CP	2			;
  71DA  3813          		JR	C,.ERR			;
                      	
  71DC  ED5BF07C      		LD	DE,(ARG1)		;DE<-開始アドレス
  71E0  2AF27C        		LD	HL,(ARG2)		;HL<-終了アドレス
  71E3  E5            		PUSH	HL			;
  71E4  23            		INC	HL			;サイズ算出用に１を加算
  71E5  B7            		OR	A			;
  71E6  ED52          		SBC	HL,DE			;
  71E8  44            		LD	B,H			;BC<-サイズ
  71E9  4D            		LD	C,L			;
  71EA  E1            		POP	HL			;
  71EB  2802          		JR	Z,.ERR			;サイズが０ならエラー
  71ED  3005          		JR	NC,.L1			;サイズが正の数なら.L1へ
                      	
  71EF  1E05          	.ERR:	LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  71F1  C3F93B        		JP	ERROR			;
                      	
  71F4  C5            	.L1:	PUSH	BC			;サイズを退避
                      	
  71F5  CD9E70        		CALL	PRT_WRITE_BIN_INFO	;
  71F8  EB            		EX	DE,HL			;HL=開始アドレス,DE=終了アドレス
  71F9  7D            		LD	A,L			;開始アドレス部
  71FA  CD046D        		CALL	POST_1BYTE		;
  71FD  7C            		LD	A,H			;
  71FE  CD046D        		CALL	POST_1BYTE		;
                      	
  7201  7B            		LD	A,E			;終了アドレス部
  7202  CD046D        		CALL	POST_1BYTE		;
  7205  7A            		LD	A,D			;
  7206  CD046D        		CALL	POST_1BYTE		;
                      	
  7209  E5            		PUSH	HL			;
  720A  2AF47C        		LD	HL,(ARG3)		;
  720D  7D            		LD	A,L			;実行アドレス部
  720E  CD046D        		CALL	POST_1BYTE		;
  7211  7C            		LD	A,H			;
  7212  CD046D        		CALL	POST_1BYTE		;
  7215  E1            		POP	HL			;
                      	
  7216  C1            		POP	BC			;サイズを復帰
  7217  7E            	.L2:	LD	A,(HL)			;
  7218  CD046D        		CALL	POST_1BYTE		;
  721B  23            		INC	HL			;
  721C  0B            		DEC	BC			;
  721D  78            		LD	A,B			;
  721E  B1            		OR	C			;
  721F  20F6          		JR	NZ,.L2			;
                      	
  7221  C38870        		JP	FIN_WRITE		;
                      	
                      	
[EOF:BIN.asm]
                      	INCLUDE	"BAS.asm"				;BASファイル関連
                      	
                      	;=================================================
                      	;[BAS]BASファイルの読み込み
                      	;IN  (TGT_CLSTR)
                      	;OUT -
                      	;=================================================
  7224                	READ_BAS:
  7224  CD4C70        		CALL	PREP_READ		;
                      	
  7227  3AF67C        		LD	A,(ARGNUM)		;入力パラメータ数が0でなければエラーへ
  722A  A7            		AND	A			;
  722B  2805          		JR	Z,.L1			;
                      	
  722D  1E05          		LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  722F  C3F93B        		JP	ERROR
                      	
  7232  CD7669        	.L1:	CALL	IS_INFO_ON		;
  7235  280B          		JR	Z,.L4			;
  7237  CD506A        		CALL	IPRINT			;
  723A  5B4241535D0D0A		DB	"[BAS]",CR,LF,EOL	;
        00            	
                      	
  7242  2A54EB        	.L4:	LD	HL,(BASBEGIN)		;
  7245  CD346F        		CALL	GET_FIREWALL		;
  7248  060A          	.L2:	LD	B,BAS_ZERO		;
  724A  C5            	.L3:	PUSH	BC			;
  724B  CD736C        		CALL	FETCH_1BYTE		;
  724E  77            		LD	(HL),A			;
  724F  C1            		POP	BC			;
  7250  CDD35E        		CALL	CPHLDE			;OUT OF MEMORY チェック
  7253  3805          		JR	C,.L5			; HL=アドレス
  7255  1E07          		LD	E,OUT_OF_MEMORY		; DE=境界値
  7257  C3F93B        		JP	ERROR			; HL>=DEでエラー
  725A  23            	.L5:	INC	HL			;転送先アドレス++
  725B  B7            		OR	A			;値が00Hでなければゼロカウンタを初期値に戻す
  725C  20EA          		JR	NZ,.L2			;
  725E  10EA          		DJNZ	.L3			;値が00HならBのカウントダウンを続ける
                      	
  7260  C35E70        		JP	FIN_READ_BASIC		;
                      	
                      	
                      	;=================================================
                      	;[BAS]BASファイルの書き込み
                      	;IN  (TGT_CLSTR)
                      	;OUT -
                      	;=================================================
  7263                	WRITE_BAS:
  7263  CD956F        		CALL	IS_BASIC		;
  7266  CA7C78        		JP	Z,ERR_EMPTY_FILE	;
                      	
  7269  CD6B70        		CALL	PREP_WRITE		;
  726C  CD865B        		CALL	RAD2RNUM		;BASICの行アドレスを行番号に変換する！重要！
                      	
  726F  3AF67C        		LD	A,(ARGNUM)		;入力パラメータ数が0でなければエラーへ
  7272  A7            		AND	A			;
  7273  2805          		JR	Z,.L1			;
                      	
  7275  1E05          		LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  7277  C3F93B        		JP	ERROR
                      	
  727A  CD506A        	.L1:	CALL	IPRINT			;
  727D  5B4241535D0D0A		DB	"[BAS]",CR,LF,EOL	;
        00            	
                      	
  7285  ED5B54EB      		LD	DE,(BASBEGIN)		;=先頭アドレス
  7289  2AA0EF        		LD	HL,(VARBEGIN)		;=終了アドレス
  728C  E5            		PUSH	HL			;
  728D  B7            		OR	A			;CY<-0
  728E  ED52          		SBC	HL,DE			;HL<-終了アドレス-先頭アドレス
  7290  44            		LD	B,H			;
  7291  4D            		LD	C,L			;BC<-プログラムのサイズ
  7292  E1            		POP	HL			;
  7293  EB            		EX	DE,HL			;HL=先頭アドレス,DE=終了アドレス
  7294  7E            	.L2:	LD	A,(HL)			;
  7295  CD046D        		CALL	POST_1BYTE		;
  7298  23            		INC	HL			;
  7299  0B            		DEC	BC			;
  729A  78            		LD	A,B			;
  729B  B1            		OR	C			;
  729C  20F6          		JR	NZ,.L2			;
                      	
  729E  C38870        		JP	FIN_WRITE		;
                      	
[EOF:BAS.asm]
                      	INCLUDE	"RAW.asm"				;任意ファイル関連
                      	;=================================================
                      	;[RAW]任意のファイル読み込み
                      	;IN  (ARG1)=開始アドレス
                      	;OUT -
                      	;=================================================
  72A1                	READ_RAW:
  72A1  CD4C70        		CALL	PREP_READ		;
  72A4  CD346F        		CALL	GET_FIREWALL		;
  72A7  3AF67C        		LD	A,(ARGNUM)		;
  72AA  3D            		DEC	A			;
  72AB  1E05          		LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  72AD  C2F93B        		JP	NZ,ERROR		;
                      	
  72B0  212C7D        		LD	HL,DIR_ENTRY+IDX_SIZE	;
  72B3  4E            		LD	C,(HL)			;DE=ファイルサイズの下位２バイト
  72B4  23            		INC	HL			;
  72B5  46            		LD	B,(HL)			;
  72B6  23            		INC	HL			;
  72B7  5E            		LD	E,(HL)			;BC=ファイルサイズの上位２バイト
  72B8  23            		INC	HL			;
  72B9  56            		LD	D,(HL)			;
                      	
  72BA  7B            		LD	A,E			;ファイルサイズが10000H以上ならエラー
  72BB  B2            		OR	D			;
  72BC  2805          		JR	Z,.L1			;
  72BE  1E07          	.ERR:	LD	E,OUT_OF_MEMORY		;
  72C0  C3F93B        		JP	ERROR			;
                      	
  72C3  2AF07C        	.L1:	LD	HL,(ARG1)		;HL=開始アドレス
  72C6  E5            		PUSH	HL
  72C7  59            		LD	E,C			;DE=ファイルサイズ
  72C8  50            		LD	D,B			;
  72C9  EB            		EX	DE,HL			;DE=開始アドレス
  72CA  19            		ADD	HL,DE			;
  72CB  2B            		DEC	HL			;HL=終了アドレス
                      	
  72CC  CD7669        		CALL	IS_INFO_ON		;
  72CF  2819          		JR	Z,.L2			;
                      	
  72D1  CD506A        		CALL	IPRINT			;
  72D4  5B5241575D0D0A		DB	"[RAW]",CR,LF,EOL	;
        00            	
  72DC  EB            		EX	DE,HL
  72DD  CDC05E        		CALL	PRTHLHEX		;開始アドレスを表示
  72E0  3E2D          		LD	A,"-"			;
  72E2  DF            		RST	18H			;
  72E3  EB            		EX	DE,HL			;
  72E4  CDC05E        		CALL	PRTHLHEX		;終了アドレスを表示
  72E7  CDCA5F        		CALL	PUT_CR			;
                      	
  72EA  CDBC70        	.L2:	CALL	IS_SAFE_ZONE		;セーフゾーンチェック
  72ED  E1            		POP	HL			;HL=開始アドレス
                      	
  72EE  CD736C        	.LOOP:	CALL	FETCH_1BYTE		;メモリに書き込み
  72F1  77            		LD	(HL),A			;
  72F2  23            		INC	HL			;
  72F3  0B            		DEC	BC			;残りサイズ--
  72F4  78            		LD	A,B			;
  72F5  B1            		OR	C			;
  72F6  20F6          		JR	NZ,.LOOP		;
                      	
  72F8  C9            		RET				;
[EOF:RAW.asm]
                      	INCLUDE	"DATE.asm"				;日時
                      	
  00FF                	KANJI:			EQU	TRUE	;ファイル更新日時に漢字を使用する場合はTRUE
  0000                	SECONDS:		EQU	FALSE	;ファイル更新日時の"秒"を出力する場合はTRUE
                      	
                      	;=================================================
                      	;ファイルの日付情報を現在の位置に出力する
                      	;IN  DE=エンコードされた日付
                      	;OUT 
                      	;=================================================
  72F9                	PRT_FDATE:
  72F9  D5            		PUSH	DE
  72FA  D9            		EXX
  72FB  E1            		POP	HL
  72FC  CD2C73        		CALL	GET_FDATE	;
                      	
  72FF  7A            		LD	A,D		;=YEAR
  7300  CD8E73        		CALL	PRT_WDEC	;
                      	IF KANJI
  7303  3EF2          		LD	A,0F2H		;="年"
                      	ELSE
;;                   -		LD	A,"/"
                      	ENDIF
  7305  DF            		RST	18H		;
  7306  7B            		LD	A,E		;=MONTH
  7307  CD8E73        		CALL	PRT_WDEC	;
                      	IF KANJI
  730A  3EF3          		LD	A,0F3H		;="月"
                      	ELSE
;;                   -		LD	A,"/"
                      	ENDIF
  730C  DF            		RST	18H		;
  730D  79            		LD	A,C		;=DAY
  730E  CD8E73        		CALL	PRT_WDEC	;
                      	IF KANJI
  7311  3EF4          		LD	A,0F4H		;="日"
  7313  DF            		RST	18H		;
                      	ENDIF
                      	
  7314  D9            		EXX
  7315  C9            		RET
                      	
                      	;=================================================
                      	;ファイルの時刻情報を現在の位置に出力する
                      	;IN  DE=エンコードされた時刻
                      	;OUT 
                      	;=================================================
  7316                	PRT_FTIME:
  7316  D5            		PUSH	DE
  7317  D9            		EXX
  7318  E1            		POP	HL
  7319  CD4A73        		CALL	GET_FTIME	;D=HOUR,E=MIN,C=SEC
                      	
  731C  7A            		LD	A,D		;=HOUR
  731D  CD8E73        		CALL	PRT_WDEC		;
                      	IF KANJI
  7320  3EF5          		LD	A,0F5H		;"時"
                      	ELSE
;;                   -		LD	A,":"
                      	ENDIF
  7322  DF            		RST	18H		;
  7323  7B            		LD	A,E		;=MIN
  7324  CD8E73        		CALL	PRT_WDEC	;
                      	IF KANJI
  7327  3EF6          		LD	A,0F6H		;"分"
  7329  DF            		RST	18H		;
                      	ENDIF
                      	
                      	IF SECONDS
;;                   -	 IF !KANJI
;;                   -		LD	A,":"
;;                   -		RST	18H
;;                   -	 ENDIF
;;                   -	
;;                   -		RST	18H		;
;;                   -		LD	A,C		;=SEC
;;                   -		CALL	PRT_WDEC	;
;;                   -	 IF KANJI
;;                   -		LD	A,0F7H		;"秒"
;;                   -		RST	18H		;
;;                   -	 ENDIF
                      	ENDIF
                      	
  732A  D9            		EXX
  732B  C9            		RET
                      	
                      	;=================================================
                      	;[DATE]ファイルの日付情報をレジスタに取得する
                      	;IN  HL=エンコードされた日付
                      	;OUT D=YEAR,E=MONTH,C=DAY
                      	;=================================================
  732C                	GET_FDATE:
                      					;L=MMMDDDDd
                      					;H=YYYYYYYm
  732C  7D            		LD	A,L		;A=MMMDDDDd
  732D  CB3C          		SRL	H		;H=0YYYYYYY CY=m H=YEAR
  732F  1F            		RRA			;A=mMMMDDDD CY=d
  7330  CB3F          		SRL	A		;
  7332  CB3F          		SRL	A		;
  7334  CB3F          		SRL	A		;
  7336  CB3F          		SRL	A		;A=0000mMMM
  7338  5F            		LD	E,A		;B=MONTH
  7339  3E1F          		LD	A,00011111B	;
  733B  A5            		AND	L		;
  733C  4F            		LD	C,A		;C=DAY
  733D  3E50          		LD	A,80		;=1980の下二桁
  733F  84            		ADD	A,H		;=YEAR+80
  7340  FE64          	.L2:	CP	100		;YEARを100未満にする
  7342  3804          		JR	C,.L1		;
  7344  D664          		SUB	100		;
  7346  18F8          		JR	.L2		;
  7348  57            	.L1:	LD	D,A		;D=YEAR
                      	
  7349  C9            		RET
                      	
                      	;=================================================
                      	;[DATE]ファイルの時刻情報をレジスタに取得する
                      	;IN  HL=エンコードされた時刻
                      	;OUT D=HOUR,E=MIN,C=SEC
                      	;=================================================
  734A                	GET_FTIME:
                      					;L=MMMSSSSS
                      					;H=HHHHHMMM
  734A  3E1F          		LD	A,00011111B	;秒のビットマスク
  734C  A5            		AND	L		;A=000SSSSS
  734D  17            		RLA			;A=00SSSSS0 Ax2
  734E  4F            		LD	C,A		;C=00SSSSS0=SEC
  734F  7D            		LD	A,L		;A=MMMSSSSS
  7350  CB3C          		SRL	H		;H=0HHHHHMM CY=M
  7352  1F            		RRA			;A=MMMMSSSS CY=S
  7353  CB3C          		SRL	H		;H=00HHHHHM CY=M
  7355  1F            		RRA			;A=MMMMMSSS
  7356  CB3C          		SRL	H		;H=000HHHHH=HOUR
  7358  54            		LD	D,H		;D=HOUR
                      	
  7359  1F            		RRA			;A=MMMMMMSS
  735A  CB3F          		SRL	A		;A=0MMMMMMS
  735C  CB3F          		SRL	A		;A=00MMMMMM
  735E  5F            		LD	E,A		;E=00MMMMMM=MIN
                      					;D=HOUR,E=MIN
  735F  C9            		RET
                      	
                      	;=================================================
                      	;[DATE]時刻をFATフォーマットにエンコードする
                      	;IN  D=000HHHHH=0~31,E=00MMMMMM=0~63,C=00SSSSSS=0~63
                      	;OUT HL=HHHHHMMM.MMMSSSSS
                      	;=================================================
  7360                	ENC_TIME:
  7360  CBC1          		SET	0,C				;C=00SSSSS0 SECを1/2にする
  7362  CB21          		SLA	C				;C=0SSSSS00
  7364  CB21          		SLA	C				;C=SSSSS000
  7366  79            		LD	A,C				;A=SSSSS000
  7367  CB3B          		SRL	E				;E=000MMMMM CY=M
  7369  1F            		RRA					;A=MSSSSS00 CY=0
  736A  CB3B          		SRL	E				;E=0000MMMM CY=M
  736C  1F            		RRA					;A=MMSSSSS0 CY=0
  736D  CB3B          		SRL	E				;E=00000MMM CY=M
  736F  1F            		RRA					;A=MMMSSSSS CY=0
  7370  6F            		LD	L,A				;L=MMMSSSSS CY=0
  7371  7A            		LD	A,D				;A=000HHHHH CY=0
  7372  07            		RLCA					;A=00HHHHH0 CY=0
  7373  07            		RLCA					;A=0HHHHH00 CY=0
  7374  07            		RLCA					;A=HHHHH000 CY=0
  7375  B3            		OR	E				;A=HHHHHMMM
  7376  67            		LD	H,A				;H=HHHHHMMM
  7377  C9            		RET					;
                      	
                      	;=================================================
                      	;[DATE]日付をFATフォーマットにエンコードする
                      	;IN  D=0YYYYYYY=0~127,E=0000MMMM=0~15,C=000DDDDD=0~31
                      	;OUT HL=YYYYYYYM.MMMDDDDD
                      	;=================================================
  7378                	ENC_DATE:
  7378  CB21          		SLA	C				;C=00DDDDD0
  737A  CB21          		SLA	C				;C=0DDDDD00
  737C  CB21          		SLA	C				;C=DDDDD000
  737E  79            		LD	A,C				;A=DDDDD000
  737F  CB3B          		SRL	E				;L=00000MMM CY=M
  7381  1F            		RRA					;A=MDDDDD00 CY=0
  7382  CB3B          		SRL	E				;L=000000MM CY=M
  7384  1F            		RRA					;A=MMDDDDD0 CY=0
  7385  CB3B          		SRL	E				;L=0000000M CY=M
  7387  1F            		RRA					;A=MMMDDDDD CY=0
  7388  6F            		LD	L,A				;L=MMMDDDDD
  7389  7A            		LD	A,D				;A=0YYYYYYY
  738A  07            		RLCA					;A=YYYYYYY0
  738B  B3            		OR	E				;A=YYYYYYYM
  738C  67            		LD	H,A				;H=YYYYYYYM
  738D  C9            		RET					;
                      	
                      	;=================================================
                      	;2桁の10進数を現在の位置に出力する
                      	;IN  A
                      	;OUT -
                      	;=================================================
  738E                	PRT_WDEC:
  738E  C5            		PUSH	BC				;
  738F  FE64          	.L4:	CP	100				;あらかじめ値を100未満に修正する
  7391  3804          		JR	C,.L3				;
  7393  D664          		SUB	100				;
  7395  18F8          		JR	.L4				;
  7397  0600          	.L3:	LD	B,0				;
  7399  0E0A          		LD	C,10				;
  739B  91            	.L2:	SUB	C				;
  739C  3803          		JR	C,.L1				;
  739E  04            		INC	B				;
  739F  18FA          		JR	.L2				;
  73A1  C60A          	.L1:	ADD	A,10				;
  73A3  4F            		LD	C,A				;
  73A4  3E30          		LD	A,"0"				;
  73A6  80            		ADD	A,B				;
  73A7  DF            		RST	18H				;
  73A8  3E30          		LD	A,"0"				;
  73AA  81            		ADD	A,C				;
  73AB  DF            		RST	18H				;
  73AC  C1            		POP	BC				;
  73AD  C9            		RET					;
                      	
[EOF:DATE.asm]
                      	INCLUDE	"DUMP.asm"				;ダンプ表示
                      	
                      	;=================================================
                      	;[DUMP]ディレクトリエントリのプロパティを表示する
                      	;IN  (DIR_ENTRY)
                      	;OUT 
                      	;=================================================
  73AE                	DUMP_DENT:
  73AE  E5            		PUSH	HL				;
  73AF  CD3968        		CALL	IS_FAT16			;
  73B2  21107D        		LD	HL,DIR_ENTRY			;
  73B5  CD506A        		CALL	IPRINT				;
  73B8  4E414D4520203A		DB	"NAME  :",EOL			;
        00            	
  73C0  060B          		LD	B,DNAME_SIZE			;ファイル名と拡張子
  73C2  7E            	.L1:	LD	A,(HL)				;
  73C3  23            		INC	HL				;
  73C4  DF            		RST	18H				;
  73C5  10FB          		DJNZ	.L1				;
  73C7  CDCA5F        		CALL	PUT_CR				;
  73CA  CD506A        		CALL	IPRINT				;
  73CD  4154524220203A		DB	"ATRB  :--",EOL			;
        2D2D00        	
  73D7  7E            		LD	A,(HL)				;属性
  73D8  23            		INC	HL				;
  73D9  E5            		PUSH	HL				;
  73DA  F5            		PUSH	AF				;
  73DB  11A574        		LD	DE,ATRB_BIT_SYMBL		;DE<-属性シンボル文字列へのポインタ
  73DE  216A7D        		LD	HL,ATRB				;HL<-固定長文字列ATRBへのポインタ
  73E1  CDAD77        		CALL	NULL_STR			;
  73E4  F1            		POP	AF				;
  73E5  CB27          		SLA	A				;BIT7
  73E7  CB27          		SLA	A				;BIT6
  73E9  0606          		LD	B,6				;
  73EB  EB            	.L4:	EX	DE,HL				;
  73EC  4E            		LD	C,(HL)				;C<-(属性シンボル)
  73ED  CB27          		SLA	A				;左シフト
  73EF  3802          		JR	C,.L3				;
  73F1  0E2D          	.L2:	LD	C,"-"				;
  73F3  EB            	.L3:	EX	DE,HL				;HL=固定長文字列ATRBへのポインタ
  73F4  F5            		PUSH	AF				;
  73F5  CDBA77        		CALL	ADD_STR				;(ATRB)に属性シンボルCを加える
  73F8  F1            		POP	AF				;
  73F9  13            		INC	DE				;属性シンボル文字列へのポインタ++
  73FA  10EF          		DJNZ	.L4				;
  73FC  216A7D        		LD	HL,ATRB				;
  73FF  46            		LD	B,(HL)				;
  7400  23            	.L5:	INC	HL				;
  7401  7E            		LD	A,(HL)				;
  7402  DF            		RST	18H				;
  7403  10FB          		DJNZ	.L5				;
  7405  E1            		POP	HL				;
  7406  CDCA5F        		CALL	PUT_CR				;
  7409  23            		INC	HL				;+0CH
  740A  23            		INC	HL				;+0DH
  740B  CD506A        		CALL	IPRINT				;
  740E  4352454154453A		DB	"CREATE:",EOL			;
        00            	
  7416  5E            		LD	E,(HL)				;作成時刻 0EH,0FH
  7417  23            		INC	HL				;
  7418  56            		LD	D,(HL)				;
  7419  23            		INC	HL				;
  741A  CD1673        		CALL	PRT_FTIME			;
  741D  CDD45F        		CALL	PUT_SPC				;
  7420  5E            		LD	E,(HL)				;作成日 10H,11H
  7421  23            		INC	HL				;
  7422  56            		LD	D,(HL)				;
  7423  23            		INC	HL				;
  7424  CDF972        		CALL	PRT_FDATE			;
  7427  CDCA5F        		CALL	PUT_CR				;
  742A  23            		INC	HL				;+12H
  742B  23            		INC	HL				;+13H
  742C  23            		INC	HL				;+14H
  742D  23            		INC	HL				;+15H
  742E  CD506A        		CALL	IPRINT				;
  7431  5550444154453A		DB	"UPDATE:",EOL			;
        00            	
  7439  5E            		LD	E,(HL)				;更新時刻 16H,17H
  743A  23            		INC	HL				;
  743B  56            		LD	D,(HL)				;
  743C  23            		INC	HL				;
  743D  CD1673        		CALL	PRT_FTIME			;
  7440  CDD45F        		CALL	PUT_SPC				;
  7443  5E            		LD	E,(HL)				;更新日 18H,19H
  7444  23            		INC	HL				;
  7445  56            		LD	D,(HL)				;
  7446  23            		INC	HL				;
  7447  CDF972        		CALL	PRT_FDATE			;
  744A  CDCA5F        		CALL	PUT_CR				;
  744D  CD506A        		CALL	IPRINT				;
  7450  4641542020203A		DB	"FAT   :",EOL			;
        00            	
  7458  5E            		LD	E,(HL)				;FATエントリ 1AH,1BH
  7459  23            		INC	HL				;
  745A  56            		LD	D,(HL)				;
  745B  23            		INC	HL				;
  745C  EB            		EX	DE,HL				;
  745D  7C            		LD	A,H				;
  745E  B5            		OR	L				;
  745F  200B          		JR	NZ,.L6				;
  7461  CD506A        		CALL	IPRINT				;
  7464  4E2F410D0A00  		DB	"N/A",CR,LF,EOL			;
  746A  1814          		JR	.L7				;
                      	
  746C  CDC05E        	.L6:	CALL	PRTHLHEX			;
  746F  E5            		PUSH	HL				;
  7470  3E2F          		LD	A,"/"				;セクタ＃
  7472  DF            		RST	18H				;
  7473  CD3869        		CALL	GET_FIRST_SCTR			;(DW0)<-クラスタHLのセクタ＃
  7476  217C7D        		LD	HL,DW0				;
  7479  CD676A        		CALL	PRT_DW_HEX			;
  747C  CDCA5F        		CALL	PUT_CR				;
  747F  E1            		POP	HL				;
                      	
  7480  CD506A        	.L7:	CALL	IPRINT				;
  7483  44554D5020203A		DB	"DUMP  :",EOL			;
        00            	
  748B  CDAB74        		CALL	DUMP8				;
  748E  CDCA5F        		CALL	PUT_CR				;
                      	
  7491  EB            		EX	DE,HL				;
  7492  CD506A        		CALL	IPRINT				;
  7495  53495A4520203A		DB	"SIZE  :",EOL			;
        00            	
  749D  CD676A        		CALL	PRT_DW_HEX			;ファイルサイズ 1CH,1DH,1EH,1FH
  74A0  CDCA5F        		CALL	PUT_CR				;
  74A3  E1            		POP	HL				;
  74A4  C9            		RET					;
                      	
  74A5                	ATRB_BIT_SYMBL:					;
  74A5  414456534852  		DB	"A","D","V","S","H","R"		;
                      	
                      	
                      	;=================================================
                      	;[DUMP]先頭の８バイトをダンプ出力する
                      	;IN  HL=クラスタ＃
                      	;OUT -
                      	;=================================================
  74AB                	DUMP8:
  74AB  D5            		PUSH	DE				;
  74AC  DD21087D      		LD	IX,FILE_BFFR_STRCT		;ファイルバッファを使用する
  74B0  CD3869        		CALL	GET_FIRST_SCTR			;(DW0)<-クラスタHLの開始セクタ＃
  74B3  CD7064        		CALL	LOAD_BFFR			;セクタ(DW0)をバッファIXに読み込む
  74B6  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-バッファポインタ=バッファの先頭アドレス
  74B9  DD6605        		LD	H,(IX+IDX_BADR+1)		;
                      	
  74BC  0608          		LD	B,08H
  74BE  7E            	.L1:	LD	A,(HL)
  74BF  23            		INC	HL
  74C0  CDC55E        		CALL	PRTAHEX
  74C3  78            		LD	A,B
  74C4  3D            		DEC	A
  74C5  2803          		JR	Z,.L2
  74C7  3E2E          		LD	A,"."
  74C9  DF            		RST	18H
  74CA  10F2          	.L2:	DJNZ	.L1
                      	
  74CC  D1            		POP	DE
  74CD  C9            		RET
                      	
                      	;=================================================
                      	;[DUMP]ファイルの種類を表示する
                      	;IN  HL=クラスタ＃
                      	;OUT -
                      	;=================================================
                      	IF FALSE
;;                   -	PRT_FTYPE:
;;                   -		PUSH	DE				;
;;                   -		LD	IX,FILE_BFFR_STRCT		;ファイルバッファを使用する
;;                   -		CALL	GET_FIRST_SCTR			;(DW0)<-クラスタHLの開始セクタ＃
;;                   -		CALL	LOAD_BFFR			;セクタ(DW0)をバッファIXに読み込む
;;                   -		LD	L,(IX+IDX_BADR)			;HL<-バッファポインタ=バッファの先頭アドレス
;;                   -		LD	H,(IX+IDX_BADR+1)		;
;;                   -		LD	A,(HL)				;
;;                   -		INC	HL				;
;;                   -		CP	BAS_MARK			;BASICマーカーか？
;;                   -		JR	Z,.BAS				;
;;                   -		CP	BIN_MARK			;
;;                   -		JR	Z,.BIN				;
;;                   -	.UNK:	LD	HL,.MUNK			;
;;                   -		JR	.L1				;
;;                   -	
;;                   -	.BAS:	LD	B,09H				;ヘッダーの残り９バイトをチェック
;;                   -	.L2:	LD	A,(HL)				;
;;                   -		INC	HL				;
;;                   -		CP	BAS_MARK			;
;;                   -		JP	NZ,.UNK				;
;;                   -		DJNZ	.L2				;
;;                   -		LD	HL,.MBAS			;
;;                   -	.L1:	CALL	PRINT				;
;;                   -		JR	.EXIT				;
;;                   -	
;;                   -	.BIN:	PUSH	HL				;
;;                   -		LD	HL,.MBIN			;
;;                   -		CALL	PRINT				;
;;                   -		POP	HL				;
;;                   -		LD	D,(HL)				;
;;                   -		INC	HL				;
;;                   -		LD	E,(HL)				;
;;                   -		EX	DE,HL				;
;;                   -		CALL	PRTHLHEX			;
;;                   -	.EXIT:	POP	DE				;
;;                   -		RET					;
;;                   -	
;;                   -	.MUNK:	DB	"     ",EOL			;
;;                   -	.MBAS:	DB	"BASIC",EOL			;
;;                   -	.MBIN:	DB	"BINARY &H",EOL			;
                      	ENDIF
                      	
[EOF:DUMP.asm]
                      	INCLUDE	"CMD.asm"				;コマンド
                      	
                      	;=================================================
                      	;[CMD]CMD命令
                      	;=================================================
  74CE                	CMD:
  74CE  0E00          		LD	C,00H				;ジャンプ用インデックスの初期値
  74D0  119C78        		LD	DE,CMD_TABLE			;コマンドテーブルポインタ(CP)の初期値
  74D3  C3C66D        		JP	WORD_JUMP			;
                      	
                      	;=================================================
                      	;[CMD]CMD V 命令 "VALID" DOSプログラムのチェックサムを出力する
                      	;=================================================
  74D6                	CMD_V:
  74D6  E5            		PUSH	HL
  74D7  B7            		OR	A				;
  74D8  21EE78        		LD	HL,WORK_AREA			;
  74DB  110060        		LD	DE,6000H			;
  74DE  D5            		PUSH	DE				;
  74DF  ED52          		SBC	HL,DE				;
  74E1  44            		LD	B,H				;
  74E2  4D            		LD	C,L				;BC<-DOSプログラム全体のバイト数
  74E3  E1            		POP	HL				;HL<-6000H
  74E4  110000        		LD	DE,0000H			;=チェックサム
  74E7  7E            	.L1:	LD	A,(HL)				;
  74E8  83            		ADD	A,E				;
  74E9  5F            		LD	E,A				;
  74EA  7A            		LD	A,D				;
  74EB  CE00          		ADC	A,00H				;DE+=(HL)
  74ED  57            		LD	D,A				;
  74EE  23            		INC	HL				;
  74EF  0B            		DEC	BC				;
  74F0  78            		LD	A,B				;
  74F1  B1            		OR	C				;
  74F2  20F3          		JR	NZ,.L1				;
                      	
  74F4  CDCA5F        		CALL	PUT_CR
  74F7  62            		LD	H,D
  74F8  6B            		LD	L,E
  74F9  CDC05E        		CALL	PRTHLHEX
  74FC  CDCA5F        		CALL	PUT_CR
                      	
  74FF  C3A776        		JP	CLOSE_CMD
                      	
                      	;=================================================
                      	;[CMD]CMD F 命令 "FREE"	フリーエリアを拡張する
                      	;=================================================
  7502                	CMD_F:
  7502  21D87D        		LD	HL,FREE_AREA
  7505  C3E917        		JP	SETFREADR
                      	
                      	;=================================================
                      	;[CMD]CMD P 命令 "PROPERTY"	ディレクトリエントリのプロパティ表示
                      	;=================================================
  7508                	CMD_P:
  7508  CDE276        		CALL	STR2ARG0			;
  750B  E5            		PUSH	HL				;
  750C  CD3968        		CALL	IS_FAT16			;
  750F  CDBD64        		CALL	CHANGE_WDIR			;HL<-エントリ名の先頭アドレス
  7512  0E00          		LD	C,00H				;=全属性
  7514  CD6365        		CALL	GET_DENT			;
  7517  CA7678        		JP	Z,ERR_NOT_FOUND			;
  751A  CDAE73        		CALL	DUMP_DENT			;メインルーチン
  751D  CD5065        		CALL	RESTORE_WDIR			;
  7520  C3A776        		JP	CLOSE_CMD
                      	
                      	;=================================================
                      	;[CMD]CMD ON 命令 "INFO ON"	インフォメーションを表示する
                      	;=================================================
  7523                	CMD_ON:
  7523  3EFF          		LD	A,TRUE
                      	
  7525  E5            	INFO:	PUSH	HL
  7526  32C47D        		LD	(INFO_SW),A
  7529  3C            		INC	A
  752A  200D          		JR	NZ,.L1
  752C  CD506A        		CALL	IPRINT
  752F  494E464F204F4E		DB	"INFO ON",CR,LF,EOL
        0D0A00        	
  7539  C3A776        	.L1:	JP	CLOSE_CMD
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD OFF 命令 "INFO OFF"
                      	;=================================================
  753C                	CMD_OFF:
  753C  3E00          		LD	A,FALSE
  753E  18E5          		JR	INFO
                      	
                      	;=================================================
                      	;[CMD]CMD R 命令 "RUN" 実行フラグを立ててロードする
                      	;=================================================
  7540                	CMD_R:
  7540  3EFF          		LD	A,TRUE				;実行フラグを立てる
  7542  32F77C        		LD	(EXECFLG),A			;
  7545  CDE269        		CALL	RESET_ARGS			;入力パラメータを無効にする
  7548  CDE276        		CALL	STR2ARG0			;
  754B  CD7375        		CALL	LOAD.E1				;
                      	
  754E  3AF77C        		LD	A,(EXECFLG)
  7551  A7            		AND	A
  7552  C8            		RET	Z
  7553  C3F43D        		JP	RUN
                      	
                      	
                      	;=================================================
                      	;[CMD]RBYTE命令 任意のバイナリファイルをメモリに読み込む
                      	;=================================================
  7556                	RBYTE:
  7556  CDAC69        		CALL	GET_ARGS			;
  7559  E5            		PUSH	HL				;
  755A  CD3968        		CALL	IS_FAT16			;
  755D  CDBD64        		CALL	CHANGE_WDIR			;
  7560  CD6269        		CALL	DNAME2CLSTR			;
  7563  CDA172        		CALL	READ_RAW
  7566  CD5065        		CALL	RESTORE_WDIR			;
  7569  C3A776        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[CMD]LOAD命令 ファイルをメモリに読み込む
                      	;=================================================
  756C                	LOAD:
  756C  AF            		XOR	A				;実行フラグを降ろす
  756D  32F77C        		LD	(EXECFLG),A			;
  7570  CDAC69        		CALL	GET_ARGS			;
                      	
  7573  E5            	.E1:	PUSH	HL				;CMD Rのエントリポイント
  7574  CD3968        		CALL	IS_FAT16			;
  7577  CDBD64        		CALL	CHANGE_WDIR			;
  757A  CD6269        		CALL	DNAME2CLSTR			;
  757D  21CE78        		LD	HL,EXT_LOAD_TABLE		;
  7580  CD8969        		CALL	EXT_TABLE_JUMP			;拡張子に対応したロードルーチンへジャンプする
  7583  CD5065        		CALL	RESTORE_WDIR			;
  7586  C3A776        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[CMD]SAVE命令 メモリ内容をファイルに書き込む
                      	;=================================================
  7589                	SAVE:
  7589  CDAC69        		CALL	GET_ARGS			;(ARG0)=ファイルパス＋ファイル名の格納アドレス、(ARG1)=先頭アドレス,(ARG2)=終了アドレス
  758C  E5            		PUSH	HL				;
  758D  CD3968        		CALL	IS_FAT16			;
  7590  0E20          		LD	C,ATRB_FILE			;
  7592  CDA775        		CALL	PREP_DENT			;
  7595  CD8965        		CALL	IS_READ_ONLY			;
  7598  21DE78        		LD	HL,EXT_SAVE_TABLE		;
  759B  CD8969        		CALL	EXT_TABLE_JUMP			;拡張子に対応したセーブルーチンへジャンプする
  759E  CDD965        		CALL	WRITE_DENT			;
  75A1  CD5065        		CALL	RESTORE_WDIR			;
  75A4  C3A776        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[CMD] ファイルパスで指定されたディレクトリにエントリを作成する
                      	;IN  (ARG0)=ファイルパス＋エントリ名,C=作成するエントリの属性
                      	;OUT (ARG0)=エントリ名の先頭アドレス
                      	;=================================================
  75A7                	PREP_DENT:
  75A7  C5            		PUSH	BC				;
  75A8  CDBD64        		CALL	CHANGE_WDIR			;
  75AB  22EE7C        		LD	(ARG0),HL			;
  75AE  C1            		POP	BC				;
  75AF  CDB165        		CALL 	TOUCH				;
  75B2  CD9565        		CALL	SET_DENT_FAT			;
  75B5  C9            		RET
                      	
                      	;=================================================
                      	;[CMD]POLL命令 ワーキングディレクトリを変更する
                      	;=================================================
  75B6                	POLL:
  75B6  CDC167        		CALL	STR2BUFF			;
  75B9  E5            		PUSH	HL				;
  75BA  CD3968        		CALL	IS_FAT16			;
  75BD  213DFF        		LD	HL,STR_BUFF			;
  75C0  CD1965        		CALL	TRACE_PATH			;
  75C3  C3A776        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[CMD]KILL命令 ファイルを削除する
                      	;=================================================
  75C6                	KILL:
  75C6  CDE276        		CALL	STR2ARG0			;
  75C9  E5            		PUSH	HL				;
  75CA  CD3968        		CALL	IS_FAT16			;
  75CD  215778        		LD	HL,MSG_KILL_FILE		;
  75D0  CD156A        		CALL	YES_NO				;
  75D3  2024          		JR	NZ,.EXIT			;
  75D5  CDBD64        		CALL	CHANGE_WDIR			;
  75D8  0E20          	.L1:	LD	C,ATRB_FILE			;
  75DA  CD6365        		CALL	GET_DENT			;
  75DD  CA7678        		JP	Z,ERR_NOT_FOUND
  75E0  CD8965        		CALL	IS_READ_ONLY			;
  75E3  2A2A7D        		LD	HL,(DIR_ENTRY+IDX_FAT)		;
  75E6  7C            		LD	A,H				;FATエントリが0000Hならディレクトリエントリのみ削除する
  75E7  B5            		OR	L				;それ以外は
  75E8  C43B63        		CALL	NZ,ERASE_FAT_LINK		;FATリンク先をすべて消去する
  75EB  21107D        	.DIR:	LD	HL,DIR_ENTRY			;ディレクトリエントリバッファの先頭に0E5Hをセットする
  75EE  36E5          		LD	(HL),ID_DISABLED		;これによりディレクトリエントリが無効になる
  75F0  CDD965        		CALL	WRITE_DENT			;ディレクトリエントリバッファをファイルバッファにコピーする
  75F3  CD4564        		CALL	FLUSH_BFFR			;全バッファ書き込み
  75F6  CD5065        		CALL	RESTORE_WDIR			;
  75F9  C3A776        	.EXIT:	JP	CLOSE_CMD
                      	
                      	;=================================================
                      	;[CMD]MOUNT命令 SDカードのプライマリパーティションをマウントする
                      	;=================================================
  75FC                	MOUNT:
  75FC  E5            		PUSH	HL
  75FD  CDA460        		CALL	INIT_8255			;PPI初期化
  7600  CD6D61        		CALL	MMC_INIT			;MMC初期化
  7603  CD4968        		CALL	READ_MBR			;パーティション開始セクタ＃をセットする
  7606  CD6D68        		CALL	READ_IPL			;FAT16フォーマットチェック
  7609  CDAD68        		CALL	READ_BPB			;BPB情報から導かれる定数をワークにセットする
  760C  CDDD67        		CALL	INIT_FAT16			;FAT16関連ワーク初期化！バッファクリアのため必ず最後に実行する！
  760F  CDF767        		CALL	PRT_VOLUME			;ボリューム名表示
                      	;	CALL	IS_YEAR79			;日付が未入力ならメッセージを出力
  7612  E1            		POP	HL				;
  7613  CD7D67        		CALL	AUTOEXEC			;
  7616  C9            		RET					;
                      	
                      	;=================================================
                      	;[CMD]FILES命令 指定されたディレクトリのエントリ一覧を表示する
                      	;=================================================
  7617                	FILES:
  7617  FE3A          		CP	":"				;
  7619  2806          		JR	Z,.L1				;
  761B  B7            		OR	A				;
  761C  2803          		JR	Z,.L1				;
  761E  CDB675        		CALL	POLL				;
  7621  E5            	.L1:	PUSH	HL				;
  7622  CD3968        		CALL	IS_FAT16			;
  7625  2A5B7D        		LD	HL,(WDIR_CLSTR)			;
  7628  FD21F366      		LD	IY,PRT_DENT			;
  762C  CD4066        		CALL	DIR_WALK			;
  762F  E1            		POP	HL				;
  7630  C9            		RET					;
                      	
                      	;=================================================
                      	;[CMD]MERGE命令 メモリの内容をCMTファイルに追記する
                      	;=================================================
  7631                	MERGE:
  7631  CDAC69        		CALL	GET_ARGS			;
  7634  E5            		PUSH	HL				;
  7635  CD3968        		CALL	IS_FAT16			;
  7638  CDBD64        		CALL	CHANGE_WDIR			;
  763B  0E20          		LD	C,ATRB_FILE			;
  763D  CD6365        		CALL	GET_DENT			;
  7640  CA7678        		JP	Z,ERR_NOT_FOUND			;
  7643  CD8965        		CALL	IS_READ_ONLY			;
  7646  CD746D        		CALL	SET_FP_END			;FPをファイル終端にセットする
  7649  CD746F        		CALL	WRITE_CMT.MERGE			;CMTファイルの追記実行
  764C  CDD965        		CALL	WRITE_DENT			;
  764F  CD5065        		CALL	RESTORE_WDIR			;
  7652  E1            		POP	HL				;
  7653  C9            		RET					;
                      	
                      	;=================================================
                      	;[CMD]NAME命令 ディレクトリエントリ名を変更する
                      	;=================================================
  7654                	NAME:
  7654  CD8E76        		CALL	GET_2STR_ARGS			;２つの文字列の先頭アドレスを引数にセットする
  7657  E5            		PUSH	HL				;
  7658  CD3968        		CALL	IS_FAT16			;
  765B  CDBD64        		CALL	CHANGE_WDIR			;
  765E  22EE7C        		LD	(ARG0),HL			;
  7661  2AF07C        		LD	HL,(ARG1)			;
  7664  E5            		PUSH	HL				;新しいエントリ名を退避
  7665  0E00          		LD	C,00H				;
  7667  CD6365        		CALL	GET_DENT			;
  766A  C28278        		JP	NZ,ERR_EXISTS			;存在していればエラー
  766D  2AEE7C        		LD	HL,(ARG0)			;HL<-現在のエントリ名の先頭アドレス
  7670  0E00          		LD	C,00H				;
  7672  CD6365        		CALL	GET_DENT			;
  7675  CA7678        		JP	Z,ERR_NOT_FOUND			;存在しなければエラー
  7678  CD8965        		CALL	IS_READ_ONLY			;
  767B  E1            		POP	HL				;新しいエントリ名を復帰
  767C  CD1577        		CALL	STR2SFN				;現在のディレクトリエントリ名を新しいエントリ名で上書きする
  767F  21267D        		LD	HL,DIR_ENTRY+IDX_TIME		;ディレクトリエントリバッファの「更新日時」に現在日時をセットする
  7682  CDFD65        		CALL	SET_DATETIME			;
  7685  CDD965        		CALL	WRITE_DENT			;
  7688  CD5065        		CALL	RESTORE_WDIR			;
  768B  C3A776        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[CMD]２つの文字列の先頭アドレスを引数にセットする
                      	;IN  HL=TP
                      	;OUT HL=TP,(ARG0)=1番目の文字列,(ARG1)=2番めの文字列
                      	;=================================================
  768E                	GET_2STR_ARGS:
  768E  CDF66D        		CALL	OPEN_DQUOTE			;
  7691  22EE7C        		LD	(ARG0),HL			;
  7694  CD036E        		CALL	CLOSE_DQUOTE			;
  7697  2B            		DEC	HL				;！重要！
  7698  D7            		RST	10H				;
  7699  CD9B40        		CALL	TPSEEK				;
  769C  2C            		DB	","				;
  769D  CDF66D        		CALL	OPEN_DQUOTE			;
  76A0  22F07C        		LD	(ARG1),HL			;
  76A3  CD036E        		CALL	CLOSE_DQUOTE			;
  76A6  C9            		RET
                      	
                      	;=================================================
                      	;[CMD]テキストポインタを適切な位置に合わせてBASIC解析を実行する
                      	;=================================================
  76A7                	CLOSE_CMD:
  76A7  E1            		POP	HL				;
  76A8  2B            		DEC	HL				;！重要！
  76A9  D7            		RST	10H				;
  76AA  C9            		RET					;
                      	
                      	;=================================================
                      	;[CMD]ARG0とARG1を交換する
                      	;=================================================
  76AB                	SWAP_ARGS:
  76AB  2AEE7C        		LD	HL,(ARG0)			;
  76AE  E5            		PUSH	HL				;
  76AF  2AF07C        		LD	HL,(ARG1)			;
  76B2  22EE7C        		LD	(ARG0),HL			;
  76B5  E1            		POP	HL				;
  76B6  22F07C        		LD	(ARG1),HL			;
  76B9  C9            		RET					;
                      	
                      	;=================================================
                      	;[CMD]クラスタ内の全セクタをゼロクリアする
                      	;IN  HL=クラスタ＃,IX=バッファ構造体
                      	;OUT 
                      	;=================================================
  76BA                	CLR_CLSTR:
  76BA  CDC26A        		CALL	DW0_PUSH			;セクタ＃を退避
  76BD  CD3869        		CALL	GET_FIRST_SCTR			;
  76C0  CD5F64        		CALL	CLR_BFFR			;バッファIXをゼロクリアする
  76C3  3A397D        		LD	A,(SCTRS_PER_CLSTR)		;
  76C6  47            		LD	B,A				;B<-１クラスタあたりのセクタ数
  76C7  C5            	.L1:	PUSH	BC				;
  76C8  217C7D        		LD	HL,DW0				;バッファ構造体のセクタ＃を更新する
  76CB  DDE5          		PUSH	IX				;
  76CD  D1            		POP	DE				;
  76CE  CDB66A        		CALL	DW_COPY				;(IX+0)<-(DW0)
  76D1  DD3606FF      		LD	(IX+IDX_BUPD),TRUE		;バッファの更新フラグを立てる
  76D5  CD9264        		CALL	SAVE_BFFR			;バッファIXを書き込む
  76D8  CD8F6B        		CALL	DW0_INC				;セクタ＃++
  76DB  C1            		POP	BC				;
  76DC  10E9          		DJNZ	.L1				;
  76DE  CDE86A        		CALL	DW0_POP				;セクタ＃を復帰
  76E1  C9            		RET
                      	
                      	;=================================================
                      	;[CMD]文字列式の結果が格納されたアドレスを(ARG0)にセットする
                      	;IN  
                      	;OUT (ARG0),HL=TP
                      	;=================================================
  76E2                	STR2ARG0:
  76E2  CDC167        		CALL	STR2BUFF			;
  76E5  113DFF        		LD	DE,STR_BUFF			;
  76E8  ED53EE7C      		LD	(ARG0),DE			;
  76EC  C9            		RET					;
                      	
[EOF:CMD.asm]
                      	INCLUDE	"STR.asm"				;文字列処理
                      	
                      	;=================================================
                      	;[STR]".",".."文字列の判別
                      	;IN  HL=TP
                      	;OUT (DIR_ENTRY)
                      	;・文字列が"."あるいは".."の場合にのみ(DIR_ENTRY)にセットされる
                      	;=================================================
  76ED                	IS_DOT:
  76ED  E5            		PUSH	HL				;TP退避
  76EE  060B          		LD	B,DNAME_SIZE			;B<-ファイル名全体の長さ
  76F0  7E            		LD	A,(HL)				;A<-先頭の文字
  76F1  FE2E          		CP	"."				;
  76F3  201E          		JR	NZ,.EXIT			;"."でなければ終了
  76F5  CD7077        		CALL	SFN_ADD_STR			;ディレクトリエントリバッファにセット
  76F8  05            		DEC	B				;=残りの文字数
  76F9  7E            		LD	A,(HL)				;
  76FA  FE2E          		CP	"."				;
  76FC  2005          		JR	NZ,.L2				;"."
  76FE  CD7077        		CALL	SFN_ADD_STR			;".."
  7701  05            		DEC	B				;
  7702  7E            		LD	A,(HL)				;
  7703  CDA877        	.L2:	CALL	IS_EOT				;"."の後に文字が続いたらエラー
  7706  2805          		JR	Z,.L1				;
  7708  1E05          		LD	E,ILLEGAL_FUNCTION_CALL		;
  770A  C3F93B        		JP	ERROR				;
                      	
  770D  CD7F77        	.L1:	CALL	SFN_ADD_SPC			;Bの数だけ出力先に空白を加える
  7710  C1            		POP	BC				;退避していたTPを捨てる
  7711  C1            		POP	BC				;CALLの戻り先を捨てる
  7712  C9            		RET					;
                      	
  7713  E1            	.EXIT:	POP	HL				;TP復帰
  7714  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]文字列を8.3形式ファイル名に変換する
                      	;IN  HL=TP
                      	;OUT (DNAME+1)=8.3形式ファイル名,HL=文字列のポインタ
                      	;・最初に現れたピリオドは、(8-n)個の空白に置き換える
                      	;・２番目以降のピリオドは無視
                      	;=================================================
  7715                	STR2SFN:
  7715  110F7D        		LD	DE,DNAME			;DE<-文字列の出力先
  7718  EB            		EX	DE,HL				;出力先の中身をNULLにする
  7719  CDAD77        		CALL	NULL_STR			;
  771C  EB            		EX	DE,HL				;
  771D  CDED76        		CALL	IS_DOT				;"..","."の判別
  7720  AF            		XOR	A				;A'=文字数カウンタ
  7721  08            		EX	AF,AF'				;A'<-0
  7722  0608          		LD	B,08H				;ここからファイル名部
  7724  7E            	.L1:	LD	A,(HL)				;A<-(TP)
  7725  CDA877        		CALL	IS_EOT				;二重引用符か00Hなら
  7728  2805          		JR	Z,.L7				;残りのファイル名部を20Hで埋める ！拡張子解析部でも利用するためHLは動かさない！
  772A  FE2E          		CP	"."				;ピリオドなら！HLを進めて！残りのファイル名部を20Hで埋める
  772C  2006          		JR	NZ,.L4				;それ以外なら文字列(DNAME)に文字Aを加える
  772E  23            		INC	HL				;TP++
  772F  CD7F77        	.L7:	CALL	SFN_ADD_SPC			;Bの数だけ出力先に空白を加える
  7732  1808          		JR	.L2				;
                      	
  7734  CD7077        	.L4:	CALL	SFN_ADD_STR			;(DNAME)に文字Aを加える
  7737  CD6C77        		CALL	.COUNT				;文字数A'++
  773A  10E8          		DJNZ	.L1				;
  773C  0603          	.L2:	LD	B,03H				;ここから拡張子部
  773E  7E            	.L3:	LD	A,(HL)				;A<-(TP)
  773F  CDA877        		CALL	IS_EOT				;
  7742  2005          		JR	NZ,.L5				;二重引用符か00Hなら
  7744  CD7F77        		CALL	SFN_ADD_SPC			;Bの数だけ出力先に空白を加える
  7747  181A          		JR	.EXIT				;終了へ
                      	
  7749  FE2E          	.L5:	CP	"."				;！重要！拡張子部にピリオドがあれば全てスキップする
  774B  2003          		JR	NZ,.L6				;
  774D  23            		INC	HL				;TP++
  774E  18EE          		JR	.L3				;
  7750  CD7077        	.L6:	CALL	SFN_ADD_STR			;(DNAME)に文字Aを加える
  7753  CD6C77        		CALL	.COUNT				;文字数A'++
  7756  10E6          		DJNZ	.L3				;
  7758  7E            		LD	A,(HL)				;ファイル名の最大文字数を超えて入力していたらエラーにする
  7759  CDA877        		CALL	IS_EOT				;
  775C  2805          		JR	Z,.EXIT				;
  775E  1E05          		LD	E,ILLEGAL_FUNCTION_CALL		;
  7760  C3F93B        		JP	ERROR				;
                      	
  7763  08            	.EXIT:	EX	AF,AF'				;A'=文字数カウンタ
  7764  B7            		OR	A				;出力された文字列の文字数が０ならエラー
  7765  C0            		RET	NZ				;
  7766  214878        		LD	HL,MSG_NO_NAME			;
  7769  C30A6A        		JP	ERR				;
                      	
  776C  08            	.COUNT:	EX	AF,AF'				;文字数カウンタ++
  776D  3C            		INC	A				;
  776E  08            		EX	AF,AF'				;
  776F  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]ファイル名用文字列に１文字追加する
                      	;IN  A=文字コード,HL=TP,DE=出力先のポインタ
                      	;=================================================
  7770                	SFN_ADD_STR:
  7770  CD8A77        		CALL	FIX_CHR				;文字コードを修正
  7773  CD9377        		CALL	IS_NGCHR			;使用できない文字を検出
  7776  4F            		LD	C,A				;
  7777  EB            		EX	DE,HL				;
  7778  CDBA77        		CALL	ADD_STR				;出力先に文字を加える
  777B  EB            		EX	DE,HL				;
  777C  13            		INC	DE				;出力先のポインタを進める
  777D  23            		INC	HL				;テキストポインタを進める
  777E  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]ファイル名用文字列に空白を指定数だけ追加する
                      	;IN  B=追加する数,HL=TP,DE=出力先のポインタ
                      	;=================================================
  777F                	SFN_ADD_SPC:
  777F  0E20          		LD	C,SPC				;
  7781  EB            		EX	DE,HL				;HL=出力先のポインタ,DE=TP
  7782  CDBA77        	.L1:	CALL	ADD_STR				;(DEST)+=20H
  7785  23            		INC	HL				;出力先のポインタを進める
  7786  10FA          		DJNZ	.L1				;
  7788  EB            		EX	DE,HL				;HL=TP,DE=出力先のポインタ
  7789  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]大文字化と"^"->"~"の修正
                      	;IN  A=文字コード
                      	;OUT A=修正された文字コード
                      	;=================================================
  778A                	FIX_CHR:
  778A  CDC15F        		CALL	CAPITAL				;大文字化
  778D  FE5E          		CP	"^"				;"^"を、キーボードから入力できない文字"~"に変換する
  778F  C0            		RET	NZ				;
  7790  3E7E          		LD	A,"~"				;
  7792  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]エントリ名に使用できない文字チェック
                      	;IN  A=対象の文字
                      	;OUT Z=1:NG文字と一致した
                      	;=================================================
  7793                	IS_NGCHR:
  7793  C5            		PUSH	BC				;
  7794  E5            		PUSH	HL				;
  7795  219078        		LD	HL,NG_CHR			;
  7798  010C00        		LD	BC,NG_CHR_END - NG_CHR		;BC<-NG_CHRの総文字数
  779B  EDB1          		CPIR					;
  779D  2803          		JR	Z,.ERR				;
  779F  E1            		POP	HL				;
  77A0  C1            		POP	BC				;
  77A1  C9            		RET					;
                      	
  77A2  215078        	.ERR:	LD	HL,MSG_NG_CHR			;
  77A5  C30A6A        		JP	ERR				;
                      	
                      	;=================================================
                      	;[STR]二重引用符＆00Hのチェック 引数の文字列解析に使用される
                      	;IN  A=文字コード
                      	;OUT Z=1:文字列終了
                      	;=================================================
  77A8  FE22          	IS_EOT:	CP	DQUOTE				;Aが二重引用符または0ならZ<-1
  77AA  C8            		RET	Z				;
  77AB  B7            		OR	A				;
  77AC  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]指定された固定長文字列全体を文字で埋める
                      	;IN  HL=固定長文字列のポインタ,C=文字コード
                      	;OUT
                      	;=================================================
  77AD                	NULL_STR:
  77AD  0E00          		LD	C,00H				;
  77AF                	FILL_STR:
  77AF  C5            		PUSH	BC				;
  77B0  E5            		PUSH	HL				;
  77B1  46            		LD	B,(HL)				;
  77B2  23            		INC	HL				;
  77B3  71            	.L1:	LD	(HL),C				;
  77B4  23            		INC	HL				;
  77B5  10FC          		DJNZ	.L1				;
  77B7  E1            		POP	HL				;
  77B8  C1            		POP	BC				;
  77B9  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]固定長文字列の最初のNULL部分を文字で置き換える
                      	;NULL部分が無い場合は無視される
                      	;IN  HL=文字変数のポインタ,C=追加する文字コード
                      	;OUT　
                      	;=================================================
  77BA                	ADD_STR:
  77BA  C5            		PUSH	BC				;
  77BB  E5            		PUSH	HL				;
  77BC  46            		LD	B,(HL)				;B<-文字列長
  77BD  23            	.L2:	INC	HL				;
  77BE  7E            		LD	A,(HL)				;ポインタが示す値が00Hなら、その位置にCをセットする
  77BF  B7            		OR	A				;それ以外なら00Hが見つかるまで繰り返す
  77C0  2003          		JR	NZ,.L3				;
  77C2  71            		LD	(HL),C				;
  77C3  1802          		JR	.EXIT				;
  77C5  10F6          	.L3:	DJNZ	.L2				;
  77C7  E1            	.EXIT:	POP	HL				;
  77C8  C1            		POP	BC				;
  77C9  C9            		RET					;
                      	
[EOF:STR.asm]
                      	INCLUDE "MESSAGES.asm"				;メッセージ文字列
                      	;=================================================
                      	;文字列
                      	;=================================================
                      	
  77CA                	MSG_TITLE:
  77CA  0C3C2053442D44		DB	CL,"< SD-DOS 2020/MAR/8 >",CR,LF,EOL
        4F532032303230	
        2F4D41522F3820	
        3E0D0A00      	
                      	
  77E3                	MSG_NOT_FOUND:
  77E3  4E6F7420666F75		DB	"Not found",EOL
        6E6400        	
                      	
  77ED                	MSG_NOT_SUPPORTED_EXT:
  77ED  42616420455854		DB	"Bad EXT",EOL
        00            	
                      	
  77F5                	MSG_NG_NAME:
  77F5  4E47206E616D65		DB	"NG name",EOL
        00            	
                      	
  77FD                	MSG_SCTR_OVERFLOW:
  77FD  4F766572666C6F		DB	"Overflow",EOL
        7700          	
                      	
  7806                	MSG_MEMORY_CONFLICT:
  7806  0D0A5573652027		DB	CR,LF,"Use ",SQUOTE,"CLEAR",SQUOTE,EOL
        434C4541522700	
                      	
  7814                	MSG_BAD_FORMAT:
  7814  42616420666F72		DB	"Bad format",EOL
        6D617400      	
                      	
  781F                	MSG_NOT_FAT16:
  781F  4E6F7420464154		DB	"Not FAT16",EOL
        313600        	
                      	
                      	;MSG_OVERWRITE:
                      	;	DB	"Overwrite",EOL
                      	
  7829                	MSG_CANCELED:
  7829  43616E63656C65		DB	"Canceled",CR,LF,EOL
        640D0A00      	
                      	
  7834                	MSG_EMPTY_FILE:
  7834  456D70747900  		DB	"Empty",EOL
                      	
  783A                	MSG_MEDIA_FULL:
  783A  46756C6C00    		DB	"Full",EOL
                      	
  783F                	MSG_DIR_FULL:
  783F  4469722046756C		DB	"Dir Full",EOL
        6C00          	
                      	;	DB	"use ",SQUOTE,"CMD EX",SQUOTE,EOL
                      	
  7848                	MSG_NO_NAME:
  7848  4E6F206E616D65		DB	"No name",EOL
        00            	
                      	
  7850                	MSG_NG_CHR:
  7850  4E472063687200		DB	"NG chr",EOL
                      	
  7857                	MSG_KILL_FILE:
  7857  44656C65746500		DB	"Delete",EOL
                      	
  785E                	MSG_EXISTS:
  785E  45786973747300		DB	"Exists",EOL
                      	
  7865                	MSG_EXPAND:
  7865  457870616E6400		DB	"Expand",EOL
                      	
  786C                	MSG_READ_ONLY:
  786C  50726F74656374		DB	"Protected",EOL
        656400        	
[EOF:MESSAGES.asm]
                      	INCLUDE	"ERROR.asm"				;エラー処理
                      	
                      	;=================================================
                      	;[ERROR]指定されたエントリ名が見つからない
                      	;=================================================
  7876                	ERR_NOT_FOUND:	
  7876  21E377        		LD	HL,MSG_NOT_FOUND		;
  7879  C30A6A        		JP	ERR				;
                      	
                      	;=================================================
                      	;[ERROR]ファイルがカラ
                      	;=================================================
  787C                	ERR_EMPTY_FILE:
  787C  213478        		LD	HL,MSG_EMPTY_FILE		;
  787F  C30A6A        		JP	ERR				;
                      	
                      	;=================================================
                      	;[ERROR]エントリがすでに存在する
                      	;=================================================
  7882                	ERR_EXISTS:
  7882  215E78        		LD	HL,MSG_EXISTS			;
  7885  C30A6A        		JP	ERR				;
[EOF:ERROR.asm]
                      	
                      	;=================================================
                      	;固定データ
                      	;=================================================
                      	
  7888                	FAT_CODE:
  7888  46415431362020		DB	"FAT16   "			;FAT識別コード
        20            	
                      	
  7890                	NG_CHR:
  7890  3B5B5D3A22    		DB	";" , "[" , "]" , ":" , DQUOTE	;エントリ名に使用できない文字
  7895  3B7C3D2C5C    		DB	";" , "|" , "=" , "," , "\"	;
  789A  202F          		DB	" " , "/"			;
  789C                	NG_CHR_END	EQU	$			;
                      	
                      	
  789C                	CMD_TABLE:
  789C  4600          		DB	"F",EOL				;CMD F フリーエリア拡張
  789E  9500          		DB	95H,EOL				;CMD ON インフォメーションスイッチ オン 95H="ON"の中間言語コード
  78A0  4F464600      		DB	"OFF",EOL			;CMD OFF インフォメーションスイッチ オフ
  78A4  5000          		DB	"P",EOL				;CMD P プロパティ表示
  78A6  5200          		DB	"R",EOL				;CMD R ファイル実行
  78A8  5600          		DB	"V",EOL				;CMD V チェックサム算出
  78AA  435000        		DB	"CP",EOL			;CMD CP ファイルコピー
  78AD  4400          		DB	"D",EOL				;CMD D セクタダンプ
  78AF  455800        		DB	"EX",EOL			;CMD EX サブディレクトリ拡張
  78B2  4D4400        		DB	"MD",EOL			;CMD MD サブディレクトリ作成
  78B5  5300          		DB	"S",EOL				;CMD S ディレクトリエントリ名でセクタダンプ
  78B7  00            		DB	EOL				;END MARKER
                      	
  78B8                	JUMP_TABLE:
  78B8  0275          		DW	CMD_F				;
  78BA  2375          		DW	CMD_ON				;
  78BC  3C75          		DW	CMD_OFF				;
  78BE  0875          		DW	CMD_P				;
  78C0  4075          		DW	CMD_R				;
  78C2  D674          		DW	CMD_V				;
  78C4  7518          	JT_CP:	DW	DISKB_ERR			;
  78C6  7518          	JT_D:	DW	DISKB_ERR			;
  78C8  7518          	JT_EX:	DW	DISKB_ERR			;
  78CA  7518          	JT_MD:	DW	DISKB_ERR			;
  78CC  7518          	JT_S:	DW	DISKB_ERR			;
                      	
  78CE                	EXT_LOAD_TABLE:					;ファイル読み込み用サブルーチンテーブル
                      							;・拡張子 3BYTE,ジャンプ先アドレス 2BYTE
  78CE  434D54        		DB	"CMT"				;
  78D1  196E          		DW	READ_CMT			;
  78D3  42494E        		DB	"BIN"				;
  78D6  D270          		DW	READ_BIN			;
  78D8  424153        		DB	"BAS"				;
  78DB  2472          		DW	READ_BAS			;
  78DD  00            		DB	EOL				;
                      	
  78DE                	EXT_SAVE_TABLE:					;ファイル書き込み用サブルーチンテーブル
                      							;・拡張子 3BYTE,ジャンプ先アドレス 2BYTE
  78DE  434D54        		DB	"CMT"				;
  78E1  716F          		DW	WRITE_CMT			;
  78E3  42494E        		DB	"BIN"				;
  78E6  D271          		DW	WRITE_BIN			;
  78E8  424153        		DB	"BAS"				;
  78EB  6372          		DW	WRITE_BAS			;
  78ED  00            		DB	EOL				;
                      	
                      	;DEFAULT_EXT:					;
                      	;	DB	"CMT"				;
                      	
                      	;=================================================
                      	;ワークエリア
                      	;=================================================
                      	
  78EE                	WORK_AREA:
                      	
  78EE                	FAT_BFFR:	DS	200H			;FATバッファ
  7AEE                	FILE_BFFR:	DS	200H			;ファイルバッファ
                      	
  7CEE                	ARG0:		DS	02H			;コマンドの入力パラメータ
  7CF0                	ARG1:		DS	02H			;
  7CF2                	ARG2:		DS	02H			;
  7CF4                	ARG3:		DS	02H			;
  7CF6                	ARGNUM:		DS	01H			;有効な入力パラメータの数 0~3
                      	
  7CF7                	EXECFLG:	DS	01H			;ロード後実行フラグ
  7CF8                	EXECADR:	DS	02H			;ロード後実行アドレス
                      	
  7CFA                	FAT1_BFFR_STRCT:				;バッファ構造体（FAT用）
  7CFA                		.SCTR:	DS	04H			;+00 セクタ＃
  7CFE                		.BP:	DS	02H			;+04 バッファポインタ
  7D00                		.FLG:	DS	01H			;+06 更新フラグ
  7D01                	FAT2_BFFR_STRCT:				;バッファ構造体（FAT2用）
  7D01                		.SCTR:	DS	04H			;+00 セクタ＃
  7D05                		.BP:	DS	02H			;+04 バッファポインタ
  7D07                		.FLG:	DS	01H			;+06 更新フラグ
  7D08                	FILE_BFFR_STRCT:				;バッファ構造体（ファイル、ディレクトリ兼用）
  7D08                		.SCTR:	DS	04H			;+00 セクタ＃
  7D0C                		.BP:	DS	02H			;+04 バッファポインタ
  7D0E                		.FLG:	DS	01H			;+06 更新フラグ
                      	
  7D0F                	DNAME:		DS	01H			;DNAMEの文字数指定部 ！DIR_ENTRYの直前に置くこと！
  7D10                	DIR_ENTRY:	DS	20H			;+00 ディレクトリエントリ情報
  7D30                	DIR_ENTRY.SCTR:	DS	04H			;+32 収録先のセクタ＃
  7D34                	DIR_ENTRY.BP:	DS	02H			;+36 バッファポインタ
                      	
  7D36                	FOUND:		DS	01H			;指定されたディレクトリエントリが見つかったらTRUEになる
  7D37                	BPB:		DS	13H			;BPB保存エリア
  7D4A                	PP_SCTR:	DS	04H			;プライマリパーティションの開始セクタ＃
  7D4E                	ROOT_SCTR_SIZE:	DS	01H			;ルートディレクトリの総セクタ数
  7D4F                	FAT_SCTR:	DS	04H			;FATの開始セクタ＃ BPB+3をコピーしてDWORD化する
  7D53                	ROOT_SCTR:	DS	04H			;ルートディレクトリの開始セクタ＃
  7D57                	DATA_SCTR:	DS	04H			;データエリアの開始セクタ＃
                      	
  7D5B                	WDIR_CLSTR:	DS	02H			;ワーキングディレクトリの開始クラスタ＃
  7D5D                	WDIR_ORG:	DS	02H			;ワーキングディレクトリの開始クラスタ＃退避用
  7D5F                	TGT_CLSTR:	DS	02H			;ターゲット（ファイルまたはサブディレクトリ）の開始クラスタ＃
                      	
  7D61                	FP:		DS	04H			;ファイルポインタ
  7D65                	FP_CLSTR:	DS	02H			;FPと結びつくファイルのカレントクラスタ＃。FPと連動して変化する
  7D67                	FP_CLSTR_SN:	DS	02H			;FPが示すアドレスが、先頭から何番目のクラスタに含まれるかを示す！クラスタ＃ではない！
  7D69                	FP_SCTR_SN:	DS	01H			;FPが示すアドレスが、クラスタ内の何番目のセクタに含まれるかを示す！セクタ＃ではない！
                      	
  7D6A                	ATRB:		DS	01H			;ファイル属性表示用文字列の文字数指定部
  7D6B                			DS	06H			;ファイル属性表示用文字列本体
                      	
  7D71                	FIREWALL:	DS	02H			;マシン語がこのアドレスより先に侵入しないようにする
                      	
  7D73                	TIMEOUT:	DS	01H			;MMCタイムアウトカウンタ
  7D74                	MMCADR0:	DS	01H			;MMCアドレス LSB
  7D75                	MMCADR1:	DS	01H			;
  7D76                	MMCADR2:	DS	01H			;
  7D77                	MMCADR3:	DS	01H			;MMCアドレス MSB
                      	
  7D78                	DWA:		DS	04H			;汎用ダブルワード変数
  7D7C                	DW0:		DS	04H			;ダブルワード変数
  7D80                	DW1:		DS	04H			;ダブルワード変数
  7D84                	DW_SP_ORG:	DS	02H			;ダブルワード用スタックポインタの一時退避エリア
  7D86                	DW_SP:		DS	02H			;ダブルワード用スタックポインタ
  7D88                			DS	10H			;ダブルワード用スタックエリア
  7D98                	DW_STACK	EQU	$			;
                      	
  7D98                	CP_SCTR:	DS	04H			;コピー先セクタ＃
  7D9C                	CP_DENT:	DS	20H			;コピー先ディレクトリエントリ
  7DBC                	CP_DENT.SCTR:	DS	04H			;コピー先ディレクトリエントリのセクタ＃
  7DC0                	CP_DENT.BP:	DS	02H			;コピー先ディレクトリエントリのバッファポインタ
                      	
  7DC2                	CHECKSUM:	DS	02H			;チェックサム用
  7DC4                	INFO_SW:	DS	01H			;インフォメーション表示モード
  7DC5                	IS_CALLBACK:	DS	01H			;コールバック実行フラグ
  7DC6                	CALLBACK:	DS	02H			;コールバックアドレス
                      	
  7DC8                	INFO_BUF:	DS	10H			;情報出力用文字列バッファ
                      	
  7DD8                	FREE_AREA	EQU	$			;フリーエリア開始アドレス
                      	
                      	
                      	;-----------------------------
                      	
                      	;BPBから求められる値
  7D39                	SCTRS_PER_CLSTR	EQU	BPB+2			;１クラスタ当たりのセクタ数	  40H
  7D3A                	FAT_START	EQU	BPB+3			;FAT開始セクタ＃		0008H
  7D3D                	ROOT_SIZE	EQU	BPB+6			;総ルートディレクトリ数		0200H
  7D42                	FAT_SIZE	EQU	BPB+11			;FAT１面に必要なセクタ数	00F0H
                      	
                      	
                      	;-----------------------------
                      	
                      	INCLUDE	"EXT.asm"				;拡張命令群
                      	
                      	;=================================================
                      	;拡張コマンド
                      	;=================================================
                      	
                      	
  C000                		ORG	0C000H
                      	
  C000                	INIT_EXT_CMD:
  C000  212EC0        		LD	HL,CMD_D
  C003  22C678        		LD	(JT_D),HL
  C006  210BC1        		LD	HL,CMD_S
  C009  22CC78        		LD	(JT_S),HL
  C00C  2142C1        		LD	HL,CMD_CP
  C00F  22C478        		LD	(JT_CP),HL
  C012  2148C2        		LD	HL,CMD_MD
  C015  22CA78        		LD	(JT_MD),HL
  C018  21F2C2        		LD	HL,CMD_EX
  C01B  22C878        		LD	(JT_EX),HL
                      	
  C01E  CD506A        		CALL	IPRINT
  C021  52454144592021		DB	"READY !",CR,LF,EOL
        0D0A00        	
                      	
  C02B  C38100        		JP	BASIC
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD D命令 "DUMP"
                      	;・セクタ＃は８桁の16進文字列で指定する
                      	; CMD D			直前のセクタ＃をダンプ
                      	; CMD D "00000008"	指定されたセクタ＃をダンプ
                      	; CMD D SC$
                      	;=================================================
  C02E                	CMD_D:
  C02E  2B            		DEC	HL				;テキストポインタを１つ戻す
  C02F  D7            		RST	10H				;
  C030  B7            		OR	A				;
  C031  2823          		JR	Z,.L2				;
  C033  CDC167        		CALL	STR2BUFF			;
  C036  E5            		PUSH	HL				;TP退避
  C037  213DFF        		LD	HL,STR_BUFF			;
  C03A  117F7D        		LD	DE,DW0+03H			;DE<-ダブルワードのMSB
  C03D  0604          		LD	B,04H				;B<-8桁 / 2
  C03F  D5            	.L1:	PUSH	DE				;
  C040  7E            		LD	A,(HL)				;
  C041  CDEF69        		CALL	IS_HEX				;
  C044  57            		LD	D,A				;
  C045  23            		INC	HL				;
  C046  7E            		LD	A,(HL)				;
  C047  CDEF69        		CALL	IS_HEX				;
  C04A  5F            		LD	E,A				;
  C04B  23            		INC	HL				;
  C04C  CDA05E        		CALL	CNVHEXBYTE			;A<-文字コードD,Eをバイナリ変換した値
  C04F  D1            		POP	DE				;
  C050  12            		LD	(DE),A				;ダブルワード(DW0)のMSB側から値をセットしていく
  C051  1B            		DEC	DE				;
  C052  10EB          		DJNZ	.L1				;
  C054  1801          		JR	.L3
                      	
  C056  E5            	.L2:	PUSH	HL				;
  C057  CD3968        	.L3:	CALL	IS_FAT16			;
  C05A  CD60C0        		CALL	DUMP_SCTR			;メインルーチン
  C05D  C3A776        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[DUMP]セクタをダンプ出力する
                      	;IN  (DW0)=セクタ＃
                      	;=================================================
  C060                	DUMP_SCTR:
  C060  CD3968        		CALL	IS_FAT16			;
  C063  3E50          		LD	A,80				;WIDTH 80,??
  C065  CDA309        		CALL	WIDTH_X				;
  C068  DD21087D      		LD	IX,FILE_BFFR_STRCT		;=ファイルバッファ構造体
  C06C  CD7064        	.L4:	CALL	LOAD_BFFR			;(DW0)セクタをファイルバッファに読み込む
  C06F  2A0C7D        		LD	HL,(FILE_BFFR_STRCT.BP)		;HL<-ファイルバッファの先頭アドレス
  C072  0E02          		LD	C,02H				;１セクタは２ページ構成
  C074  1600          		LD	D,00H				;オフセット値表示用カウンタ
  C076  CDCFC0        	.L3:	CALL	.HEADER				;画面消去とセクタ＃表示
  C079  0610          		LD	B,10H				;=行数
  C07B  C5            	.L2:	PUSH	BC				;行数を退避
  C07C  7A            		LD	A,D				;オフセット値を表示
  C07D  CDC55E        		CALL	PRTAHEX				;
  C080  CD506A        		CALL	IPRINT				;
  C083  30203A00      		DB	"0 :",EOL			;
  C087  14            		INC	D				;カウンタ++
  C088  0610          		LD	B,10H				;=列数
  C08A  E5            		PUSH	HL				;バッファのアドレスを退避
  C08B  C5            	.L1:	PUSH	BC				;列数を退避
  C08C  7E            		LD	A,(HL)				;A<-(バッファ)
  C08D  CDC55E        		CALL	PRTAHEX				;16進数で表示
  C090  CDD45F        		CALL	PUT_SPC				;空白
  C093  23            		INC	HL				;アドレス++
  C094  C1            		POP	BC				;列数を復帰
  C095  10F4          		DJNZ	.L1				;B--
  C097  CDD45F        		CALL	PUT_SPC				;空白
  C09A  0610          		LD	B,10H				;=列数
  C09C  E1            		POP	HL				;バッファのアドレスを復帰
  C09D  C5            	.L6:	PUSH	BC				;列数を退避
  C09E  7E            		LD	A,(HL)				;A<-(バッファ)
  C09F  FE20          		CP	20H				;
  C0A1  3002          		JR	NC,.L7				;
  C0A3  3E2E          		LD	A,"."				;
  C0A5  DF            	.L7	RST	18H				;
  C0A6  23            		INC	HL				;
  C0A7  C1            		POP	BC				;
  C0A8  10F3          		DJNZ	.L6				;B--
  C0AA  CDCA5F        		CALL	PUT_CR				;改行
  C0AD  C1            		POP	BC				;行数を復帰
  C0AE  10CB          		DJNZ	.L2				;B--
  C0B0  CD750F        		CALL	KEYWAIT				;１文字入力待ち
  C0B3  FE03          		CP	03H				;STOP
  C0B5  C8            		RET	Z				;終了
  C0B6  FE08          		CP	BS				;BACKSPACE
  C0B8  200D          		JR	NZ,.L5				;
  C0BA  0D            		DEC	C				;２ページ目なら１ページ目に戻す
  C0BB  28AF          		JR	Z,.L4				;
  C0BD  CDA66B        		CALL	DW0_DEC				;セクタ＃--
  C0C0  30AA          		JR	NC,.L4				;キャリーフラグが立てば00000000Hに戻す
  C0C2  CD8F6B        		CALL	DW0_INC				;
  C0C5  18A5          		JR	.L4				;
                      	
  C0C7  0D            	.L5:	DEC	C				;ページ数--
  C0C8  20AC          		JR	NZ,.L3				;
  C0CA  CD8F6B        		CALL	DW0_INC				;セクタ＃++
  C0CD  189D          		JR	.L4				;
                      	
  C0CF                	.HEADER:
  C0CF  C5            		PUSH	BC				;
  C0D0  E5            		PUSH	HL				;
  C0D1  3E0C          		LD	A,0CH				;画面消去
  C0D3  DF            		RST	18H				;
  C0D4  CD506A        		CALL	IPRINT				;
  C0D7  202020203A00  		DB	"    :",EOL			;
  C0DD  010010        		LD	BC,1000H			;B<-10H,C<-00H
  C0E0  3E2B          	.L10:	LD	A,"+"				;"+0 +1 ... +F "
  C0E2  DF            		RST	18H				;
  C0E3  79            		LD	A,C				;
  C0E4  FE0A          		CP	10				;
  C0E6  3802          		JR	C,.L11				;
  C0E8  C607          		ADD	A,07H				;
  C0EA  C630          	.L11:	ADD	A,"0"				;
  C0EC  DF            		RST	18H				;
  C0ED  CDD45F        		CALL	PUT_SPC				;
  C0F0  0C            		INC	C				;
  C0F1  10ED          		DJNZ	.L10				;
  C0F3  CD506A        		CALL	IPRINT				;
  C0F6  20534543544F52		DB	" SECTOR=",EOL			;
        3D00          	
  C0FF  217C7D        		LD	HL,DW0				;セクタ＃を表示
  C102  CD676A        		CALL	PRT_DW_HEX			;
  C105  CDCA5F        		CALL	PUT_CR				;
  C108  E1            		POP	HL				;
  C109  C1            		POP	BC				;
  C10A  C9            		RET					;
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD S 命令 "SOURCE"
                      	; CMD S "FILE.EXT"	ファイルの開始セクタをダンプ
                      	; CMD S "/"		ルートディレクトリの開始セクタをダンプ
                      	; CMD S FN$
                      	;=================================================
  C10B                	CMD_S:
  C10B  CDE276        		CALL	STR2ARG0			;
  C10E  E5            		PUSH	HL				;
  C10F  CD3968        		CALL	IS_FAT16			;
  C112  CDBD64        		CALL	CHANGE_WDIR			;
  C115  22EE7C        		LD	(ARG0),HL			;
  C118  7E            		LD	A,(HL)				;
  C119  CDA877        		CALL	IS_EOT				;エントリ名が空か？
  C11C  2008          		JR	NZ,.L1				;
  C11E  2A5B7D        		LD	HL,(WDIR_CLSTR)			;エントリ名が空ならワーキングディレクトリのクラスタ＃を使う
  C121  CD3869        		CALL	GET_FIRST_SCTR			;
  C124  1813          		JR	.L2				;
                      	
  C126  0E00          	.L1:	LD	C,00H				;
  C128  CD6365        		CALL	GET_DENT			;
  C12B  CA7678        		JP	Z,ERR_NOT_FOUND			;存在しなければエラー
  C12E  2A2A7D        		LD	HL,(DIR_ENTRY+IDX_FAT)		;=一致したファイルのFATエントリ
  C131  7C            		LD	A,H				;FATエントリが0000Hなら空ファイルなのでエラーへ
  C132  B5            		OR	L				;
  C133  CA7C78        		JP	Z,ERR_EMPTY_FILE		;
  C136  CD3869        		CALL	GET_FIRST_SCTR			;
  C139  CD60C0        	.L2:	CALL	DUMP_SCTR			;メインルーチン
  C13C  CD5065        		CALL	RESTORE_WDIR			;
  C13F  C3A776        		JP	CLOSE_CMD
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD CP 命令 ファイルをコピーする
                      	; CMD CP "/DIR/FROM.EXT","/DIR/TO.EXT"
                      	;=================================================
  C142                	CMD_CP:
  C142  CD8E76        		CALL	GET_2STR_ARGS			;(ARG0)=コピー元,(ARG1)=コピー先
  C145  E5            		PUSH	HL				;
  C146  CD3968        		CALL	IS_FAT16			;
  C149  21787D        		LD	HL,DWA				;(DWA)<-セクタサイズ
  C14C  010000        		LD	BC,0000H			;
  C14F  110002        		LD	DE,SCTR_SIZE			;
  C152  CD7F6A        		CALL	DW_LD				;
  C155  CDAB76        		CALL	SWAP_ARGS			;(ARG0)<->(ARG1)
  C158  0E20          		LD	C,ATRB_FILE			;
  C15A  CDA775        		CALL	PREP_DENT			;
  C15D  CD8965        		CALL	IS_READ_ONLY			;
  C160  21107D        		LD	HL,DIR_ENTRY			;ディレクトリエントリバッファの内容をコピー用バッファに転送する
  C163  119C7D        		LD	DE,CP_DENT			;
  C166  012600        		LD	BC,DENT_SIZE+06H		;バッファポインタとセクタ＃も含める
  C169  EDB0          		LDIR					;
  C16B  2A5F7D        		LD	HL,(TGT_CLSTR)			;HL<-コピー先ファイルの先頭クラスタ＃
  C16E  CD3869        		CALL	GET_FIRST_SCTR			;
  C171  217C7D        		LD	HL,DW0				;
  C174  11987D        		LD	DE,CP_SCTR			;
  C177  CDB66A        		CALL	DW_COPY				;
  C17A  CD5065        		CALL	RESTORE_WDIR			;！重要！
  C17D  CDAB76        		CALL	SWAP_ARGS			;(ARG0)<->(ARG1)
  C180  CDBD64        		CALL	CHANGE_WDIR			;
  C183  0E20          		LD	C,ATRB_FILE			;
  C185  CD6365        		CALL	GET_DENT			;
  C188  CA7678        		JP	Z,ERR_NOT_FOUND			;見つからなければエラー
  C18B  212C7D        		LD	HL,DIR_ENTRY+IDX_SIZE		;
  C18E  11617D        		LD	DE,FP				;
  C191  CDB66A        		CALL	DW_COPY				;(FP)<-コピー元ファイルのファイルサイズ
  C194  212C7D        		LD	HL,DIR_ENTRY+IDX_SIZE		;コピー元のファイルサイズをコピー先に転送する
  C197  11B87D        		LD	DE,CP_DENT+IDX_SIZE		;
  C19A  CDB66A        		CALL	DW_COPY				;
  C19D  2A2A7D        		LD	HL,(DIR_ENTRY+IDX_FAT)		;HL<-コピー元ファイルのクラスタ＃
  C1A0  DD21087D      		LD	IX,FILE_BFFR_STRCT		;
                      	
                      		;-----------------------------------------
                      	
  C1A4  E5            	.LOOP:	PUSH	HL				;クラスタ＃退避
  C1A5  CD3869        		CALL	GET_FIRST_SCTR			;(DW0)<-クラスタHLのセクタ＃
  C1A8  3A397D        		LD	A,(SCTRS_PER_CLSTR)		;
  C1AB  47            		LD	B,A				;１クラスタを構成するセクタ数だけループする
  C1AC  C5            	.L1:	PUSH	BC				;カウンタ退避
  C1AD  CD33C2        		CALL	COPY_SCTR			;セクタコピー処理
  C1B0  CD8F6B        		CALL	DW0_INC				;コピー元のセクタ＃++
  C1B3  21987D        		LD	HL,CP_SCTR			;コピー先のセクタ＃++
  C1B6  CD966B        		CALL	DW_INC				;
  C1B9  21617D        		LD	HL,FP				;(FP)<-(FP)-セクタサイズ
  C1BC  11787D        		LD	DE,DWA				;
  C1BF  CD7D6B        		CALL	DW_SUB				;
  C1C2  384D          		JR	C,.EXIT				;(FP) <  0 なら終了へ
  C1C4  CDAE6B        		CALL	DW_DEC				;
  C1C7  3848          		JR	C,.EXIT				;(FP) == 0 なら終了へ
  C1C9  CD966B        		CALL	DW_INC				;
  C1CC  C1            		POP	BC				;カウンタ復帰
  C1CD  10DD          		DJNZ	.L1				;
                      	
                      		;-----------------------------------------
                      	
                      		;コピー先 空きクラスタ検索処理
  C1CF  2A5F7D        		LD	HL,(TGT_CLSTR)			;クラスタHL以外の空きクラスタを探す
  C1D2  CDD163        		CALL	FIND_NULL_CLSTR			;HL<-空きクラスタ＃,CY=1:見つかった
  C1D5  380F          		JR	C,.FOUND			;
  C1D7  2A5F7D        		LD	HL,(TGT_CLSTR)			;空きが見つからなければエラー処理
  C1DA  11FFFF        		LD	DE,0FFFFH			;=FATの終了コード
  C1DD  CD5F63        		CALL	WRITE_FAT_DATA			;書き込み中のクラスタのFATエントリに終了コードをセットする
  C1E0  213A78        		LD	HL,MSG_MEDIA_FULL		;エラー終了
  C1E3  C30A6A        		JP	ERR				;
                      	
  C1E6  ED5B5F7D      	.FOUND:	LD	DE,(TGT_CLSTR)			;DE<-(TGT_CLSTR)=現在のクラスタ＃
  C1EA  225F7D        		LD	(TGT_CLSTR),HL			;(TGT_CLSTR)<-HL=空きクラスタ＃
  C1ED  EB            		EX	DE,HL				;HL=現在のクラスタ＃,DE=空きクラスタ＃
  C1EE  CD5F63        		CALL	WRITE_FAT_DATA			;クラスタHLのFATエントリに空きクラスタDEをセットしリンクさせる
  C1F1  2A5F7D        		LD	HL,(TGT_CLSTR)			;HL<-空きクラスタ＃
  C1F4  CD3869        		CALL	GET_FIRST_SCTR			;(DW0)<-空きクラスタの開始セクタ＃
  C1F7  217C7D        		LD	HL,DW0				;(CP_SCTR)<-(DW0)
  C1FA  11987D        		LD	DE,CP_SCTR			;
  C1FD  CDB66A        		CALL	DW_COPY				;
                      	
                      		;-----------------------------------------
                      	
                      		;コピー元処理
  C200  E1            		POP	HL				;クラスタ＃復帰
  C201  CD9463        		CALL	READ_FAT_DATA			;DE<-クラスタHLの次のクラスタ＃
  C204  D5            		PUSH	DE				;
  C205  E1            		POP	HL				;HL<-次のクラスタ＃
  C206  23            		INC	HL				;判定のため、クラスタ＃に１を加える
  C207  7C            		LD	A,H				;HLが0FFFFHの時、１加えると0000Hになることを利用している
  C208  B5            		OR	L				;
  C209  1E19          		LD	E,BAD_FILE_DATA			;次のクラスタ＃が0FFFFHならエラー
  C20B  CAF93B        		JP	Z,ERROR				;
  C20E  2B            		DEC	HL				;HLを元に戻す
  C20F  1893          		JR	.LOOP				;
                      	
                      		;-----------------------------------------
                      	
  C211  C1            	.EXIT:	POP	BC				;カウンタを捨てる
  C212  E1            		POP	HL				;クラスタ＃を捨てる
  C213  219C7D        		LD	HL,CP_DENT			;コピー用バッファの内容をディレクトリエントリバッファに転送する
  C216  11107D        		LD	DE,DIR_ENTRY			;
  C219  012600        		LD	BC,DENT_SIZE+06H		;
  C21C  EDB0          		LDIR					;
  C21E  CDD965        		CALL	WRITE_DENT			;ディレクトリエントリバッファの内容をメディアに書き込む
  C221  2A5F7D        		LD	HL,(TGT_CLSTR)			;HL<-最終クラスタ＃
  C224  11FFFF        		LD	DE,0FFFFH			;最終クラスタのFATエントリにFFFFHを書き込む
  C227  CD5F63        		CALL	WRITE_FAT_DATA			;
  C22A  CD4564        		CALL	FLUSH_BFFR			;
  C22D  CD5065        		CALL	RESTORE_WDIR			;
  C230  C3A776        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[FS]セクタをコピーする
                      	;IN  IX=バッファ構造体,(DW0)=セクタ＃,(CP_SCTR)=コピー先のセクタ＃
                      	;OUT 
                      	;=================================================
  C233                	COPY_SCTR:
  C233  CD7064        		CALL	LOAD_BFFR			;セクタ(DW0)をファイルバッファに読み込む
  C236  DDE5          		PUSH	IX				;バッファのセクタ情報に、コピー先のセクタ＃をセットする
  C238  D1            		POP	DE				;
  C239  21987D        		LD	HL,CP_SCTR			;
  C23C  CDB66A        		CALL	DW_COPY				;
  C23F  3EFF          		LD	A,TRUE				;バッファの更新フラグを立てる
  C241  DD7706        		LD	(IX+IDX_BUPD),A			;
  C244  CD9264        		CALL	SAVE_BFFR			;バッファ書き込み
  C247  C9            		RET					;
                      	
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD MD命令 サブディレクトリ作成
                      	; CMD MD "/DIR1/DIR2"
                      	; CMD MD SD$
                      	;=================================================
  C248                	CMD_MD:
  C248  CDE276        		CALL	STR2ARG0			;
  C24B  E5            		PUSH	HL				;
  C24C  CD3968        		CALL	IS_FAT16			;
  C24F  DD21087D      		LD	IX,FILE_BFFR_STRCT		;
  C253  CDBD64        		CALL	CHANGE_WDIR			;
  C256  0E00          		LD	C,00H				;
  C258  CD6365        		CALL	GET_DENT			;
  C25B  C28278        		JP	NZ,ERR_EXISTS			;存在していればエラー
  C25E  3E10          		LD	A,ATRB_DIR			;
  C260  321B7D        		LD	(DIR_ENTRY+IDX_ATRB),A		;
  C263  CDB665        		CALL 	TOUCH.NEW			;クラスタ＃と日時情報をセットする
  C266  CD9565        		CALL	SET_DENT_FAT			;
  C269  CDD965        		CALL	WRITE_DENT			;
  C26C  2A5F7D        		LD	HL,(TGT_CLSTR)			;HL<-新規作成されたサブディレクトリの開始クラスタ＃
  C26F  11FFFF        		LD	DE,0FFFFH			;クラスタHLのFATエントリにFFFFHを書き込む
  C272  CD5F63        		CALL	WRITE_FAT_DATA			;
  C275  CD4564        		CALL	FLUSH_BFFR			;全バッファをメディアに書き込む
  C278  2A5F7D        		LD	HL,(TGT_CLSTR)			;
  C27B  CD3869        		CALL	GET_FIRST_SCTR			;
  C27E  CDBA76        		CALL	CLR_CLSTR			;クラスタHLを初期化する
  C281  217C7D        		LD	HL,DW0				;バッファ構造体のセクタ＃<-開始セクタ＃
  C284  DDE5          		PUSH	IX				;
  C286  D1            		POP	DE				;
  C287  CDB66A        		CALL	DW_COPY				;
  C28A  CD6D67        		CALL	CLR_DENT_BFFR			;ディレクトリエントリバッファをクリアし、FATエントリ値とファイルサイズを0にする
  C28D  3E10          		LD	A,ATRB_DIR			;
  C28F  321B7D        		LD	(DIR_ENTRY+IDX_ATRB),A		;
  C292  211E7D        		LD	HL,DIR_ENTRY+IDX_CTIME		;「作成日時」をセットする
  C295  CDFD65        		CALL	SET_DATETIME			;
  C298  21267D        		LD	HL,DIR_ENTRY+IDX_TIME		;「更新日時」をセットする
  C29B  CDFD65        		CALL	SET_DATETIME			;
  C29E  210F7D        		LD	HL,DNAME			;エントリ名を空白で埋める
  C2A1  0E20          		LD	C,SPC				;
  C2A3  CDAF77        		CALL	FILL_STR			;
  C2A6  3E2E          		LD	A,"."				;エントリ名<-"."
  C2A8  32107D        		LD	(DIR_ENTRY+IDX_NAME),A		;
  C2AB  2A5F7D        		LD	HL,(TGT_CLSTR)			;HL<-サブディレクトリ自身のクラスタ＃
  C2AE  EB            		EX	DE,HL				;
  C2AF  212A7D        		LD	HL,DIR_ENTRY+IDX_FAT		;ディレクトリエントリバッファのFATエントリ<-自身のクラスタ＃
  C2B2  73            		LD	(HL),E				;
  C2B3  23            		INC	HL				;
  C2B4  72            		LD	(HL),D				;
  C2B5  DDE5          		PUSH	IX				;
  C2B7  E1            		POP	HL				;
  C2B8  110400        		LD	DE,IDX_BADR			;
  C2BB  19            		ADD	HL,DE				;
  C2BC  5E            		LD	E,(HL)				;
  C2BD  23            		INC	HL				;
  C2BE  56            		LD	D,(HL)				;DE<-バッファ構造体のバッファポインタ
  C2BF  D5            		PUSH	DE				;バッファ構造体のバッファポインタを退避
  C2C0  21107D        		LD	HL,DIR_ENTRY			;
  C2C3  012000        		LD	BC,DENT_SIZE			;
  C2C6  EDB0          		LDIR					;ディレクトリバッファの内容をファイルバッファにコピーする
  C2C8  3E2E          		LD	A,"."				;エントリ名<-".."
  C2CA  32117D        		LD	(DIR_ENTRY+IDX_NAME+1),A	;
  C2CD  2A5B7D        		LD	HL,(WDIR_CLSTR)			;HL<-ワーキングディレクトリのクラスタ＃
  C2D0  EB            		EX	DE,HL				;
  C2D1  212A7D        		LD	HL,DIR_ENTRY+IDX_FAT		;ディレクトリエントリバッファのFATエントリ<-親ディレクトリのクラスタ＃
  C2D4  73            		LD	(HL),E				;
  C2D5  23            		INC	HL				;
  C2D6  72            		LD	(HL),D				;
  C2D7  E1            		POP	HL				;バッファ構造体のバッファポインタを復帰
  C2D8  112000        		LD	DE,DENT_SIZE			;
  C2DB  19            		ADD	HL,DE				;
  C2DC  EB            		EX	DE,HL				;DE<-次のエントリ位置
  C2DD  21107D        		LD	HL,DIR_ENTRY			;
  C2E0  012000        		LD	BC,DENT_SIZE			;
  C2E3  EDB0          		LDIR					;
  C2E5  DD3606FF      		LD	(IX+IDX_BUPD),TRUE		;バッファの更新フラグを立てる
  C2E9  CD4564        		CALL	FLUSH_BFFR			;FATとファイルバッファをメディアに書き込む
  C2EC  CD5065        		CALL	RESTORE_WDIR			;
  C2EF  C3A776        		JP	CLOSE_CMD			;
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD EX命令 サブディレクトリ拡張
                      	;・サブディレクトリに新しいクラスタを追加して、エントリ格納サイズを拡張する
                      	; CMD EX "DIR"
                      	; CMD EX SD$
                      	;=================================================
  C2F2                	CMD_EX:
  C2F2  CDE276        		CALL	STR2ARG0			;
  C2F5  E5            		PUSH	HL				;
  C2F6  CD3968        		CALL	IS_FAT16			;
  C2F9  CDBD64        		CALL	CHANGE_WDIR			;
  C2FC  22EE7C        		LD	(ARG0),HL			;
  C2FF  0E10          		LD	C,ATRB_DIR			;
  C301  CD6365        		CALL	GET_DENT			;
  C304  CA7678        		JP	Z,ERR_NOT_FOUND			;
  C307  216578        		LD	HL,MSG_EXPAND			;
  C30A  CD156A        		CALL	YES_NO				;
  C30D  203A          		JR	NZ,.EXIT			;
  C30F  2A2A7D        		LD	HL,(DIR_ENTRY+IDX_FAT)		;
  C312  7C            		LD	A,H				;
  C313  B5            		OR	L				;
  C314  1E05          		LD	E,ILLEGAL_FUNCTION_CALL		;
  C316  CAF93B        		JP	Z,ERROR				;FATエントリが未登録(0000H)ならエラー
  C319  CD9463        	.L2:	CALL	READ_FAT_DATA			;DE<-クラスタHLのリンク先クラスタ＃。HL保持
  C31C  13            		INC	DE				;DE++
  C31D  7A            		LD	A,D				;
  C31E  B3            		OR	E				;
  C31F  2804          		JR	Z,.L1				;DE=0000H ?
  C321  1B            		DEC	DE				;DE--
  C322  EB            		EX	DE,HL				;HL<-リンク先クラスタ＃
  C323  18F4          		JR	.L2				;
                      	
  C325  E5            	.L1:	PUSH	HL				;最終クラスタ＃退避
  C326  CDD163        		CALL	FIND_NULL_CLSTR			;HL<-空きクラスタ＃
  C329  EB            		EX	DE,HL				;DE=空きクラスタ＃
  C32A  E1            		POP	HL				;HL<-最終クラスタ＃
  C32B  3806          		JR	C,.FOUND			;
  C32D  213A78        		LD	HL,MSG_MEDIA_FULL		;空きクラスタが見つからなければエラー終了
  C330  C30A6A        		JP	ERR				;
                      	
  C333  D5            	.FOUND:	PUSH	DE				;空きクラスタ＃退避
  C334  CD5F63        		CALL	WRITE_FAT_DATA			;クラスタHLのFATデータとしてDEをセットする
  C337  EB            		EX	DE,HL				;HL=最終クラスタ＃
  C338  11FFFF        		LD	DE,0FFFFH			;最終クラスタのFATエントリに終了コードをセットする
  C33B  CD5F63        		CALL	WRITE_FAT_DATA			;
  C33E  CD4564        		CALL	FLUSH_BFFR			;FATをメディアに書き込む
  C341  E1            		POP	HL				;空きクラスタ＃復帰
  C342  DD21087D      		LD	IX,FILE_BFFR_STRCT		;
  C346  CDBA76        		CALL	CLR_CLSTR			;クラスタ初期化
  C349  CD5065        	.EXIT:	CALL	RESTORE_WDIR			;
  C34C  C3A776        		JP	CLOSE_CMD			;
                      	
                      	
[EOF:EXT.asm]
                      	
[EOF:MAIN.asm]
------------------------
####  SYMBOL TABLE  ####
------------------------
$:			0C34FH
FALSE			00000H
TRUE			000FFH
EOL			00000H
USE_VIRTUAL_LED		000FFH
USE_VIRTUAL_SOUND	000FFH
SHOW_DATE		00000H
CLSTR_STACK_SIZE	00010H
IDX_PP_SCTR		001C6H
IDX_BPB			0000BH
SCTR_SIZE		00200H
DENT_PER_SCTR		00010H
MIN_CLSTR		00002H
MAX_CLSTR		0FFF6H
DNAME_SIZE		0000BH
DENT_SIZE		00020H
ROOT			00000H
IDX_NAME		00000H
IDX_EXT			00008H
IDX_ATRB		0000BH
IDX_CTIME		0000EH
IDX_CDATE		00010H
IDX_ADATE		00012H
IDX_TIME		00016H
IDX_DATE		00018H
IDX_FAT			0001AH
IDX_SIZE		0001CH
IDX_BADR		00004H
IDX_BUPD		00006H
SEPARATOR		0002FH
ATRB_DIR		00010H
ATRB_FILE		00020H
ID_DISABLED		000E5H
ATRB_SIZE		00006H
STR_BUFF		0FF3DH
STR_BUFF_SIZE		00050H
CB_BYTES		00200H
BEL			00007H
BS			00008H
LF			0000AH
CL			0000CH
CR			0000DH
SPC			00020H
DQUOTE			00022H
SQUOTE			00027H
WARMBOOT		0006AH
BASIC			00081H
PUTCH			00257H
BEEP			00350H
LOCATE			003A9H
CLRLN			00451H
CLS			0045AH
WIDTH			00843H
WIDTH_X			009A3H
WIDTH_Y			009D7H
CURSOFF			00BD2H
CURSON			00BE2H
ISBRK			00CF1H
KEYWAIT			00F75H
TIME_READ		01602H
TIME_WRT		01663H
SETFREADR		017E9H
DISKB_ERR		01875H
SCRNEDIT		01B7EH
PRTHLDEC		02D13H
CNVFACDEC		0309FH
ERROR			03BF9H
PRGFIT			03D76H
NEW			03DE0H
RUN			03DF4H
INPUT			03E5CH
TPSEEK			0409BH
CNVDECWORD		044C7H
EVALEXP			04A8FH
PRINT			052EDH
BYTE_EVALEXP		056FAH
FAC2INT			0592AH
MON			05C66H
GETADRS			05E21H
CNVBYTEHEX		05E83H
RNUM2RAD		05B85H
RAD2RNUM		05B86H
CNVHEXBYTE		05EA0H
PRTHLHEX		05EC0H
PRTAHEX			05EC5H
CPHLDE			05ED3H
CAPITAL			05FC1H
PUT_CR			05FCAH
PUT_SPC			05FD4H
FKEY_FLAG		0EA68H
DT_SEC			0EA76H
DT_MIN			0EA77H
DT_HOUR			0EA78H
DT_DAY			0EA79H
DT_MONTH		0EA7AH
DT_YEAR			0EA7BH
FKEYDATA		0EA7CH
FKEY_POINTER		0EAC0H
STACK_BEGIN		0EB50H
EXECLINENUM		0EB52H
BASBEGIN		0EB54H
KEYBUF			0EC96H
ACTIVE_FKEY		0EDC0H
FREE_END		0EF54H
STR_BEGIN		0EF79H
VARBEGIN		0EFA0H
ARRBEGIN		0EFA2H
FREBEGIN		0EFA4H
SYSUNUSED		0F216H
VRAM			0F300H
BOOTSTACK		0FF3DH
RS232BF1		0EDCEH
RS232BF2		0EE4EH
IEEEWK			0EED2H
ENT_CMD			0F0FDH
ENT_TALK		0F10CH
ENT_POLL		0F115H
ENT_MERGE		0F13CH
ENT_KILL		0F142H
ENT_LOAD		0F139H
ENT_SAVE		0F14BH
ENT_FILES		0F14EH
ENT_MOUNT		0F154H
ENT_NAME		0F13FH
ENT_RBYTE		0F11BH
SYNTAX_ERROR		00002H
ILLEGAL_FUNCTION_CALL	00005H
OUT_OF_MEMORY		00007H
STRING_TOO_LONG		0000FH
UNPRINTABLE		00015H
MISSING_OPERAND		00016H
LINE_BFFR_OVERFLOW	00017H
BAD_FILE_DATA		00019H
DEBUG			00000H
INIT_BASIC:		0601BH
INIT_FKEY:		06037H
INIT_FKEY.L2:		0603FH
INIT_FKEY.L1:		06041H
INIT_FKEY.L3:		0604EH
INIT_FKEY.L4:		06052H
INIT_FKEY.DATA:		06058H
INIT_CMDHOOK:		06067H
HI			00001H
PA_IN			00010H
PB_IN			00002H
PCL_IN			00001H
PCH_IN			00008H
A8255			000FCH
PPI_A			000FCH
PPI_B			000FDH
PPI_C			000FEH
PPI_CTL			000FFH
PPI_MMC			00088H
VLED_POS:		0F34EH
INIT_8255:		060A4H
INIT_8255.L1:		060BCH
MMC_1WR:		060C2H
MMC_1WR.L1:		060C5H
MMC_1WR.L2:		060D8H
MMC_1RD:		060F0H
MMC_1RD.LOOP:		060F2H
MMC_1RD.L1:		06106H
MMC_RES:		06109H
MMC_RES.LOOP:		0610DH
MMC_TIMEOUT:		06127H
MMC_CLK:		06146H
MMC_CLK8:		0615BH
MMC_INIT:		0616DH
MMC_INIT.L1:		0619EH
MMC_BRD_CMD:		061C2H
MMC_BRD_CMD.L1:		061F3H
MMC_BRD_END:		06201H
MMC_BWR_CMD:		06208H
MMC_BWR_END:		06244H
MMC_BWR_END.L1:		06251H
MMC_CLR_ADR:		0626AH
MMC_INC_ADR:		06278H
MMC_READ:		06291H
MMC_READ.L1:		0629AH
MMC_READ.L2:		0629DH
MMC_WRITE:		062B6H
MMC_WRITE.L1:		062BFH
MMC_WRITE.L2:		062C2H
MMC_FILLB:		062DBH
MMC_FILLB.L1:		062E4H
MMC_FILLB.L2:		062E7H
MMC_WAIT:		062FFH
MMC_LED_ON:		06303H
MMC_LED_OFF:		06317H
MMC_SOUND:		06329H
MMC_SOUND.L1:		0632CH
ERASE_FAT_LINK:		0633BH
ERASE_FAT_LINK.L1:	0633BH
ERASE_FAT_LINK.EXIT2:	0635EH
WRITE_FAT_DATA:		0635FH
SYNC_FAT2_SCTR:		06380H
READ_FAT_DATA:		06394H
GET_FAT_SCTR:		063B0H
GET_FAT_POINTER:	063C1H
FIND_NULL_CLSTR:	063D1H
FIND_NULL_CLSTR.L1:	063E1H
FIND_NULL_CLSTR.L2:	063E9H
FIND_NULL_CLSTR.L4:	063EFH
FIND_NULL_CLSTR.L3:	063FFH
FIND_NULL_CLSTR.NOT:	0640AH
FIND_NULL_CLSTR.FOUND:	0640CH
FIND_NULL_CLSTR.SUB:	0640EH
FIND_NULL_CLSTR.ERR1:	06418H
INIT_BFFR:		06419H
INIT_BFFR.SUB:		06431H
FLUSH_BFFR:		06445H
CLR_BFFR:		0645FH
LOAD_BFFR:		06470H
LOAD_BFFR.L1:		0647CH
SAVE_BFFR:		06492H
CLR_DNAME:		064B4H
CHANGE_WDIR:		064BDH
ENTER_SUBDIR:		064CCH
ENTER_SUBDIR.E1:	064E7H
ENTER_SUBDIR.EXIT:	064EAH
ENTER_ROOT:		064ECH
SPLIT_FPATH:		064F2H
SPLIT_FPATH.L1:		064F4H
SPLIT_FPATH.FOUND:	06513H
SPLIT_FPATH.EXIT:	06517H
TRACE_PATH:		06519H
TRACE_PATH.L4:		06525H
TRACE_PATH.L1:		06528H
TRACE_PATH.ADD:		06538H
STORE_WDIR:		06549H
RESTORE_WDIR:		06550H
EOL2SPC:		06557H
EOL2SPC.L1:		06559H
EOL2SPC.L2:		0655FH
GET_DENT:		06563H
GET_DENT.MAIN:		0656DH
IS_VALID_DENT:		0657CH
IS_VALID_DENT.L1:	06584H
IS_READ_ONLY:		06589H
SET_DENT_FAT:		06595H
SET_DENT_FAT.FOUND:	065AAH
SET_DENT_FAT.L1:	065ADH
TOUCH:			065B1H
TOUCH.NEW:		065B6H
TOUCH.L1:		065CCH
TOUCH.UP:		065D2H
WRITE_DENT:		065D9H
SET_DATETIME:		065FDH
DIR_WALK:		06640H
DIR_WALK.L4:		0664DH
DIR_WALK.ROOT:		06657H
DIR_WALK.L2:		06665H
DIR_WALK.L1:		06671H
DIR_WALK.RET:		0667BH
DIR_WALK.L3:		06681H
DIR_WALK.QUIT:		0669CH
SEARCH_NULL_DENT:	0669FH
SEARCH_NULL_DENT.FOUND:	066A6H
GET_DENT_SUB:		066AAH
GET_DENT_SUB.L1:	066B3H
GET_DENT_SUB.FOUND:	066CEH
GET_DENT_SUB.EXIT:	066DDH
DENT_FOUND:		066E0H
PRT_DENT:		066F3H
PRT_DENT.L6:		06705H
PRT_DENT.DIR:		0671FH
PRT_DENT.NAME:		0672AH
PRT_DENT.L1:		0672EH
PRT_DENT.L2:		06733H
PRT_DENT.L5:		06737H
PRT_DENT.L7:		0673EH
PRT_DENT.L8:		06744H
PRT_DENT.EXIT:		06754H
PRT_DENT.EXIT2:		06755H
PRT_DENT.L4:		0675AH
PRT_DENT.L3:		06767H
CLR_DENT_BFFR:		0676DH
AUTOEXEC:		0677DH
AUTOEXEC.NAME:		067A6H
IS_FILE:		067B2H
STR2BUFF:		067C1H
STR2BUFF.L2:		067D0H
STR2BUFF.L3:		067D9H
INIT_FAT16:		067DDH
PRT_VOLUME:		067F7H
PRT_VOLUME.L1:		06817H
PRT_FSIZE:		06820H
PRT_FSIZE.L1:		0682DH
IS_FAT16:		06839H
READ_MBR:		06849H
READ_IPL:		0686DH
READ_IPL.L1:		06890H
READ_IPL.L2:		0689BH
READ_BPB:		068ADH
READ_BPB.L1:		068E5H
GET_PHYSICAL_ADRS:	06903H
READ_SCTR:		06926H
WRITE_SCTR:		0692FH
GET_FIRST_SCTR:		06938H
GET_FIRST_SCTR.L1:	0694AH
GET_FIRST_SCTR.EXIT:	0695EH
DNAME2CLSTR:		06962H
IS_INFO_ON:		06976H
PAUSE:			0697BH
EXT_TABLE_JUMP:		06989H
EXT_TABLE_JUMP.L3:	06989H
EXT_TABLE_JUMP.L2:	0698FH
EXT_TABLE_JUMP.L1:	0699DH
GET_ARGS:		069ACH
GET_ARGS.INC:		069DBH
RESET_ARGS:		069E2H
RESET_ARGS.L1:		069E9H
IS_HEX:			069EFH
IS_HEX.ERR:		06A03H
IS_HEX.EXIT:		06A08H
ERR:			06A0AH
YES_NO:			06A15H
BCD2BIN:		06A3AH
IPRINT:			06A50H
IPRINT.L1:		06A52H
IPRINT.L2:		06A5AH
PUTHEX:			06A5DH
PRT_DW_HEX:		06A67H
PRT_DW_HEX.L1:		06A6EH
INIT_DW:		06A78H
DW_LD:			06A7FH
DW0_CP:			06A89H
DW_CP:			06A95H
DW_CP.E1:		06A98H
DW_CP.L1:		06AA5H
DW_CP.EXIT:		06AACH
DW_COPY:		06AB6H
DW0_PUSH:		06AC2H
DW_PUSH:		06ACAH
DW_PUSH.E1:		06ACCH
DW0_POP:		06AE8H
DW_POP:			06AF1H
DW_POP.E1:		06AF4H
DW0_ILD:		06B11H
DW0_ILD.L1:		06B19H
DW0_ILD.L2:		06B1FH
DW0_CLR:		06B23H
DW_CLR:			06B2AH
DW_CLR.E1:		06B2BH
DW0_SWAP:		06B35H
DW_SWAP:		06B41H
DW_SWAP.E1:		06B44H
DW_SWAP.L1:		06B46H
DW0_ADD:		06B54H
DW_ADD:			06B60H
DW_ADD.E1:		06B63H
DW_ADD.L1:		06B66H
DW0_SUB:		06B71H
DW_SUB:			06B7DH
DW_SUB.E1:		06B80H
DW_SUB.L1:		06B84H
DW0_INC:		06B8FH
DW_INC:			06B96H
DW_INC.E1:		06B97H
DW_INC.EXIT:		06BA4H
DW0_DEC:		06BA6H
DW_DEC:			06BAEH
DW_DEC.E1:		06BB0H
DW_DEC.L1:		06BBAH
DW_DEC.EXIT:		06BC2H
DW0_X2:			06BC5H
DW_X2:			06BCCH
DW_X2.E1:		06BCDH
DW_X256:		06BDAH
DW_X512:		06BF0H
HLXDE:			06BF7H
HLXDE.L2:		06C0BH
HLXDE.L1:		06C1AH
INIT_FP:		06C24H
IS_FP_OFST_ZERO:	06C3AH
FP2SCTR:		06C42H
GET_FP_CLSTR:		06C59H
GET_FP_CLSTR.L1:	06C63H
READ_FP_SCTR:		06C6CH
FETCH_1BYTE:		06C73H
FP2BP:			06C7DH
INC_FP:			06C8CH
INC_FP.L1:		06CB5H
INC_FP.EXIT:		06CB8H
NEXT_CLSTR:		06CBAH
PARSE_FP:		06CD3H
PARSE_FP.L1:		06CF2H
PARSE_FP.L2:		06CFEH
POST_1BYTE:		06D04H
INC_FP_W:		06D15H
INC_FP_W.NULL:		06D42H
INC_FP_W.FOUND:		06D56H
INC_FP_W.NEW:		06D61H
INC_FP_W.EXIT:		06D73H
SET_FP_END:		06D74H
SET_FP_END.L1:		06D99H
GET_2STR_PTR:		06D9DH
EXP2WORD:		06DBBH
EXP2WORD.SKIP:		06DBCH
WORD_JUMP:		06DC6H
WORD_JUMP.L1:		06DC9H
WORD_JUMP.L3:		06DD3H
WORD_JUMP.NEXT:		06DD6H
WORD_JUMP.EQUAL:	06DE0H
OPEN_DQUOTE:		06DF6H
CLOSE_DQUOTE:		06E03H
SKIP_SPC:		06E09H
SKIP_SPC.L1:		06E09H
SKIP_CHR:		06E10H
SKIP_CHR.L1:		06E10H
BIN_MARK:		0003AH
BAS_MARK:		000D3H
BAS_MARK_LEN:		0000AH
BAS_ZERO:		0000AH
CMT_STACK_LVL:		00040H
BFNAME_SIZE:		00006H
READ_CMT:		06E19H
READ_CMT.LOOP:		06E22H
READ_CMT.L1:		06E2DH
READ_CMT.L3:		06E35H
READ_CMT.L5:		06E38H
READ_CMT.L4:		06E42H
READ_CMT_BASIC:		06E4EH
READ_CMT_BASIC.L4:	06E50H
READ_CMT_BASIC.L1:	06E60H
READ_CMT_BASIC.L9:	06E85H
READ_CMT_BASIC.L2:	06E8BH
READ_CMT_BASIC.L3:	06E8DH
READ_CMT_BASIC.L5:	06E9DH
READ_CMT_BINARY:	06EA6H
READ_CMT_BINARY.L1:	06EC7H
READ_CMT_BINARY.L2:	06ED6H
READ_CMT_BINARY.L3:	06EE7H
READ_CMT_BINARY.L5:	06EF6H
READ_ERR:		06EFAH
CHECK_STACK_AREA:	06F14H
CHECK_STACK_AREA.ERR:	06F27H
CHECK_STACK_AREA.EXIT:	06F31H
GET_FIREWALL:		06F34H
PSEUDO_MON:		06F40H
PSEUDO_MON.L1:		06F47H
PSEUDO_MON.EXIT:	06F64H
PSEUDO_MON.SUB:		06F65H
WRITE_CMT:		06F71H
WRITE_CMT.MERGE:	06F74H
WRITE_CMT.ERR:		06F8DH
WRITE_CMT.RET:		06F92H
IS_BASIC:		06F95H
WRITE_CMT_BASIC:	06F9EH
WRITE_CMT_BASIC.HEADR:	06FB4H
WRITE_CMT_BASIC.FNAME:	06FC9H
WRITE_CMT_BASIC.L1:	06FD0H
WRITE_CMT_BASIC.DATA:	06FE8H
WRITE_CMT_BASIC.FOOTR:	06FF4H
WRITE_CMT_BINARY:	06FFBH
WRITE_CMT_BINARY.L2:	07013H
WRITE_CMT_BINARY.L3:	07028H
WRITE_CMT_BINARY.L1:	0702FH
WRITE_CMT_BINARY.EXIT:	07043H
PREP_READ:		0704CH
FIN_READ_BASIC:		0705EH
PREP_WRITE:		0706BH
FIN_WRITE:		07088H
PRT_WRITE_BIN_INFO:	0709EH
IS_SAFE_ZONE:		070BCH
READ_BIN:		070D2H
READ_BIN.L10:		0711FH
READ_BIN.L6:		07121H
READ_BIN.L5:		0712CH
READ_BIN.L9:		0714EH
READ_BIN.L2:		0715DH
READ_BIN.LOOP:		07160H
READ_BIN.L1:		07165H
READ_BIN.RET:		07179H
READ_BIN.L8:		0717DH
READ_BIN.L7:		07182H
READ_BIN.L3:		07195H
EXECUTE:		07196H
EXECUTE.L1:		071CDH
WRITE_BIN:		071D2H
WRITE_BIN.ERR:		071EFH
WRITE_BIN.L1:		071F4H
WRITE_BIN.L2:		07217H
READ_BAS:		07224H
READ_BAS.L1:		07232H
READ_BAS.L4:		07242H
READ_BAS.L2:		07248H
READ_BAS.L3:		0724AH
READ_BAS.L5:		0725AH
WRITE_BAS:		07263H
WRITE_BAS.L1:		0727AH
WRITE_BAS.L2:		07294H
READ_RAW:		072A1H
READ_RAW.ERR:		072BEH
READ_RAW.L1:		072C3H
READ_RAW.L2:		072EAH
READ_RAW.LOOP:		072EEH
KANJI:			000FFH
SECONDS:		00000H
PRT_FDATE:		072F9H
PRT_FTIME:		07316H
GET_FDATE:		0732CH
GET_FDATE.L2:		07340H
GET_FDATE.L1:		07348H
GET_FTIME:		0734AH
ENC_TIME:		07360H
ENC_DATE:		07378H
PRT_WDEC:		0738EH
PRT_WDEC.L4:		0738FH
PRT_WDEC.L3:		07397H
PRT_WDEC.L2:		0739BH
PRT_WDEC.L1:		073A1H
DUMP_DENT:		073AEH
DUMP_DENT.L1:		073C2H
DUMP_DENT.L4:		073EBH
DUMP_DENT.L2:		073F1H
DUMP_DENT.L3:		073F3H
DUMP_DENT.L5:		07400H
DUMP_DENT.L6:		0746CH
DUMP_DENT.L7:		07480H
ATRB_BIT_SYMBL:		074A5H
DUMP8:			074ABH
DUMP8.L1:		074BEH
DUMP8.L2:		074CAH
CMD:			074CEH
CMD_V:			074D6H
CMD_V.L1:		074E7H
CMD_F:			07502H
CMD_P:			07508H
CMD_ON:			07523H
INFO:			07525H
INFO.L1:		07539H
CMD_OFF:		0753CH
CMD_R:			07540H
RBYTE:			07556H
LOAD:			0756CH
LOAD.E1:		07573H
SAVE:			07589H
PREP_DENT:		075A7H
POLL:			075B6H
KILL:			075C6H
KILL.L1:		075D8H
KILL.DIR:		075EBH
KILL.EXIT:		075F9H
MOUNT:			075FCH
FILES:			07617H
FILES.L1:		07621H
MERGE:			07631H
NAME:			07654H
GET_2STR_ARGS:		0768EH
CLOSE_CMD:		076A7H
SWAP_ARGS:		076ABH
CLR_CLSTR:		076BAH
CLR_CLSTR.L1:		076C7H
STR2ARG0:		076E2H
IS_DOT:			076EDH
IS_DOT.L2:		07703H
IS_DOT.L1:		0770DH
IS_DOT.EXIT:		07713H
STR2SFN:		07715H
STR2SFN.L1:		07724H
STR2SFN.L7:		0772FH
STR2SFN.L4:		07734H
STR2SFN.L2:		0773CH
STR2SFN.L3:		0773EH
STR2SFN.L5:		07749H
STR2SFN.L6:		07750H
STR2SFN.EXIT:		07763H
STR2SFN.COUNT:		0776CH
SFN_ADD_STR:		07770H
SFN_ADD_SPC:		0777FH
SFN_ADD_SPC.L1:		07782H
FIX_CHR:		0778AH
IS_NGCHR:		07793H
IS_NGCHR.ERR:		077A2H
IS_EOT:			077A8H
NULL_STR:		077ADH
FILL_STR:		077AFH
FILL_STR.L1:		077B3H
ADD_STR:		077BAH
ADD_STR.L2:		077BDH
ADD_STR.L3:		077C5H
ADD_STR.EXIT:		077C7H
MSG_TITLE:		077CAH
MSG_NOT_FOUND:		077E3H
MSG_NOT_SUPPORTED_EXT:	077EDH
MSG_NG_NAME:		077F5H
MSG_SCTR_OVERFLOW:	077FDH
MSG_MEMORY_CONFLICT:	07806H
MSG_BAD_FORMAT:		07814H
MSG_NOT_FAT16:		0781FH
MSG_CANCELED:		07829H
MSG_EMPTY_FILE:		07834H
MSG_MEDIA_FULL:		0783AH
MSG_DIR_FULL:		0783FH
MSG_NO_NAME:		07848H
MSG_NG_CHR:		07850H
MSG_KILL_FILE:		07857H
MSG_EXISTS:		0785EH
MSG_EXPAND:		07865H
MSG_READ_ONLY:		0786CH
ERR_NOT_FOUND:		07876H
ERR_EMPTY_FILE:		0787CH
ERR_EXISTS:		07882H
FAT_CODE:		07888H
NG_CHR:			07890H
NG_CHR_END		0789CH
CMD_TABLE:		0789CH
JUMP_TABLE:		078B8H
JT_CP:			078C4H
JT_D:			078C6H
JT_EX:			078C8H
JT_MD:			078CAH
JT_S:			078CCH
EXT_LOAD_TABLE:		078CEH
EXT_SAVE_TABLE:		078DEH
WORK_AREA:		078EEH
FAT_BFFR:		078EEH
FILE_BFFR:		07AEEH
ARG0:			07CEEH
ARG1:			07CF0H
ARG2:			07CF2H
ARG3:			07CF4H
ARGNUM:			07CF6H
EXECFLG:		07CF7H
EXECADR:		07CF8H
FAT1_BFFR_STRCT:	07CFAH
FAT1_BFFR_STRCT.SCTR:	07CFAH
FAT1_BFFR_STRCT.BP:	07CFEH
FAT1_BFFR_STRCT.FLG:	07D00H
FAT2_BFFR_STRCT:	07D01H
FAT2_BFFR_STRCT.SCTR:	07D01H
FAT2_BFFR_STRCT.BP:	07D05H
FAT2_BFFR_STRCT.FLG:	07D07H
FILE_BFFR_STRCT:	07D08H
FILE_BFFR_STRCT.SCTR:	07D08H
FILE_BFFR_STRCT.BP:	07D0CH
FILE_BFFR_STRCT.FLG:	07D0EH
DNAME:			07D0FH
DIR_ENTRY:		07D10H
DIR_ENTRY.SCTR:		07D30H
DIR_ENTRY.BP:		07D34H
FOUND:			07D36H
BPB:			07D37H
PP_SCTR:		07D4AH
ROOT_SCTR_SIZE:		07D4EH
FAT_SCTR:		07D4FH
ROOT_SCTR:		07D53H
DATA_SCTR:		07D57H
WDIR_CLSTR:		07D5BH
WDIR_ORG:		07D5DH
TGT_CLSTR:		07D5FH
FP:			07D61H
FP_CLSTR:		07D65H
FP_CLSTR_SN:		07D67H
FP_SCTR_SN:		07D69H
ATRB:			07D6AH
FIREWALL:		07D71H
TIMEOUT:		07D73H
MMCADR0:		07D74H
MMCADR1:		07D75H
MMCADR2:		07D76H
MMCADR3:		07D77H
DWA:			07D78H
DW0:			07D7CH
DW1:			07D80H
DW_SP_ORG:		07D84H
DW_SP:			07D86H
DW_STACK		07D98H
CP_SCTR:		07D98H
CP_DENT:		07D9CH
CP_DENT.SCTR:		07DBCH
CP_DENT.BP:		07DC0H
CHECKSUM:		07DC2H
INFO_SW:		07DC4H
IS_CALLBACK:		07DC5H
CALLBACK:		07DC6H
INFO_BUF:		07DC8H
FREE_AREA		07DD8H
SCTRS_PER_CLSTR		07D39H
FAT_START		07D3AH
ROOT_SIZE		07D3DH
FAT_SIZE		07D42H
INIT_EXT_CMD:		0C000H
CMD_D:			0C02EH
CMD_D.L1:		0C03FH
CMD_D.L2:		0C056H
CMD_D.L3:		0C057H
DUMP_SCTR:		0C060H
DUMP_SCTR.L4:		0C06CH
DUMP_SCTR.L3:		0C076H
DUMP_SCTR.L2:		0C07BH
DUMP_SCTR.L1:		0C08BH
DUMP_SCTR.L6:		0C09DH
DUMP_SCTR.L7:		0C0A5H
DUMP_SCTR.L5:		0C0C7H
DUMP_SCTR.HEADER:	0C0CFH
DUMP_SCTR.L10:		0C0E0H
DUMP_SCTR.L11:		0C0EAH
CMD_S:			0C10BH
CMD_S.L1:		0C126H
CMD_S.L2:		0C139H
CMD_CP:			0C142H
CMD_CP.LOOP:		0C1A4H
CMD_CP.L1:		0C1ACH
CMD_CP.FOUND:		0C1E6H
CMD_CP.EXIT:		0C211H
COPY_SCTR:		0C233H
CMD_MD:			0C248H
CMD_EX:			0C2F2H
CMD_EX.L2:		0C319H
CMD_EX.L1:		0C325H
CMD_EX.FOUND:		0C333H
CMD_EX.EXIT:		0C349H
------------------------
