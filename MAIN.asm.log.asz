------------------------------------------------
Asm2Hex : Version 0.7.2
 + Z80 - ZilogMnemonic : Rev.0d
------------------------------------------------
------------------------
####     PASS:2     ####
------------------------
                      	
                      	;=================================================
                      	;PC-8001 SD-SYSTEM
                      	;=================================================
                      	
                      	;・要望、不具合報告はTwitter @chiqlappe宛にお願いします。
                      	
                      	
                      	INCLUDE "LABELS.ASM"
                      	
                      	;=============================
                      	;共通ラベル
                      	;=============================
                      	
  0000                	FALSE			EQU	00H
  00FF                	TRUE			EQU	!FALSE
  0000                	EOL			EQU	00H
                      	
                      	;=============================
                      	;専用ラベル
                      	;=============================
                      	
  00FF                	USE_VIRTUAL_LED		EQU	TRUE		;MMCドライバ用
  00FF                	USE_VIRTUAL_SOUND	EQU	TRUE		;
  0000                	SHOW_DATE		EQU	FALSE		;FILESで日時を表示する
                      	
  0010                	CLSTR_STACK_SIZE	EQU	10H		;[CD.ASM]クラスタスタックサイズ
                      	
  01C6                	IDX_PP_SCTR		EQU	01C6H		;[FS.ASM]プライマリパーティション開始セクタ＃へのインデックス値
  000B                	IDX_BPB			EQU	000BH		;[FS.ASM]BPB領域へのインデックス値
                      	
  0200                	SCTR_SIZE		EQU	200H		;セクタサイズ
  0010                	DENT_PER_SCTR		EQU	10H		;１セクタ当たりのディレクトリエントリ数
  0002                	MIN_CLSTR		EQU	 0002H		;クラスタ＃の最小値
  FFF6                	MAX_CLSTR		EQU	0FFF6H		;クラスタ＃の最大値（理論値）
                      	
  000B                	DNAME_SIZE		EQU	0BH		;ディレクトリエントリ名のサイズ 8+3=11
  0020                	DENT_SIZE		EQU	20H		;ディレクトリエントリ全体のサイズ
                      	
  0000                	ROOT			EQU	0000H		;ルートディレクトリのクラスタ＃ 実際のクラスタ＃ではなく単なる識別用ID
                      	
  0000                	IDX_NAME		EQU	00H		;ディレクトリ情報のオフセット値 名前 １１バイト（拡張子部を含む）
  0008                	IDX_EXT			EQU	08H		;ディレクトリ情報のオフセット値 拡張子 ３バイト
  000B                	IDX_ATRB		EQU	0BH		;ディレクトリ情報のオフセット値 属性値 １バイト
  000E                	IDX_CTIME		EQU	0EH		;ディレクトリ情報のオフセット値 作成時刻 ２バイト
  0010                	IDX_CDATE		EQU	10H		;ディレクトリ情報のオフセット値 作成日   ２バイト
  0012                	IDX_ADATE		EQU	12H		;ディレクトリ情報のオフセット値 アクセス日 ２バイト
  0016                	IDX_TIME		EQU	16H		;ディレクトリ情報のオフセット値 更新時刻 ２バイト
  0018                	IDX_DATE		EQU	18H		;ディレクトリ情報のオフセット値 更新日   ２バイト
  001A                	IDX_FAT			EQU	1AH		;ディレクトリ情報のオフセット値 FATエントリ番号 ２バイト
  001C                	IDX_SIZE		EQU	1CH		;ディレクトリ情報のオフセット値 ファイルサイズ  ４バイト
                      	
  0004                	IDX_BADR		EQU	04H		;バッファ情報のオフセット値 バッファの先頭アドレス ２バイト
  0006                	IDX_BUPD		EQU	06H		;バッファ情報のオフセット値 更新フラグ １バイト
                      	
  002F                	SEPARATOR		EQU	"/"
  0010                	ATRB_DIR		EQU	10H		;ディレクトリエントリの属性値
  0020                	ATRB_FILE		EQU	20H		;
  00E5                	ID_DISABLED		EQU	0E5H		;無効化されたディレクトリエントリの認識コード
                      	
  0006                	ATRB_SIZE		EQU	06H		;ファイル属性文字列のサイズ
                      	
                      	;WORK_AREA		EQU	07B00H		;ワークエリア
  FF3D                	STR_BUFF		EQU	0FF3DH		;文字列バッファ ~0FF9CH
  0050                	STR_BUFF_SIZE		EQU	50H		;文字列バッファのサイズ（終了コード１文字分含む）
                      	
                      	;STACK_AREA		EQU	0FFFFH
  0200                	CB_BYTES		EQU	0200H		;コールバック間隔のバイト数 512バイト=1セクタサイズ
[EOF:LABELS.asm]
                      	INCLUDE	"N80.ASM"
                      	
                      	;出典	PC-Techknow8000（システムソフト）
                      	;	PC-8001マシン語活用ハンドブック 初級編（秀和システムトレーディング株式会社）
                      	
                      	;-----------------------------
                      	;ASCII 定数
                      	;-----------------------------
  0007                	BEL		EQU	07H
  0008                	BS		EQU	08H
  000A                	LF		EQU	0AH
  000C                	CL		EQU	0CH
  000D                	CR		EQU	0DH
  0020                	SPC		EQU	20H
  0022                	DQUOTE		EQU	22H
  0027                	SQUOTE		EQU	27H
                      	
                      	;-----------------------------
                      	;PC-8001システムコール
                      	;-----------------------------
                      	
                      	;0000H
  006A                	WARMBOOT	EQU	06AH	;ホットスタート
  0081                	BASIC		EQU	081H	;BASICへ戻る
  0257                	PUTCH		EQU	0257H	;AレジスタをASCII出力 (-)
  0350                	BEEP		EQU	0350H	;BEEPを鳴らす (A,F,E,H,L)
  03A9                	LOCATE		EQU	03A9H	;LOCATE(H,L)
  0451                	CLRLN		EQU	0451H	;１行消去(A,F,B,C,D,E,F,H,L)
  045A                	CLS		EQU	045AH	;画面消去
  0843                	WIDTH		EQU	0843H	;WIDTH命令 HLにパラメータのポインタを入れてコールする "WIDTH 80,25" = 38H,30H,2CH,32H,35H,00H
  09A3                	WIDTH_X		EQU	09A3H	;WIDTH命令 A<-横方向
  09D7                	WIDTH_Y		EQU	09D7H	;WIDTH命令 A<-縦方向
  0BD2                	CURSOFF		EQU	0BD2H	;カーソル消去
  0BE2                	CURSON		EQU	0BE2H	;カーソル表示
  0CF1                	ISBRK		EQU	0CF1H	;STOP,ESCキー押下でCY<-1 非押下でZ<-1
  0F75                	KEYWAIT		EQU	0F75H	;１文字入力待ち A<-CODE (A,F)
                      	
                      	;1000H
  1602                	TIME_READ	EQU	01602H	;タイマICの日時情報をワークに書き込む
  1663                	TIME_WRT	EQU	01663H	;ワークの日時情報をタイマICに書き込む
  17E9                	SETFREADR	EQU	017E9H	;フリーエリアの開始アドレスをHLにセットする
  1875                	DISKB_ERR	EQU	01875H	;Disk Basic Feature エラー
  1B7E                	SCRNEDIT	EQU	01B7EH	;スクリーン編集実行 KEYBUFに入力文字列 STOPキーによる中断でCY<-1 (ALL)
                      	
                      	;2000H
  2D13                	PRTHLDEC	EQU	02D13H	;HLレジスタの値を10進数で出力する 0抑止
                      	
                      	;3000H
  309F                	CNVFACDEC	EQU	0309FH	;16ビット10進文字列変換 FACを(HL)以降に文字列で格納する
  3BF9                	ERROR		EQU	03BF9H	;エラー出力 E<-エラーコード
  3D76                	PRGFIT		EQU	03D76H	;BASICプログラムのアドレスをその番地にフィットさせる
  3DE0                	NEW		EQU	03DE0H	;NEW
  3DF4                	RUN		EQU	03DF4H	;RUN
  3E5C                	INPUT		EQU	03E5CH	;=INPUT KEYBUFに入力文字列+0 HL<-KEYBUF-1
                      	
                      	;4000H
  409B                	TPSEEK		EQU	0409BH	;次の文字が見つかるまでストリングポインタを進める 見つからなければZ<-1
  44C7                	CNVDECWORD	EQU	044C7H	;(HL)以降に格納された"0"~"65529"の10進数文字列を2バイトの数値に変換してDEに入れる 
  4A8F                	EVALEXP		EQU	04A8FH	;ストリングポインタの式を評価してFACに入れる
                      	
                      	;5000H
  52ED                	PRINT		EQU 	052EDH	;(HL)以降に格納された文字列を出力する (ALL)
  56FA                	BYTE_EVALEXP	EQU	056FAH	;ストリングポインタの式を評価してAに入れる
                      	
  592A                	FAC2INT		EQU	0592AH	;HL<-INT(FAC)
  5C66                	MON		EQU	05C66H	;モニタ復帰
  5E21                	GETADRS		EQU	05E21H	;キーボードから4桁の16進を入力してHLに格納する
  5E83                	CNVBYTEHEX	EQU	05E83H	;1バイトの数値を2バイトの16進文字列に変換 A->D,E
  5B85                	RNUM2RAD	EQU	05B85H	;行番号→行アドレス
  5B86                	RAD2RNUM	EQU	05B86H	;行アドレス→行番号。BASIC保存前に実行する
  5EA0                	CNVHEXBYTE	EQU	05EA0H	;2バイトの16進文字列を1バイトの数値に変換 D,E->A
  5EC0                	PRTHLHEX	EQU	05EC0H	;HLレジスタの値を4桁の16進数で出力する (A)
  5EC5                	PRTAHEX		EQU	05EC5H	;Aレジスタの値を2桁の16進数で出力する (A)
  5ED3                	CPHLDE		EQU	05ED3H	;ペアレジスタ比較 HL-DE (-)
  5FC1                	CAPITAL		EQU	05FC1H	;大文字化
  5FCA                	PUT_CR		EQU 	05FCAH	;改行出力 (A)
  5FD4                	PUT_SPC		EQU	05FD4H	;スペース出力
                      	
                      	
                      	;-----------------------------
                      	;PC-8001ワークエリア
                      	;-----------------------------
  EA68                	FKEY_FLAG	EQU	0EA68H	;ファンクションキーが押されていれば1になる
  EA76                	DT_SEC		EQU	0EA76H	;秒 BCD形式 "CALL TIME_READ"が必要
  EA77                	DT_MIN		EQU	0EA77H	;分
  EA78                	DT_HOUR		EQU	0EA78H	;時
  EA79                	DT_DAY		EQU	0EA79H	;日
  EA7A                	DT_MONTH	EQU	0EA7AH	;月
  EA7B                	DT_YEAR		EQU	0EA7BH	;年
  EA7C                	FKEYDATA	EQU	0EA7CH	;ファンクションキーの内容
                      	
  EAC0                	FKEY_POINTER	EQU	0EAC0H	;リセット時ACTIVE_FKEYにセットされているアドレス
  EB50                	STACK_BEGIN	EQU	0EB50H	;スタックの底
  EB52                	EXECLINENUM	EQU	0EB52H	;現在実行中の行番号 停止中は0FFFFH
  EB54                	BASBEGIN	EQU	0EB54H	;N-BASICのプログラムエリア先頭アドレス ~0EB55H (8021H)
  EC96                	KEYBUF		EQU	0EC96H	;キー入力された文字列の格納先
  EDC0                	ACTIVE_FKEY	EQU	0EDC0H	;押されているファンクションキーのアドレス
  EF54                	FREE_END	EQU	0EF54H	;フリーエリアの最終アドレス ~0EF55H (0E9FFH)
  EF79                	STR_BEGIN	EQU	0EF79H	;文字列フリースペース先頭アドレス ~0EF7AH
  EFA0                	VARBEGIN	EQU	0EFA0H	;変数エリアの先頭アドレス   ~0EFA1H ( 8023H)
  EFA2                	ARRBEGIN	EQU	0EFA2H	;配列エリアの先頭アドレス   ~0EFA3H ( 8023H)
  EFA4                	FREBEGIN	EQU	0EFA4H	;フリーエリアの先頭アドレス ~0EFA5H ( 8023H)
  F216                	SYSUNUSED	EQU	0F216H	;システム未使用領域	    ~0F2FFH 233バイト
  F300                	VRAM		EQU	0F300H	;VRAMエリア                 ~0FEB7H
  FF3D                	BOOTSTACK	EQU	0FF3DH	;リセット時のスタックエリア ~0FFFEH 193バイト
                      	
  EDCE                	RS232BF1	EQU	0EDCEH	;RS-232C CH1 バッファ       ~0EE4DH 128バイト
  EE4E                	RS232BF2	EQU	0EE4EH	;RS-232C CH2 バッファ       ~0EECDH 128バイト
  EED2                	IEEEWK		EQU	0EED2H	;IEEE用ワークエリア	    ~0EEF5H 35バイト
                      	
  F0FD                	ENT_CMD		EQU	0F0FDH	;拡張命令のエントリアドレス+1
  F10C                	ENT_TALK	EQU	0F10CH	;
  F115                	ENT_POLL	EQU	0F115H	;
  F13C                	ENT_MERGE	EQU	0F13CH	;
  F142                	ENT_KILL	EQU	0F142H	;
  F139                	ENT_LOAD	EQU	0F139H	;
  F14B                	ENT_SAVE	EQU	0F14BH	;
  F14E                	ENT_FILES	EQU	0F14EH	;
  F154                	ENT_MOUNT	EQU	0F154H	;
  F13F                	ENT_NAME	EQU	0F13FH	;
  F11B                	ENT_RBYTE	EQU	0F11BH	;
                      	
                      	;-----------------------------
                      	;エラーコード
                      	;-----------------------------
  0002                	SYNTAX_ERROR		EQU	02H
  0005                	ILLEGAL_FUNCTION_CALL	EQU	05H
  0007                	OUT_OF_MEMORY		EQU	07H
  000F                	STRING_TOO_LONG		EQU	0FH
  0015                	UNPRINTABLE		EQU	15H
  0016                	MISSING_OPERAND		EQU	16H
  0017                	LINE_BFFR_OVERFLOW	EQU	17H
  0019                	BAD_FILE_DATA		EQU	19H
                      	;FILE_NOT_FOUND		EQU	35H
                      	;FILE_ALREADY_EXISTS	EQU	3AH
                      	
[EOF:N80.asm]
                      	
  0000                	DEBUG	EQU	FALSE				;
                      	
  6000                		ORG	06000H
                      	
  6000  4142          		DB	"AB"				;自動起動用マーカー
                      	
                      	;	CALL	INIT_DEBUG			;デバッグルーチン初期化
  6002  CDD267        		CALL	INIT_FAT16			;FAT16関連ワーク初期化
  6005  CD6D6A        		CALL	INIT_DW				;ダブルワード用スタック初期化
  6008  CD6760        		CALL	INIT_CMDHOOK			;コマンドフック書き換え
  600B  CD3760        		CALL	INIT_FKEY			;ファンクションキー設定変更
  600E  CD1B60        		CALL	INIT_BASIC			;BASIC初期化
  6011  CDDC74        		CALL	CMD_ON				;インフォメーションスイッチ
                      	
  6014  216D77        		LD	HL,MSG_TITLE			;タイトル表示
  6017  CDED52        		CALL	PRINT				;
  601A  C9            		RET					;
                      	
                      	;=================================================
                      	;BASIC初期化
                      	;=================================================
  601B                	INIT_BASIC:
  601B  2158EF        		LD	HL,0EF58H			;ストリングディスクリプタ初期化
  601E  2256EF        		LD	(0EF56H),HL			;
  6021  212180        		LD	HL,8021H			;
  6024  2254EB        		LD	(BASBEGIN),HL			;BASIC先頭アドレス
  6027  23            		INC	HL				;
  6028  23            		INC	HL				;
  6029  22A0EF        		LD	(VARBEGIN),HL			;変数先頭アドレス
  602C  23            		INC	HL				;
  602D  23            		INC	HL				;
  602E  22A2EF        		LD	(ARRBEGIN),HL			;配列先頭アドレス
  6031  23            		INC	HL				;
  6032  23            		INC	HL				;
  6033  22A4EF        		LD	(FREBEGIN),HL			;フリーエリア先頭アドレス
  6036  C9            		RET					;
                      	
                      	;=================================================
                      	;ファンクションキー登録
                      	;=================================================
  6037                	INIT_FKEY:
  6037  217CEA        		LD	HL,FKEYDATA			;
  603A  115860        		LD	DE,.DATA			;
  603D  0E03          		LD	C,03H				;
  603F  0605          	.L2:	LD	B,05H				;
  6041  1A            	.L1:	LD	A,(DE)				;
  6042  77            		LD	(HL),A				;
  6043  23            		INC	HL				;
  6044  13            		INC	DE				;
  6045  10FA          		DJNZ	.L1				;
  6047  CD4E60        		CALL	.L3				;
  604A  0D            		DEC	C				;
  604B  20F2          		JR	NZ,.L2				;
  604D  C9            		RET					;
                      	
  604E  C5            	.L3:	PUSH	BC				;
  604F  AF            		XOR	A				;
  6050  060B          		LD	B,11				;
  6052  77            	.L4:	LD	(HL),A				;
  6053  23            		INC	HL				;
  6054  10FC          		DJNZ	.L4				;
  6056  C1            		POP	BC				;
  6057  C9            		RET					;
                      	
  6058  6D6F756E74    	.DATA:	DB	"mount"				;F1
  605D  6C6F616420    		DB	"load "				;F2
  6062  66696C6573    		DB	"files"				;F3
                      	
                      	;=================================================
                      	;コマンドフックの書き換え
                      	;=================================================
  6067                	INIT_CMDHOOK:
  6067  21BA75        		LD	HL,FILES			;ファイル一覧を表示する
  606A  224EF1        		LD	(ENT_FILES),HL			;
  606D  210F75        		LD	HL,LOAD				;ファイルをロードする
  6070  2239F1        		LD	(ENT_LOAD),HL			;
  6073  219F75        		LD	HL,MOUNT			;SDCをマウントする
  6076  2254F1        		LD	(ENT_MOUNT),HL			;
  6079  212C75        		LD	HL,SAVE				;ファイルをセーブする
  607C  224BF1        		LD	(ENT_SAVE),HL			;
  607F  218774        		LD	HL,CMD				;汎用コマンド
  6082  22FDF0        		LD	(ENT_CMD),HL			;
  6085  216975        		LD	HL,KILL				;ファイルを削除する
  6088  2242F1        		LD	(ENT_KILL),HL			;
  608B  215975        		LD	HL,POLL				;ワーキングディレクトリを変更する
  608E  2215F1        		LD	(ENT_POLL),HL			;
  6091  21D475        		LD	HL,MERGE			;CMTファイルにプログラムを追記する
  6094  223CF1        		LD	(ENT_MERGE),HL			;
  6097  21F775        		LD	HL,NAME				;ファイル名を変更する
  609A  223FF1        		LD	(ENT_NAME),HL			;
                      	
  609D  C9            		RET					;
                      	
                      	;=================================================
                      	;インクルードファイル
                      	;=================================================
                      	
                      	;INCLUDE "DEBUG.asm"				;デバッグ用ツール
                      	INCLUDE	"MMC.asm"				;MMCドライバ
                      	
                      	;MMCドライバ
                      	;・出典 http://w01.tp1.jp/~a571632211/pc8001/index.html
                      	
  0001                	HI		EQU	1
                      	
  0010                	PA_IN		EQU	00010000B
  0002                	PB_IN		EQU	00000010B
  0001                	PCL_IN		EQU	00000001B
  0008                	PCH_IN		EQU	00001000B
                      	
  00FC                	A8255		EQU 	0FCH		;8255 ポートアドレス
  00FC                	PPI_A		EQU	A8255		;
  00FD                	PPI_B		EQU	A8255+1		;
  00FE                	PPI_C		EQU	A8255+2		;
  00FF                	PPI_CTL		EQU	A8255+3		;
                      	
  0088                	PPI_MMC		EQU	10000000B + PCH_IN	;MMCドライバで使用する8255のポート設定
                      	
  F34E                	VLED_POS:	EQU	VRAM+78			;仮想LEDの位置
                      	
                      	;MMCADR0:	DS	1	;MMC 物理アドレス L   MMCのアドレスは32ビット長
                      	;MMCADR1:	DS	1	;MMC 物理アドレス H
                      	;MMCADR2:	DS	1	;MMC 物理アドレス HH
                      	;MMCADR3:	DS	1	;MMC 物理アドレス HHH
                      	
                      	;=================================================
                      	;[MMC]8255モードセット
                      	;=================================================
  609E                	INIT_8255:
  609E  E5            		PUSH	HL
                      	
  609F  3E88          		LD	A,PPI_MMC		;MODE=0,A=IN,B=OUT,CH=IN,CL=OUT
  60A1  D3FF          		OUT	(PPI_CTL),A
  60A3  3EF7          		LD	A,0F7H
  60A5  D3FD          		OUT	(PPI_B),A
  60A7  DBFD          		IN	A,(PPI_B)
  60A9  FEF7          		CP	0F7H
  60AB  2809          		JR	Z,.L1
                      	
  60AD  218777        		LD	HL,MSG_NOT_FOUND
  60B0  CDED52        		CALL	PRINT
  60B3  CD750F        		CALL	KEYWAIT
                      	
  60B6  3EFF          	.L1:	LD	A,0FFH
  60B8  D3FD          		OUT	(PPI_B),A
                      	
  60BA  E1            		POP	HL
  60BB  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMCに1バイト送る
                      	;IN  C=送信データ
                      	;OUT -
                      	;=================================================
  60BC                	MMC_1WR:
  60BC  C5            		PUSH	BC
  60BD  0608          		LD	B,8
  60BF  DBFD          	.L1:	IN	A,(PPI_B)
  60C1  E6FE          		AND	0FEH
  60C3  D3FD          		OUT	(PPI_B),A
  60C5  CDF962        		CALL	MMC_WAIT
  60C8  DBFD          		IN	A,(PPI_B)
  60CA  E6FD          		AND	0FDH
  60CC  CB11          		RL	C
  60CE  3002          		JR	NC,.L2
  60D0  F602          		OR	02H
  60D2  D3FD          	.L2:	OUT	(PPI_B),A
  60D4  CDF962        		CALL	MMC_WAIT
  60D7  DBFD          		IN	A,(PPI_B)
  60D9  F601          		OR	01H
  60DB  D3FD          		OUT	(PPI_B),A
  60DD  CDF962        		CALL	MMC_WAIT
  60E0  10DD          		DJNZ	.L1
  60E2  C1            		POP	BC
  60E3  DBFD          		IN	A,(PPI_B)
  60E5  F602          		OR	02H
  60E7  D3FD          		OUT	(PPI_B),A
  60E9  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMCから1バイト受け取る
                      	;IN  -
                      	;OUT C=受信データ
                      	;=================================================
  60EA                	MMC_1RD:
  60EA  0608          		LD	B,8
  60EC  DBFD          	.LOOP:	IN	A,(PPI_B)
  60EE  E6FE          		AND	0FEH
  60F0  D3FD          		OUT	(PPI_B),A
  60F2  F601          	        OR	001H
  60F4  D3FD          		OUT	(PPI_B),A
  60F6  AF            		XOR	A
  60F7  CB11          		RL	C
  60F9  DBFE          		IN	A,(PPI_C)
  60FB  E610          		AND	010H
  60FD  2801          		JR	Z,.L1
  60FF  0C            		INC	C
  6100  10EA          	.L1:	DJNZ	.LOOP
  6102  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMCから1バイトレスポンスを受け取る
                      	;IN  -
                      	;OUT C=レスポンス
                      	;=================================================
  6103                	MMC_RES:
  6103  AF            		XOR	A				;タイムアウト用カウンタリセット
  6104  32287D        		LD	(TIMEOUT),A
                      	
  6107  E5            	.LOOP:	PUSH	HL
  6108  21287D        		LD	HL,TIMEOUT
  610B  34            		INC	(HL)
  610C  7E            		LD	A,(HL)
  610D  E1            		POP	HL
  610E  B7            		OR	A
  610F  2810          		JR	Z,MMC_TIMEOUT
                      	
  6111  0601          		LD	B,1
  6113  CD4061        		CALL	MMC_CLK
                      	
  6116  DBFE          		IN	A,(PPI_C)
  6118  E610          		AND	010H
  611A  20EB          		JR	NZ,.LOOP
                      	
  611C  010007        		LD	BC,0700H			;B<-7
  611F  18CB          		JR	MMC_1RD.LOOP
                      	
                      	;=================================================
                      	;[MMC]タイムアウト処理
                      	;=================================================
  6121                	MMC_TIMEOUT:
  6121  CD456A        		CALL	IPRINT
  6124  53657420534443		DB	"Set SDC then ",DQUOTE,"MOUNT",DQUOTE,CR,LF,EOL
        207468656E2022	
        4D4F554E54220D	
        0A00          	
  613B  1E15          		LD	E,UNPRINTABLE
  613D  C3F93B        		JP	ERROR
                      	
                      	;=================================================
                      	;[MMC]MMCクロック
                      	;IN  B=回数
                      	;OUT 
                      	;=================================================
  6140                	MMC_CLK:
  6140  DBFD          		IN	A,(PPI_B)
  6142  E6FE          		AND	11111110B
  6144  D3FD          		OUT	(PPI_B),A
  6146  CDF962        		CALL	MMC_WAIT
  6149  DBFD          		IN	A,(PPI_B)
  614B  F601          		OR	00000001B
  614D  D3FD          		OUT	(PPI_B),A
  614F  CDF962        		CALL	MMC_WAIT
  6152  10EC          		DJNZ	MMC_CLK
  6154  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]CS=HにしてMMCクロックX8
                      	;=================================================
  6155                	MMC_CLK8:
  6155  DBFD          		IN	A,(PPI_B)
  6157  F604          		OR	00000100B
  6159  D3FD          		OUT	(PPI_B),A  			;CS=H
  615B  0608          		LD	B,8
  615D  CD4061        		CALL	MMC_CLK   			;MMCクロック実行
  6160  DBFD          		IN	A,(PPI_B)
  6162  E6FB          		AND	11111011B
  6164  D3FD          		OUT	(PPI_B),A  			;CS=L
  6166  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMCをSPIモードに初期化する
                      	;=================================================
  6167                	MMC_INIT:
  6167  DBFD          		IN	A,(PPI_B)
  6169  F604          		OR	00000100B
  616B  D3FD          		OUT	(PPI_B),A
  616D  06C8          		LD	B,200
  616F  CD4061        		CALL	MMC_CLK
  6172  DBFD          		IN	A,(PPI_B)
  6174  E6FB          		AND	11111011B
  6176  D3FD          		OUT	(PPI_B),A
  6178  0E40          		LD	C,01000000B
  617A  CDBC60        		CALL	MMC_1WR
  617D  0E00          		LD	C,0
  617F  CDBC60        		CALL	MMC_1WR
  6182  CDBC60        		CALL	MMC_1WR
  6185  CDBC60        		CALL	MMC_1WR
  6188  CDBC60        		CALL	MMC_1WR
  618B  0E95          		LD	C,10010101B
  618D  CDBC60        		CALL	MMC_1WR
  6190  CD0361        		CALL	MMC_RES
  6193  3E01          		LD	A,01H
  6195  B9            		CP	C
  6196  20CF          		JR	NZ,MMC_INIT
                      	
  6198  CD5561        	.L1:	CALL	MMC_CLK8
  619B  0E41          		LD	C,01000001B
  619D  CDBC60        		CALL	MMC_1WR
  61A0  0E00          		LD	C,0
  61A2  CDBC60        		CALL	MMC_1WR
  61A5  CDBC60        		CALL	MMC_1WR
  61A8  CDBC60        		CALL	MMC_1WR
  61AB  CDBC60        		CALL	MMC_1WR
  61AE  0EF9          		LD	C,11111001B
  61B0  CDBC60        		CALL	MMC_1WR
  61B3  CD0361        		CALL	MMC_RES
  61B6  3E00          		LD	A,0
  61B8  B9            		CP	C
  61B9  20DD          		JR	NZ,.L1
  61BB  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]ブロックREADコマンド
                      	;=================================================
  61BC                	MMC_BRD_CMD:
  61BC  CD5561        		CALL	MMC_CLK8
  61BF  0E51          		LD	C,01010001B
  61C1  CDBC60        		CALL	MMC_1WR
  61C4  3A2C7D        		LD	A,(MMCADR3)
  61C7  4F            		LD	C,A
  61C8  CDBC60        		CALL	MMC_1WR
  61CB  3A2B7D        		LD	A,(MMCADR2)
  61CE  4F            		LD	C,A
  61CF  CDBC60        		CALL	MMC_1WR
  61D2  3A2A7D        		LD	A,(MMCADR1)
  61D5  4F            		LD	C,A
  61D6  CDBC60        		CALL	MMC_1WR
  61D9  3A297D        		LD	A,(MMCADR0)
  61DC  4F            		LD	C,A
  61DD  CDBC60        		CALL	MMC_1WR
  61E0  0E01          		LD	C,00000001B
  61E2  CDBC60        		CALL	MMC_1WR
  61E5  CD0361        		CALL	MMC_RES
  61E8  3E00          		LD	A,0
  61EA  B9            		CP	C
  61EB  20CF          		JR	NZ,MMC_BRD_CMD
                      	
  61ED  CDEA60        	.L1:	CALL	MMC_1RD
  61F0  79            		LD	A,C
  61F1  E6E0          		AND	11100000B
  61F3  28C7          		JR	Z,MMC_BRD_CMD
  61F5  79            		LD	A,C
  61F6  FEFE          		CP	0FEH
  61F8  20F3          		JR	NZ,.L1
  61FA  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]ブロックREAD終了処理
                      	;=================================================
  61FB                	MMC_BRD_END:
  61FB  CDEA60        		CALL	MMC_1RD
  61FE  CDEA60        		CALL	MMC_1RD
  6201  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]ブロックWRITEコマンド
                      	;=================================================
  6202                	MMC_BWR_CMD:
  6202  CD5561        		CALL	MMC_CLK8
  6205  0E58          		LD	C,01011000B
  6207  CDBC60        		CALL	MMC_1WR
  620A  3A2C7D        		LD	A,(MMCADR3)
  620D  4F            		LD	C,A
  620E  CDBC60        		CALL	MMC_1WR
  6211  3A2B7D        		LD	A,(MMCADR2)
  6214  4F            		LD	C,A
  6215  CDBC60        		CALL	MMC_1WR
  6218  3A2A7D        		LD	A,(MMCADR1)
  621B  4F            		LD	C,A
  621C  CDBC60        		CALL	MMC_1WR
  621F  3A297D        		LD	A,(MMCADR0)
  6222  4F            		LD	C,A
  6223  CDBC60        		CALL	MMC_1WR
  6226  0E01          		LD	C,00000001B
  6228  CDBC60        		CALL	MMC_1WR
  622B  CD0361        		CALL	MMC_RES
  622E  3E00          		LD	A,0
  6230  B9            		CP	C
  6231  20CF          		JR	NZ,MMC_BWR_CMD
                      	
  6233  0EFF          		LD	C,0FFH
  6235  CDBC60        		CALL	MMC_1WR
  6238  0EFE          		LD	C,0FEH
  623A  CDBC60        		CALL	MMC_1WR
  623D  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]ブロックWRITE終了処理
                      	;=================================================
  623E                	MMC_BWR_END:
  623E  0E00          		LD	C,0
  6240  CDBC60        		CALL	MMC_1WR
  6243  0E00          		LD	C,0
  6245  CDBC60        		CALL	MMC_1WR
  6248  CD0361        		CALL	MMC_RES
                      	
  624B  DBFD          	.L1:	IN	A,(PPI_B)
  624D  E6FE          		AND	11111110B
  624F  D3FD          		OUT	(PPI_B),A
  6251  CDF962        		CALL	MMC_WAIT
  6254  DBFD          		IN	A,(PPI_B)
  6256  F601          		OR	00000001B
  6258  D3FD          		OUT	(PPI_B),A
  625A  CDF962        		CALL	MMC_WAIT
  625D  DBFE          		IN	A,(PPI_C)
  625F  E610          		AND	00010000B
  6261  28E8          		JR	Z,.L1
  6263  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]物理アドレスクリア
                      	;=================================================
  6264                	MMC_CLR_ADR:
  6264  AF            		XOR	A
  6265  32297D        		LD	(MMCADR0),A
  6268  322A7D        		LD	(MMCADR1),A
  626B  322B7D        		LD	(MMCADR2),A
  626E  322C7D        		LD	(MMCADR3),A
  6271  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]物理アドレスを1ブロック分進める
                      	;=================================================
  6272                	MMC_INC_ADR:
  6272  3A2A7D        		LD	A,(MMCADR1)
  6275  C602          		ADD	A,2
  6277  322A7D        		LD	(MMCADR1),A
  627A  3A2B7D        		LD	A,(MMCADR2)
  627D  CE00          		ADC	A,0
  627F  322B7D        		LD	(MMCADR2),A
  6282  3A2C7D        		LD	A,(MMCADR3)
  6285  CE00          		ADC	A,0
  6287  322C7D        		LD	(MMCADR3),A
  628A  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMC読み込み
                      	;IN  MMCADR0,1,2,3=MMCアドレス HL=メモリアドレス B=ブロック数
                      	;OUT 
                      	;=================================================
  628B                	MMC_READ:
  628B  C5            		PUSH	BC
                      	
  628C  CDFD62        		CALL	MMC_LED_ON
                      	
  628F  CDBC61        		CALL	MMC_BRD_CMD
  6292  0602          		LD	B,2
  6294  C5            	.L1:	PUSH	BC
  6295  0600          		LD	B,0				;256回ループ
  6297  C5            	.L2:	PUSH	BC
  6298  CDEA60        		CALL	MMC_1RD
  629B  71            		LD	(HL),C
  629C  23            		INC	HL
  629D  C1            		POP 	BC
  629E  10F7          		DJNZ	.L2
  62A0  C1            		POP	BC
  62A1  10F1          		DJNZ	.L1
  62A3  CDFB61        		CALL	MMC_BRD_END
  62A6  CD7262        		CALL	MMC_INC_ADR
  62A9  C1            		POP	BC
                      	
  62AA  CD1163        		CALL	MMC_LED_OFF
                      	
  62AD  10DC          		DJNZ	MMC_READ
  62AF  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMC書き込み
                      	;IN  MMCADR0,1,2,3=MMCアドレス HL=メモリアドレス B=ブロック数
                      	;OUT 
                      	;=================================================
  62B0                	MMC_WRITE:
  62B0  C5            		PUSH	BC
                      	
  62B1  CDFD62        		CALL	MMC_LED_ON
                      	
  62B4  CD0262        		CALL	MMC_BWR_CMD
  62B7  0602          		LD	B,2
  62B9  C5            	.L1:	PUSH	BC
  62BA  0600          		LD	B,0
  62BC  C5            	.L2:	PUSH	BC
  62BD  4E            		LD	C,(HL)
  62BE  23            		INC	HL
  62BF  CDBC60        		CALL	MMC_1WR
  62C2  C1            		POP	BC
  62C3  10F7          		DJNZ	.L2
  62C5  C1            		POP	BC
  62C6  10F1          		DJNZ	.L1
  62C8  CD3E62        		CALL	MMC_BWR_END
  62CB  CD7262        		CALL	MMC_INC_ADR
  62CE  C1            		POP	BC
                      	
  62CF  CD1163        		CALL	MMC_LED_OFF
                      	
  62D2  10DC          		DJNZ	MMC_WRITE
  62D4  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]MMC埋め尽くし
                      	;IN  MMCADR0,1,2,3=MMCアドレス L=埋める値 B=ブロック数
                      	;OUT -
                      	;=================================================
  62D5                	MMC_FILLB:
  62D5  C5            		PUSH	BC
                      	
  62D6  CDFD62        		CALL	MMC_LED_ON
                      	
  62D9  CD0262        		CALL	MMC_BWR_CMD
  62DC  0602          		LD	B,2
  62DE  C5            	.L1:	PUSH	BC
  62DF  0600          		LD	B,0
  62E1  C5            	.L2:	PUSH	BC
  62E2  4D            		LD	C,L
  62E3  CDBC60        		CALL	MMC_1WR
  62E6  C1            		POP	BC
  62E7  10F8          		DJNZ	.L2
  62E9  C1            		POP	BC
  62EA  10F2          		DJNZ	.L1
  62EC  CD3E62        		CALL	MMC_BWR_END
  62EF  CD7262        		CALL	MMC_INC_ADR
  62F2  C1            		POP	BC
                      	
  62F3  CD1163        		CALL	MMC_LED_OFF
                      	
  62F6  10DD          		DJNZ	MMC_FILLB
  62F8  C9            		RET
                      	
                      	;=================================================
                      	;[MMC]12クロックのウェイト挿入
                      	;=================================================
  62F9                	MMC_WAIT:
  62F9  00            		NOP
  62FA  00            		NOP
  62FB  00            		NOP
  62FC  C9            		RET
                      	
                      	;=================================================
                      	;アクセスランプ点灯
                      	;=================================================
  62FD                	MMC_LED_ON:
  62FD  DBFD          		IN	A,(PPI_B)
  62FF  E6F7          		AND	11110111B			;LED信号を立てる(負論理)
  6301  D3FD          		OUT	(PPI_B),A
                      	
                      	IF USE_VIRTUAL_SOUND
  6303  CD2363        		CALL	MMC_SOUND
                      	ENDIF
                      	
  6306  3A797D        		LD	A,(INFO_SW)			;インフォメーションフラグが降りていたら戻る
  6309  A7            		AND	A
  630A  C8            		RET	Z
                      	
                      	IF USE_VIRTUAL_LED
  630B  3E2A          		LD	A,02AH				;="*"
  630D  324EF3        		LD	(VLED_POS),A
                      	ENDIF
                      	
  6310  C9            		RET
                      	
                      	;=================================================
                      	;アクセスランプ消灯
                      	;=================================================
  6311                	MMC_LED_OFF:
  6311  DBFD          		IN	A,(PPI_B)
  6313  E6FE          		AND	11111110B			;PB0=CLK<-L microSDモジュールのLEDを消す
  6315  F608          		OR	00001000B			;LED信号を降ろす(負論理)
  6317  D3FD          		OUT	(PPI_B),A
                      	
  6319  3A797D        		LD	A,(INFO_SW)
  631C  A7            		AND	A
  631D  C8            		RET	Z
                      	
                      	IF USE_VIRTUAL_LED
  631E  AF            		XOR	A				;=NULL文字
  631F  324EF3        		LD	(VLED_POS),A
                      	ENDIF
  6322  C9            		RET
                      	
                      	;=================================================
                      	;疑似アクセス音
                      	;=================================================
                      	IF USE_VIRTUAL_SOUND
  6323                	MMC_SOUND:
  6323  C5            		PUSH	BC
                      	
  6324  0620          		LD	B,20H
  6326  3A67EA        	.L1:	LD	A,(0EA67H)
  6329  F620          		OR	00100000B
  632B  D340          		OUT	(40H),A
  632D  E6DF          		AND	11011111B
  632F  D340          		OUT	(40H),A
  6331  10F3          		DJNZ	.L1
                      	
  6333  C1            		POP	BC
  6334  C9            		RET
                      	ENDIF
                      	
[EOF:MMC.asm]
                      	INCLUDE	"FAT.asm"				;FAT
                      	
                      	;=================================================
                      	;[FAT]FATのリンク先をすべて「空き」にする
                      	;IN  HL=クラスタ＃
                      	;OUT 
                      	;=================================================
  6335                	ERASE_FAT_LINK:
  6335  CD8E63        	.L1:	CALL	READ_FAT_DATA			;
  6338  7A            		LD	A,D				;FATデータが0000Hなら終了
  6339  B3            		OR	E				;
  633A  C8            		RET	Z				;
                      	
  633B  D5            		PUSH	DE				;FATデータを退避
  633C  110000        		LD	DE,0000H			;
  633F  CD5963        		CALL	WRITE_FAT_DATA			;クラスタHLのFATデータを0000Hにセットする
  6342  E1            		POP	HL				;FATデータを復帰
  6343  23            		INC	HL				;FATデータがFFFFHなら終了
  6344  7C            		LD	A,H				;
  6345  B5            		OR	L				;
  6346  C8            		RET	Z				;
  6347  2B            		DEC	HL				;HLをもとに戻す
  6348  110200        		LD	DE,MIN_CLSTR			;DE<-最小論理クラスタ＃
  634B  CDD35E        		CALL	CPHLDE				;
  634E  3808          		JR	C,.EXIT2			;
  6350  11F7FF        		LD	DE,MAX_CLSTR+1			;DE<-最大論理クラスタ＃+1
  6353  CDD35E        		CALL	CPHLDE				;
  6356  38DD          		JR	C,.L1
                      	
  6358                	.EXIT2:
  6358  FF            		DB	0FFH				;TRAP
                      	
                      	;=================================================
                      	;[FAT]FATデータをFATバッファに書き込む
                      	;IN  HL=クラスタ＃,DE=FATデータ
                      	;OUT 
                      	;=================================================
  6359                	WRITE_FAT_DATA:
  6359  DDE5          		PUSH	IX				;！重要！
  635B  DD21AF7C      		LD	IX,FAT1_BFFR_STRCT		;
  635F  D5            		PUSH	DE				;FATデータを退避
  6360  E5            		PUSH	HL				;クラスタ＃を退避
  6361  CDAA63        		CALL	GET_FAT_SCTR			;(DW0)<-クラスタ＃に対応するFATのセクタ＃
  6364  CD6A64        		CALL	LOAD_BFFR			;
  6367  E1            		POP	HL				;クラスタ＃を復帰
  6368  CDBB63        		CALL	GET_FAT_POINTER			;HL<-FATバッファのポインタ
  636B  D1            		POP	DE				;FATデータを復帰
  636C  73            		LD	(HL),E				;データをFATバッファに書き込む
  636D  23            		INC	HL				;
  636E  72            		LD	(HL),D				;
  636F  3EFF          		LD	A,TRUE
  6371  32B57C        		LD	(FAT1_BFFR_STRCT+IDX_BUPD),A	;FAT1バッファの更新フラグを立てる
  6374  32BC7C        		LD	(FAT2_BFFR_STRCT+IDX_BUPD),A	;FAT2バッファの更新フラグを立てる
  6377  DDE1          		POP	IX				;
  6379  C9            		RET
                      	
                      	;=================================================
                      	;[FAT]FAT2バッファ構造体のセクタ＃をFAT1と同期する
                      	;IN  -
                      	;OUT (FAT2_BFFR_STRCT.SCTR)
                      	;=================================================
  637A                	SYNC_FAT2_SCTR:
  637A  DDE5          		PUSH	IX				;！重要！
  637C  DD21B67C      		LD	IX,FAT2_BFFR_STRCT		;
  6380  2AAF7C        		LD	HL,(FAT1_BFFR_STRCT.SCTR) 	;HL<-バッファされているFATセクタ＃の下位2バイト！上位2バイトは必ず0000Hなので無視する！
  6383  ED5BF77C      		LD	DE,(FAT_SIZE)			;DE<-FAT１面に必要なセクタ数
  6387  19            		ADD	HL,DE				;HL<-FATに対応するFAT2のセクタ＃
  6388  22B67C        		LD	(FAT2_BFFR_STRCT.SCTR),HL 	;FAT2バッファ構造体のセクタ＃に、FATに対応するFAT2のセクタ＃をセットする！セクタ＃の上位２バイトは必ず0000Hなので手を付けない！
  638B  DDE1          		POP	IX				;
  638D  C9            		RET					;
                      	
                      	;=================================================
                      	;[FAT]FATデータをFATから読み出す
                      	;IN  HL=クラスタ＃
                      	;OUT DE=FATデータ=次のクラスタ＃
                      	;=================================================
  638E                	READ_FAT_DATA:
  638E  E5            		PUSH	HL				;
  638F  DDE5          		PUSH	IX				;！重要！
  6391  E5            		PUSH	HL				;クラスタ＃を退避
  6392  CDAA63        		CALL	GET_FAT_SCTR			;(DW0)<-クラスタ＃に対応するFATのセクタ＃
  6395  DD21AF7C      		LD	IX,FAT1_BFFR_STRCT		;
  6399  CD6A64        		CALL	LOAD_BFFR			;セクタ(DW0)をFATバッファに読み込む
  639C  CD7A63        		CALL	SYNC_FAT2_SCTR			;FAT2バッファ構造体のセクタ＃をFATに合わせる
  639F  E1            		POP	HL				;クラスタ＃を復帰
  63A0  CDBB63        		CALL	GET_FAT_POINTER			;HL<-FATバッファポインタ
  63A3  5E            		LD	E,(HL)				;DE<-次のクラスタ＃
  63A4  23            		INC	HL				;
  63A5  56            		LD	D,(HL)				;
  63A6  DDE1          		POP	IX				;
  63A8  E1            		POP	HL				;
  63A9  C9            		RET					;
                      	
                      	;=================================================
                      	;[FAT]クラスタHLのFATデータが含まれるセクタ＃を(DW0)に求める = FAT_SCTR + (クラスタ＃の上位バイト)
                      	;IN  HL=クラスタ＃
                      	;OUT (DW0)=セクタ＃
                      	;=================================================
  63AA                	GET_FAT_SCTR:
  63AA  CD186B        		CALL	DW0_CLR				;(DW0)<-クラスタ＃の上位バイト
  63AD  7C            		LD	A,H				;
  63AE  32317D        		LD	(DW0),A				;
  63B1  21317D        		LD	HL,DW0				;(DW0)<-(DW0)+(FAT_SCTR)
  63B4  11047D        		LD	DE,FAT_SCTR			;
  63B7  CD556B        		CALL	DW_ADD				;
  63BA  C9            		RET					;
                      	
                      	;=================================================
                      	;[FAT]クラスタのFATデータを示すポインタを求める = バッファアドレス + (クラスタ＃の下位バイト * 2)
                      	;IN  HL=クラスタ＃,IX=FATバッファ構造体のポインタ
                      	;OUT HL=ポインタ
                      	;=================================================
  63BB                	GET_FAT_POINTER:
  63BB  AF            		XOR	A				;A<-0
  63BC  67            		LD	H,A				;H<-0
  63BD  7D            		LD	A,L				;A<-L
  63BE  CB27          		SLA	A				;A<-A*2 & CY
  63C0  6F            		LD	L,A				;L<-A
  63C1  CB14          		RL	H				;CYをHのLSBへ
  63C3  DD5E04        		LD	E,(IX+IDX_BADR)			;DE<-FATバッファの先頭アドレス+(クラスタ＃の下位バイト*2)
  63C6  DD5605        		LD	D,(IX+IDX_BADR+1)		;
  63C9  19            		ADD	HL,DE				;
  63CA  C9            		RET					;
                      	
                      	;=================================================
                      	;[FAT]FATから空きクラスタを探す
                      	;・！入力クラスタ＃は探索対象外！
                      	;IN  HL=クラスタ＃
                      	;OUT HL=空きクラスタ＃,CY=1:見つかった
                      	;=================================================
  63CB                	FIND_NULL_CLSTR:
  63CB  E5            		PUSH	HL				;二次探索用にクラスタ＃を退避
  63CC  11F6FF        		LD	DE,MAX_CLSTR			;
  63CF  EB            		EX	DE,HL				;
  63D0  B7            		OR	A				;CY<-0
  63D1  ED52          		SBC	HL,DE				;
  63D3  EB            		EX	DE,HL				;
  63D4  383C          		JR	C,.ERR1				;クラスタ＃が上限値を超えていたらエラー
  63D6  2811          		JR	Z,.L4				;クラスタ＃＝最終クラスタ＃なら二次探索へ
  63D8  42            		LD	B,D				;BC=カウンタ<-最終クラスタ＃-クラスタ＃
  63D9  4B            		LD	C,E				;
  63DA  23            		INC	HL				;！重要！次のクラスタ＃から探索
  63DB  CD0864        	.L1:	CALL	.SUB				;FATデータが0000HならZ=1になる
  63DE  2003          		JR	NZ,.L2				;
  63E0  D1            		POP	DE				;降順探索用スタックを捨てる
  63E1  1823          		JR	.FOUND				;発見したので終了へ
  63E3  23            	.L2:	INC	HL				;クラスタ＃を１進める
  63E4  0B            		DEC	BC				;カウンタが０になるまで繰り返す
  63E5  78            		LD	A,B				;
  63E6  B1            		OR	C				;
  63E7  20F2          		JR	NZ,.L1				;
  63E9  E1            	.L4:	POP	HL				;クラスタ＃復帰
  63EA  010200        		LD	BC,MIN_CLSTR			;クラスタ＃＝最小クラスタ＃なら終了へ
  63ED  B7            		OR	A				;
  63EE  ED42          		SBC	HL,BC				;
  63F0  3820          		JR	C,.ERR1				;クラスタ＃が下限値を超えていたらエラー
  63F2  2810          		JR	Z,.NOT				;
  63F4  44            		LD	B,H				;BC=カウンタ<-クラスタ＃-最小クラスタ＃
  63F5  4D            		LD	C,L				;
  63F6  210200        		LD	HL,MIN_CLSTR			;HL<-最小クラスタ＃
  63F9  CD0864        	.L3:	CALL	.SUB				;FATデータが0000HならZ=1になる
  63FC  2808          		JR	Z,.FOUND			;発見したので終了へ
  63FE  23            		INC	HL				;クラスタ＃を１進める
  63FF  0B            		DEC	BC				;カウンタが０になるまで繰り返す
  6400  78            		LD	A,B				;
  6401  B1            		OR	C				;
  6402  20F5          		JR	NZ,.L3				;
  6404  B7            	.NOT:	OR	A				;見つからなかった CY<-0
  6405  C9            		RET					;
                      	
  6406  37            	.FOUND:	SCF					;発見で終了 CY<-1
  6407  C9            		RET					;
                      	
  6408  E5            	.SUB:	PUSH	HL				;クラスタ＃退避
  6409  C5            		PUSH	BC
  640A  CD8E63        		CALL	READ_FAT_DATA			;DE<-FATデータ
  640D  C1            		POP	BC
  640E  E1            		POP	HL				;クラスタ＃復帰
  640F  7A            		LD	A,D				;FATデータが0000HならZ=1
  6410  B3            		OR	E				;
  6411  C9            		RET					;
                      	
  6412  FF            	.ERR1:	DB	0FFH				;TRAP
                      	
[EOF:FAT.asm]
                      	INCLUDE	"BUFFER.asm"				;バッファ
                      	
                      	;-----------------------------
                      	;バッファ構造体
                      	;-----------------------------
                      	;+00 セクタ＃ LSB
                      	;+01
                      	;+02
                      	;+03 セクタ＃ MSB
                      	;+04 バッファポインタ L
                      	;+05 バッファポインタ H
                      	;+06 更新フラグ
                      	;-----------------------------
                      	
                      	;=================================================
                      	;[BFFR]バッファ構造体を初期化する
                      	;IN  -
                      	;OUT -
                      	;=================================================
  6413                	INIT_BFFR:
  6413  21AF7C        		LD	HL,FAT1_BFFR_STRCT		;=FAT1用
  6416  11A378        		LD	DE,FAT_BFFR			;バッファの先頭アドレス
  6419  CD2B64        		CALL	.SUB
  641C  21B67C        		LD	HL,FAT2_BFFR_STRCT		;=FAT2用
  641F  11A378        		LD	DE,FAT_BFFR			;！バッファ領域をFATと共通にすることで複製になる！
  6422  CD2B64        		CALL	.SUB
  6425  21BD7C        		LD	HL,FILE_BFFR_STRCT		;=ファイル用
  6428  11A37A        		LD	DE,FILE_BFFR			;
  642B  CD1F6B        	.SUB:	CALL	DW_CLR				;バッファ構造体のセクタ＃を00000000Hにセットする
  642E  E5            		PUSH	HL				;
  642F  DDE1          		POP	IX				;
  6431  DD7304        		LD	(IX+IDX_BADR),E			;バッファの先頭アドレスをセットする
  6434  DD7205        		LD	(IX+IDX_BADR+1),D		;
  6437  DD360600      		LD	(IX+IDX_BUPD),FALSE		;バッファの更新フラグを降ろす
  643B  CD5964        		CALL	CLR_BFFR			;バッファの内容をゼロクリアする
  643E  C9            		RET					;
                      	
                      	;=================================================
                      	;[BFFR]バッファをメディアに書き込む
                      	;・更新フラグが立っている場合のみ書き込まれる
                      	;=================================================
  643F                	FLUSH_BFFR:
  643F  DDE5          		PUSH	IX				;
  6441  DD21BD7C      		LD	IX,FILE_BFFR_STRCT		;
  6445  CD8C64        		CALL	SAVE_BFFR			;
  6448  DD21AF7C      		LD	IX,FAT1_BFFR_STRCT		;
  644C  CD8C64        		CALL	SAVE_BFFR			;
  644F  DD21B67C      		LD	IX,FAT2_BFFR_STRCT		;
  6453  CD8C64        		CALL	SAVE_BFFR			;
  6456  DDE1          		POP	IX				;
  6458  C9            		RET					;
                      	
                      	;=================================================
                      	;[BFFR]バッファの内容をゼロクリアする
                      	;IN  IX=バッファ構造体のポインタ
                      	;=================================================
  6459                	CLR_BFFR:
  6459  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-バッファの先頭アドレス
  645C  DD6605        		LD	H,(IX+IDX_BADR+1)		;
  645F  E5            		PUSH	HL				;
  6460  D1            		POP	DE				;
  6461  13            		INC	DE				;
  6462  3600          		LD	(HL),00H			;
  6464  01FF01        		LD	BC,SCTR_SIZE-1			;
  6467  EDB0          		LDIR					;
  6469  C9            		RET					;
                      	
                      	;=================================================
                      	;[BFFR]指定されたバッファにセクタを読み込む
                      	;-------------------------------------------------
                      	;IN  IX=バッファ構造体のポインタ,(DW0)=読み込みたいセクタ＃
                      	;OUT (IX+0) ~ (IX+3)=読み込まれたセクタ＃
                      	;=================================================
  646A                	LOAD_BFFR:
  646A  DDE5          		PUSH	IX				;
  646C  E1            		POP	HL				;
  646D  11317D        		LD	DE,DW0				;=読み込みたいセクタ＃
  6470  CD8A6A        		CALL	DW_CP				;目的のセクタがバッファされていれば終了
  6473  3801          		JR	C,.L1				;条件:CY=0,Z=1
  6475  C8            		RET	Z				;
  6476  CD8C64        	.L1:	CALL	SAVE_BFFR			;現在のバッファ内容が更新されていればメディアに書き戻す
  6479  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-バッファの先頭アドレス
  647C  DD6605        		LD	H,(IX+IDX_BADR+1)		;
  647F  CD1B69        		CALL	READ_SCTR			;セクタ(DW0)をバッファHLに読み込む。エラーなら戻らずに終了する
  6482  21317D        		LD	HL,DW0				;バッファ構造体のセクタ＃を更新する！最後に行うこと！
  6485  DDE5          		PUSH	IX				;
  6487  D1            		POP	DE				;
  6488  CDAB6A        		CALL	DW_COPY				;
                      	
                      	IF DEBUG
;;                   -		PUSH	HL
;;                   -		PUSH	DE
;;                   -		PUSH	BC
;;                   -	
;;                   -		CALL	IPRINT
;;                   -		DB	"<R>",EOL
;;                   -		LD	HL,DW0
;;                   -		CALL	PRT_DW_HEX
;;                   -		CALL	PUT_CR
;;                   -	
;;                   -		POP	BC
;;                   -		POP	DE
;;                   -		POP	HL
                      	ENDIF
  648B  C9            		RET
                      	
                      	
                      	;=================================================
                      	;[BFFR]指定されたバッファをセクタに書き込む
                      	;IN  IX=バッファ構造体のポインタ
                      	;OUT 
                      	;=================================================
  648C                	SAVE_BFFR:
  648C  DD7E06        		LD	A,(IX+IDX_BUPD)			;バッファの更新フラグが降りていれば書き戻さない
  648F  B7            		OR	A				;
  6490  C8            		RET	Z				;
  6491  CDB76A        		CALL	DW0_PUSH			;！重要！
  6494  DD360600      		LD	(IX+IDX_BUPD),FALSE		;バッファの更新フラグを降ろす
  6498  DDE5          		PUSH	IX				;(DW0)<-バッファに読み込まれているセクタ＃
  649A  E1            		POP	HL				;
  649B  11317D        		LD	DE,DW0				;
  649E  CDAB6A        		CALL	DW_COPY				;
  64A1  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-バッファの先頭アドレス
  64A4  DD6605        		LD	H,(IX+IDX_BADR+1)		;
  64A7  CD2469        		CALL	WRITE_SCTR			;セクタ(DW0)にバッファのデータを書き込む
                      	
                      	IF DEBUG
;;                   -		PUSH	HL
;;                   -		PUSH	DE
;;                   -		PUSH	BC
;;                   -	
;;                   -		CALL	IPRINT
;;                   -		DB	"<W>",EOL
;;                   -		LD	HL,DW0
;;                   -		CALL	PRT_DW_HEX
;;                   -		CALL	PUT_CR
;;                   -	
;;                   -		POP	BC
;;                   -		POP	DE
;;                   -		POP	HL
                      	ENDIF
                      	
  64AA  CDDD6A        		CALL	DW0_POP				;！重要！
  64AD  C9            		RET
                      	
                      	
[EOF:BUFFER.asm]
                      	INCLUDE	"CD.asm"				;ディレクトリ変更
                      	
                      	;=================================================
                      	;[CD]ディレクトリエントリバッファのエントリ名をゼロクリアする
                      	;=================================================
  64AE                	CLR_DNAME:
  64AE  E5            		PUSH	HL				;
  64AF  21C47C        		LD	HL,DNAME			;
  64B2  CD5077        		CALL	NULL_STR			;
  64B5  E1            		POP	HL				;
  64B6  C9            		RET
                      	
                      	;=================================================
                      	;[CD]パス文字列で指定されたディレクトリに、ワーキングディレクトリを移動する
                      	;IN  (ARG0)=パス文字列の先頭アドレス
                      	;OUT HL=エントリ名の先頭アドレス,(WDIR_CLSTR)=新しいワーキングディレクトリのクラスタ＃,(WDIR_ORG)=実行前ワーキングディレクトリのクラスタ＃
                      	;=================================================
  64B7                	CHANGE_WDIR:
  64B7  CD4365        		CALL	STORE_WDIR			;ワーキングディレクトリのクラスタ＃を退避する
  64BA  2AA37C        		LD	HL,(ARG0)			;HL<-パス文字列の先頭アドレス
  64BD  CDEC64        		CALL	SPLIT_FPATH			;パスとファイル名を00Hで分割する
  64C0  D0            		RET	NC				;CY=1ならパス部が存在するので、ディレクトリを移動する
  64C1  CD1365        		CALL	TRACE_PATH			;
  64C4  23            		INC	HL				;HLは分割点を指しているので、１つ進めてファイル名の先頭に合わせる
  64C5  C9            		RET
                      	
                      	;=================================================
                      	;[CD]ワーキングディレクトリを、(DIR_ENTRY)に一致するサブディレクトリに移動する
                      	;IN  (DIR_ENTRY+IDX_NAME),(DIR_ENTRY+IDX_ATRB)
                      	;OUT (WDIR_CLSTR)
                      	;=================================================
  64C6                	ENTER_SUBDIR:
  64C6  E5            		PUSH	HL				;
  64C7  3AC57C        		LD	A,(DIR_ENTRY+IDX_NAME)		;文字列の先頭が00Hなら中身は空なので終了する
  64CA  B7            		OR	A				;
  64CB  2817          		JR	Z,.EXIT				;
  64CD  21C47C        		LD	HL,DNAME			;
  64D0  CD5165        		CALL	EOL2SPC				;エントリ名の00Hをすべて20Hに変換する
  64D3  3E10          		LD	A,ATRB_DIR			;
  64D5  32D07C        		LD	(DIR_ENTRY+IDX_ATRB),A		;
  64D8  CD6765        		CALL	GET_DENT.MAIN			;
  64DB  CA2B78        		JP	Z,ERR_NOT_FOUND			;
  64DE  2ADF7C        		LD	HL,(DIR_ENTRY+IDX_FAT)		;HL<-一致したディレクトリエントリのクラスタ＃
  64E1  22107D        	.E1:	LD	(WDIR_CLSTR),HL			;(WDIR_CLSTR)<-ディレクトリエントリのクラスタ＃
  64E4  E1            	.EXIT:	POP	HL				;
  64E5  C9            		RET					;
                      	
                      	;=================================================
                      	;[CD]ワーキングディレクトリをルートディレクトリに移動する
                      	;=================================================
  64E6                	ENTER_ROOT:
  64E6  E5            		PUSH	HL
  64E7  210000        		LD	HL,ROOT
  64EA  18F5          		JR	ENTER_SUBDIR.E1
                      	
                      	;=================================================
                      	;[CD]パス付きファイル名を、パス部とファイル名部に分割する
                      	;・例 "/DIR/DIR/FILE.EXT" -> "/DIR/DIR",00H,"FILE.EXT"
                      	;IN  HL=文字列の先頭アドレス
                      	;OUT HL=文字列の先頭アドレス,CY=1:パスとファイル名を分割した
                      	;=================================================
  64EC                	SPLIT_FPATH:
  64EC  E5            		PUSH	HL				;
  64ED  E5            		PUSH	HL				;文字列の先頭アドレスを退避
  64EE  7E            	.L1:	LD	A,(HL)				;HLを文字列の末尾+1まで進める
  64EF  23            		INC	HL				;
  64F0  CD4B77        		CALL	IS_EOT				;
  64F3  20F9          		JR	NZ,.L1				;
  64F5  2B            		DEC	HL				;HL<-末尾アドレス
  64F6  D1            		POP	DE				;DE<-先頭アドレス
  64F7  CDD35E        		CALL	CPHLDE				;末尾アドレス:先頭アドレス
  64FA  2815          		JR	Z,.EXIT				;文字列の先頭アドレスと末尾アドレスが同じなら戻る。CY<-0
  64FC  E5            		PUSH	HL				;文字列の末尾アドレスを退避
  64FD  B7            		OR	A				;
  64FE  ED52          		SBC	HL,DE				;HL<-末尾アドレス-先頭アドレス=文字列の長さ-1
  6500  23            		INC	HL				;HL<-文字列の長さ
  6501  44            		LD	B,H				;BC<-文字列の長さ
  6502  4D            		LD	C,L				;
  6503  E1            		POP	HL				;HL<-文字列の末尾アドレス
  6504  3E2F          		LD	A,"/"				;A<-検索する文字
  6506  EDB9          		CPDR					;A:(HL),HL--,BC--
  6508  2803          		JR	Z,.FOUND			;
  650A  B7            		OR	A				;CY<-0
  650B  1804          		JR	.EXIT				;
                      	
  650D  AF            	.FOUND:	XOR	A				;分割点に識別用コードを挿入する
  650E  23            		INC	HL				;
  650F  77            		LD	(HL),A				;
  6510  37            		SCF					;CY<-1
  6511  E1            	.EXIT:	POP	HL				;
  6512  C9            		RET					;
                      	
                      	;=================================================
                      	;[CD]パス文字列の先頭から00Hまでの範囲を解析し、順次ワーキングディレクトリを移動する
                      	;IN  HL=パス文字列の先頭アドレス
                      	;OUT (WDIR_CLSTR)=パス文字列から求められたクラスタ＃,HL=エントリ名の開始アドレス-1
                      	;=================================================
  6513                	TRACE_PATH:
  6513  7E            		LD	A,(HL)				;！重要！最初の文字が00Hなら「ルート」に移動して終了
  6514  B7            		OR	A				;例えば"/FILE.EXT" は 00H,"FILE.EXT" と変換されるため
  6515  28CF          		JR	Z,ENTER_ROOT			;
  6517  FE2F          		CP	"/"				;最初の文字が"/"なら「ルート」に移動
  6519  2004          		JR	NZ,.L4				;
  651B  CDE664        		CALL	ENTER_ROOT			;
  651E  23            		INC	HL				;
  651F  CDAE64        	.L4:	CALL	CLR_DNAME			;バッファのエントリ名を00Hでクリア
  6522  7E            	.L1:	LD	A,(HL)				;Aが00Hまたは22Hなら
  6523  CD4B77        		CALL	IS_EOT				;
  6526  289E          		JR	Z,ENTER_SUBDIR			;バッファに残っているディレクトリに移動して終了
  6528  23            		INC	HL				;区切り文字検出
  6529  FE2F          		CP	"/"				;
  652B  2005          		JR	NZ,.ADD				;
  652D  CDC664        		CALL	ENTER_SUBDIR			;ディレクトリ移動実行
  6530  18ED          		JR	.L4				;
                      	
  6532  E5            	.ADD:	PUSH	HL				;
  6533  CD2D77        		CALL	FIX_CHR				;文字コードを修正
  6536  CD3677        		CALL	IS_NGCHR			;使用できない文字を検出
  6539  21C47C        		LD	HL,DNAME			;
  653C  4F            		LD	C,A				;
  653D  CD5D77        		CALL	ADD_STR				;エントリ名に文字を追加する
  6540  E1            		POP	HL				;
  6541  18DF          		JR	.L1				;
                      	
                      	;=================================================
                      	;[CD]ワーキングディレクトリのクラスタ＃を退避する
                      	;IN  (WDIR_CLSTR)
                      	;OUT (WDIR_ORG)
                      	;=================================================
  6543                	STORE_WDIR:
  6543  2A107D        		LD	HL,(WDIR_CLSTR)			;
  6546  22127D        		LD	(WDIR_ORG),HL			;
  6549  C9            		RET
                      	
                      	;=================================================
                      	;[CD]ワーキングディレクトリのクラスタ＃を復帰する
                      	;IN  (WDIR_ORG)
                      	;OUT (WDIR_CLSTR)
                      	;=================================================
  654A                	RESTORE_WDIR:
  654A  2A127D        		LD	HL,(WDIR_ORG)			;
  654D  22107D        		LD	(WDIR_CLSTR),HL			;
  6550  C9            		RET
                      	
                      	;=================================================
                      	;[STR]文字列の00Hを20Hに変換する
                      	;IN  HL=文字列の先頭アドレス
                      	;OUT 文字列(HL)
                      	;=================================================
  6551                	EOL2SPC:
  6551  46            		LD	B,(HL)				;B<-文字数
  6552  23            		INC	HL				;
  6553  7E            	.L1:	LD	A,(HL)				;
  6554  B7            		OR	A				;
  6555  2002          		JR	NZ,.L2				;
  6557  3620          		LD	(HL),SPC			;
  6559  23            	.L2:	INC	HL				;
  655A  10F7          		DJNZ	.L1				;
  655C  C9            		RET
                      	
[EOF:CD.asm]
                      	INCLUDE	"DIR.asm"				;ディレクトリエントリ
                      	
                      	;--------------------------
                      	;ディレクトリエントリ構造
                      	;--------------------------
                      	;00~07H:ファイル名	:8	IDX_NAME
                      	;08~0AH:拡張子		:3	IDX_EXT
                      	;0B    :属性		:1	IDX_ATRB
                      	;0C~0DH:未使用		:2
                      	;0E~0FH:作成時刻	:2	IDX_CTIME
                      	;10~11H:作成日時	:2	IDX_CDATE
                      	;12~13H:アクセス日付	:2	IDX_ADATE
                      	;14~15H:未使用		:2
                      	;16~17H:更新時刻	:2	IDX_TIME
                      	;18~19H:更新日付	:2	IDX_DATE
                      	;1A~1BH:FATエントリ	:2	IDX_FAT
                      	;1C~1FH:ファイルサイズ	:4	IDX_SIZE
                      	;--------------------------
                      	
                      	;=================================================
                      	;[DIR]エントリ名と属性に一致するディレクトリエントリを探して(DIR_ENTRY)に格納する
                      	;・ワーキングディレクトリ内が対象
                      	;IN  HL=エントリ名の先頭アドレス,C=属性値
                      	;OUT (DIR_ENTRY),Z=1:見つからなかった
                      	;=================================================
  655D                	GET_DENT:
  655D  CD6267        		CALL	CLR_DENT_BFFR			;ディレクトリエントリバッファをクリアする
  6560  79            		LD	A,C				;
  6561  32D07C        		LD	(DIR_ENTRY+IDX_ATRB),A		;
  6564  CDB876        		CALL	STR2SFN				;テキストポインタの文字列を8.3形式ファイル名に変換し、(DIR_ENTRY+IDX_NAME)にセットする
  6567  2A107D        	.MAIN:	LD	HL,(WDIR_CLSTR)			;
  656A  FD21A466      		LD	IY,GET_DENT_SUB			;IY<-ディレクトリエントリ検索サブルーチン
  656E  CD3A66        		CALL	DIR_WALK			;ディレクトリ巡回処理
  6571  3AEB7C        		LD	A,(FOUND)			;A<-結果フラグ
  6574  B7            		OR	A				;不一致ならZ<-1
  6575  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]ディレクトリエントリの有効性をチェックする
                      	;・無効なら直前の呼び出し元をキャンセルして、その親に戻す
                      	;IN  HL=ディレクトリエントリの先頭アドレス
                      	;OUT CY=1:エントリ終端
                      	;=================================================
  6576                	IS_VALID_DENT:
  6576  7E            		LD	A,(HL)				;エントリの先頭が「無効」を示すIDなら
  6577  FEE5          		CP	ID_DISABLED			;次のエントリへスキップする
  6579  2003          		JR	NZ,.L1				;
  657B  F1            		POP	AF				;戻りアドレスを捨てる
  657C  B7            		OR	A				;CY<-0
  657D  C9            		RET					;
  657E  B7            	.L1:	OR	A				;エントリの先頭が00Hなら終了へ
  657F  C0            		RET	NZ				;
  6580  F1            		POP	AF				;戻りアドレスを捨てる
  6581  37            		SCF					;終了フラグを立てる
  6582  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]読み込み専用属性チェック
                      	;IN  (DIR_ENTRY+IDX_ATRB)
                      	;OUT -
                      	;=================================================
  6583                	IS_READ_ONLY:
  6583  3AD07C        		LD	A,(DIR_ENTRY+IDX_ATRB)		;
  6586  E601          		AND	00000001B			;
  6588  C8            		RET	Z				;
  6589  212178        		LD	HL,MSG_READ_ONLY		;
  658C  C3FF69        		JP	ERR				;
                      	
                      	;=================================================
                      	;[DIR]ディレクトリエントリのFATエントリが空なら空きクラスタを探して、値をFATエントリとターゲットクラスタにセットする
                      	;IN  (DIR_ENTRY+IDX_FAT)
                      	;OUT (TGT_CLSTR)
                      	;=================================================
  658F                	SET_DENT_FAT:
  658F  2ADF7C        		LD	HL,(DIR_ENTRY+IDX_FAT)		;HL<-FATエントリ
  6592  7C            		LD	A,H				;
  6593  B5            		OR	L				;
  6594  2011          		JR	NZ,.L1				;FATエントリが0000Hなら空きクラスタを探す
  6596  2A147D        		LD	HL,(TGT_CLSTR)			;空きクラスタを探す起点となるクラスタ＃
  6599  CDCB63        		CALL	FIND_NULL_CLSTR			;HL<-空きクラスタ＃
  659C  3806          		JR	C,.FOUND			;
  659E  21EF77        		LD	HL,MSG_MEDIA_FULL		;見つからなければエラー
  65A1  C3FF69        		JP	ERR				;
                      	
  65A4  22DF7C        	.FOUND:	LD	(DIR_ENTRY+IDX_FAT),HL		;FATエントリ<-空きクラスタ＃
  65A7  22147D        	.L1:	LD	(TGT_CLSTR),HL			;ターゲットクラスタ<-FATエントリ
  65AA  C9            		RET
                      	
                      	;=================================================
                      	;[DIR]指定した属性と名前を持った、空のディレクトリエントリを作成する
                      	;・FATエントリ値とファイルサイズは0にセットされる
                      	;・ディレクトリエントリがすでに存在すれば、更新日時のみを新しくする
                      	;IN  C=属性,HL=名前の先頭アドレス
                      	;OUT Z=1:
                      	;=================================================
  65AB                	TOUCH:
  65AB  CD5D65        		CALL	GET_DENT			;すでに存在すればZ<-0
  65AE  201C          		JR	NZ,.UP				;
  65B0  2A107D        	.NEW:	LD	HL,(WDIR_CLSTR)			;
  65B3  FD219966      		LD	IY,SEARCH_NULL_DENT		;IY<-ワーキングディレクトリから空エントリのアドレスを探すサブルーチン
  65B7  CD3A66        		CALL	DIR_WALK			;
  65BA  3AEB7C        		LD	A,(FOUND)			;
  65BD  B7            		OR	A				;
  65BE  2006          		JR	NZ,.L1				;
  65C0  21F477        		LD	HL,MSG_DIR_FULL			;見つからなければエラー
  65C3  C3FF69        		JP	ERR				;
                      	
  65C6  21D37C        	.L1:	LD	HL,DIR_ENTRY+IDX_CTIME		;ディレクトリエントリバッファの「作成日時」に現在日時をセットする
  65C9  CDF765        		CALL	SET_DATETIME			;
  65CC  21DB7C        	.UP:	LD	HL,DIR_ENTRY+IDX_TIME		;ディレクトリエントリバッファの「更新日時」に現在日時をセットする
  65CF  CDF765        		CALL	SET_DATETIME			;
  65D2  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]ディレクトリエントリバッファの内容をメディアに書き込む
                      	;IN  (DIR_ENTRY),(DIR_ENTRY.BP)
                      	;=================================================
  65D3                	WRITE_DENT:
  65D3  DD21BD7C      		LD	IX,FILE_BFFR_STRCT		;
  65D7  21E57C        		LD	HL,DIR_ENTRY.SCTR		;(DW0)<-ディレクトリエントリの格納先セクタ＃
  65DA  11317D        		LD	DE,DW0				;
  65DD  CDAB6A        		CALL	DW_COPY				;
  65E0  CD6A64        		CALL	LOAD_BFFR			;
  65E3  2AE97C        		LD	HL,(DIR_ENTRY.BP)		;
  65E6  EB            		EX	DE,HL				;DE<-ディレクトリエントリの格納先アドレス
  65E7  21C57C        		LD	HL,DIR_ENTRY			;HL<-ディレクトリエントリバッファの先頭アドレス
  65EA  012000        		LD	BC,DENT_SIZE			;BC<-ディレクトリエントリバッファのサイズ
  65ED  EDB0          		LDIR					;ディレクトリエントリをファイルバッファにコピーする
  65EF  DD3606FF      		LD	(IX+IDX_BUPD),TRUE		;バッファの更新フラグを立てる
  65F3  CD8C64        		CALL	SAVE_BFFR			;バッファを書き戻す
  65F6  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]指定されたアドレスにエンコードされた現在日時をセットする
                      	;IN  HL=書き込み先のアドレス
                      	;OUT 
                      	;=================================================
  65F7                	SET_DATETIME:
  65F7  E5            		PUSH	HL				;書き込み先のアドレスを退避
  65F8  CD0216        		CALL	TIME_READ			;システムワークに日時データをセットする
  65FB  3A76EA        		LD	A,(DT_SEC)			;秒
  65FE  CD2F6A        		CALL	BCD2BIN				;
  6601  4F            		LD	C,A				;
  6602  3A77EA        		LD	A,(DT_MIN)			;分
  6605  CD2F6A        		CALL	BCD2BIN				;
  6608  5F            		LD	E,A				;
  6609  3A78EA        		LD	A,(DT_HOUR)			;時
  660C  CD2F6A        		CALL	BCD2BIN				;
  660F  57            		LD	D,A				;
  6610  CD1973        		CALL	ENC_TIME			;IN:C,D,E OUT:HL=エンコードされた時刻
  6613  EB            		EX	DE,HL				;
  6614  E1            		POP	HL				;
  6615  73            		LD	(HL),E				;
  6616  23            		INC	HL				;
  6617  72            		LD	(HL),D				;
  6618  23            		INC	HL				;
  6619  E5            		PUSH	HL				;書き込み先のアドレスを退避
  661A  3A7BEA        		LD	A,(DT_YEAR)			;年 BCD形式
  661D  CD2F6A        		CALL	BCD2BIN				;BCDをバイナリに変換 IN:A,OUT:A
  6620  C614          		ADD	A,20				;FAT16では年の基準値が「1980」なので、入力値に20を加える 例:2019->19+20=39
  6622  57            		LD	D,A				;
  6623  3A7AEA        		LD	A,(DT_MONTH)			;月
  6626  CD2F6A        		CALL	BCD2BIN				;
  6629  5F            		LD	E,A				;
  662A  3A79EA        		LD	A,(DT_DAY)			;日
  662D  CD2F6A        		CALL	BCD2BIN				;
  6630  4F            		LD	C,A				;
  6631  CD3173        		CALL	ENC_DATE			;IN:C,D,E OUT:HL=エンコードされた日付
  6634  EB            		EX	DE,HL				;DE=エンコードされた日付
  6635  E1            		POP	HL				;HL=書き込み先のアドレス
  6636  73            		LD	(HL),E				;
  6637  23            		INC	HL				;HL++
  6638  72            		LD	(HL),D				;
  6639  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]ディレクトリの全エントリに対し共通な処理を行う
                      	;・GET_DENT_SUB
                      	;・SEARCH_NULL_DENT -> FIND_FREE_DENT
                      	;・PRT_DENT -> PRT_DENT
                      	;IN  HL=ディレクトリのクラスタ＃,IY=サブルーチンのアドレス
                      	;OUT 
                      	;=================================================
  663A                	DIR_WALK:
  663A  3E00          		LD	A,FALSE				;発見フラグを降ろす
  663C  32EB7C        		LD	(FOUND),A			;
  663F  DD21BD7C      		LD	IX,FILE_BFFR_STRCT		;
  6643  7C            		LD	A,H				;HL=0000Hならルートディレクトリの処理へ
  6644  B5            		OR	L				;
  6645  280A          		JR	Z,.ROOT				;
  6647  E5            	.L4:	PUSH	HL				;クラスタ＃を退避
  6648  3AEE7C        		LD	A,(SCTRS_PER_CLSTR)		;B<-クラスタの総セクタ数
  664B  47            		LD	B,A				;
  664C  CD2D69        		CALL	GET_FIRST_SCTR			;(DW0)<-クラスタHLの開始セクタ＃
  664F  180E          		JR	.L2				;
                      	
  6651  E5            	.ROOT:	PUSH	HL				;クラスタ＃を退避(スタック合わせのダミー)
  6652  3A037D        		LD	A,(ROOT_SCTR_SIZE)		;B<-ルートディレクトリの総セクタ数
  6655  47            		LD	B,A				;
  6656  21087D        		LD	HL,ROOT_SCTR			;(DW0)<-ルートディレクトリの開始セクタ＃
  6659  11317D        		LD	DE,DW0				;
  665C  CDAB6A        		CALL	DW_COPY				;
  665F  C5            	.L2:	PUSH	BC				;ループ回数を退避
  6660  CD6A64        		CALL	LOAD_BFFR			;セクタ(DW0)をバッファIXに読み込む
  6663  0610          		LD	B,DENT_PER_SCTR			;=１セクタ当たりのディレクトリエントリ数
  6665  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-バッファの先頭アドレス
  6668  DD6605        		LD	H,(IX+IDX_BADR+1)		;
  666B  C5            	.L1:	PUSH	BC				;
  666C  E5            		PUSH	HL				;
  666D  DDE5          		PUSH	IX				;
  666F  117566        		LD	DE,.RET				;戻りアドレスをスタックに積む
  6672  D5            		PUSH	DE				;
  6673  FDE9          		JP	(IY)				;IY=共通処理のサブルーチンアドレス。BC,HL,IX保持。CY=1:EODで終了したことを示す
                      	
  6675  DDE1          	.RET:	POP	IX				;
  6677  E1            		POP	HL				;
  6678  C1            		POP	BC				;
  6679  381B          		JR	C,.QUIT				;CY=1なら途中終了へ
  667B  112000        	.L3:	LD	DE,DENT_SIZE			;バッファポインタを次のエントリの先頭に進める
  667E  19            		ADD	HL,DE				;
  667F  10EA          		DJNZ	.L1				;ディレクトリエントリの数だけ繰り返す
  6681  CD846B        		CALL	DW0_INC				;セクタ＃++
  6684  C1            		POP	BC				;ループ回数を復帰
  6685  10D8          		DJNZ	.L2				;クラスタの最終セクタまで処理する
  6687  E1            		POP	HL				;クラスタ＃を復帰
  6688  7C            		LD	A,H				;
  6689  B5            		OR	L				;
  668A  C8            		RET	Z				;ルートディレクトリなら次のクラスタは無いので、ここで終了する
  668B  CD8E63        		CALL	READ_FAT_DATA			;DE<-HLクラスタのFATデータ
  668E  EB            		EX	DE,HL				;HL=次のクラスタ＃,DE=不要
  668F  23            		INC	HL				;次のクラスタ＃がFFFFH（ファイルエンド）なら0000Hになる
  6690  7C            		LD	A,H				;！INC命令ではフラグ変化しないので注意！
  6691  B5            		OR	L				;
  6692  C8            		RET	Z				;Z=1なら終了
  6693  2B            		DEC	HL				;HLを戻す
  6694  18B1          		JR	.L4				;
                      	
  6696  C1            	.QUIT:	POP	BC				;ループカウンタBCを捨てる
  6697  E1            		POP	HL				;クラスタ＃HLを捨てる
  6698  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]空のディレクトリエントリを探す
                      	;・新しいファイルやディレクトリを作成する時に必要
                      	;IN  HL=ディレクトリエントリの先頭アドレス
                      	;OUT Z=0:見つからなかった
                      	;=================================================
  6699                	SEARCH_NULL_DENT:
  6699  7E            		LD	A,(HL)				;
  669A  FEE5          		CP	ID_DISABLED			;
  669C  2802          		JR	Z,.FOUND			;
  669E  B7            		OR	A				;CY<-0
  669F  C0            		RET	NZ				;A!=0なら戻る ！CY=0になっていることに注意！
  66A0  CDDA66        	.FOUND:	CALL	DENT_FOUND			;エントリが見つかったことを知らせるフラグや値をセットする
  66A3  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]エントリ名と属性が一致するディレクトリエントリを(DIR_ENTRY)に読み込む
                      	;・DIR_WALK用サブルーチン
                      	;・20H ファイル（アーカイブ）
                      	;・10H ディレクトリ
                      	;IN  HL=検索対象となるディレクトリエントリの先頭アドレス
                      	;OUT (DIR_ENTRY),(FOUND)=TRUE:見つかった
                      	;=================================================
  66A4                	GET_DENT_SUB:
  66A4  CD7665        		CALL	IS_VALID_DENT			;ディレクトリエントリの有効性をチェックする
  66A7  E5            		PUSH	HL				;ファイルバッファポインタを退避
  66A8  11C57C        		LD	DE,DIR_ENTRY			;DE<-ディレクトリエントリバッファの先頭アドレス
  66AB  060B          		LD	B,DNAME_SIZE			;
  66AD  1A            	.L1:	LD	A,(DE)				;エントリ名を照合
  66AE  BE            		CP	(HL)				;
  66AF  2026          		JR	NZ,.EXIT			;一致しなければ終了
  66B1  13            		INC	DE				;
  66B2  23            		INC	HL				;
  66B3  10F8          		DJNZ	.L1				;エントリ名の文字数だけ繰り返す
  66B5  7E            		LD	A,(HL)				;A<-検索される側の属性値
  66B6  4F            		LD	C,A				;属性値を退避
  66B7  E60E          		AND	00001110B			;=ボリューム+システム+隠し属性
  66B9  201C          		JR	NZ,.EXIT			;いずれかのビットが立っていれば終了
  66BB  79            		LD	A,C				;属性値を復帰
  66BC  E610          		AND	00010000B			;ディレクトリ属性以外をマスクする
  66BE  4F            		LD	C,A				;C<-マスクされた属性値
  66BF  1A            		LD	A,(DE)				;A<-検索する側の属性値
  66C0  B7            		OR	A				;00Hなら属性チェックを省略
  66C1  2805          		JR	Z,.FOUND			;
  66C3  E610          		AND	00010000B			;ディレクトリ属性以外をマスクする
  66C5  B9            		CP	C				;ディレクトリ属性のみを比較
  66C6  200F          		JR	NZ,.EXIT			;一致しなければ終了
  66C8  E1            	.FOUND:	POP	HL				;バッファポインタを復帰
  66C9  E5            		PUSH	HL				;バッファポインタを退避
  66CA  11C57C        		LD	DE,DIR_ENTRY			;一致したディレクトリエントリを(DIR_ENTRY)にコピーする
  66CD  012000        		LD	BC,DENT_SIZE			;
  66D0  EDB0          		LDIR					;
  66D2  E1            		POP	HL				;バッファポインタを復帰
  66D3  CDDA66        		CALL	DENT_FOUND			;一致したことを知らせるフラグや値をセットする
  66D6  C9            		RET					;
                      	
  66D7  B7            	.EXIT:	OR	A				;CY<-0
  66D8  E1            		POP	HL				;
  66D9  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]GET_DENT_SUBでエントリが見つかったことを知らせるフラグや値をセットする
                      	;IN  HL=バッファポインタ,DW0=セクタ＃
                      	;OUT (DIR_ENTRY.BP),(DIR_ENTRY.SCTR),(FOUND),CY<-1
                      	;=================================================
  66DA                	DENT_FOUND:
  66DA  22E97C        		LD	(DIR_ENTRY.BP),HL		;ディレクトリエントリ情報のバッファポインタ<-HL
  66DD  21317D        		LD	HL,DW0				;
  66E0  11E57C        		LD	DE,DIR_ENTRY.SCTR		;
  66E3  CDAB6A        		CALL	DW_COPY				;ディレクトリエントリ情報のセクタ＃<-(DW0)
  66E6  3EFF          		LD	A,TRUE				;発見フラグを立てる
  66E8  32EB7C        		LD	(FOUND),A			;
  66EB  37            		SCF					;終了フラグを立てる
  66EC  C9            		RET					;
                      	
                      	;=================================================
                      	;[DIR]エントリ名出力 FILES命令用
                      	;・DIR_WALK用サブルーチン
                      	;IN  HL=バッファポインタ
                      	;OUT CY:1=END OF DATA
                      	;=================================================
  66ED                	PRT_DENT:
  66ED  CD7665        		CALL	IS_VALID_DENT			;
  66F0  C5            		PUSH	BC				;
  66F1  E5            		PUSH	HL				;
  66F2  DDE5          		PUSH	IX				;
  66F4  E5            		PUSH	HL				;IX<-バッファポインタ
  66F5  DDE1          		POP	IX				;
  66F7  CD7069        		CALL	PAUSE				;一時停止処理
  66FA  2003          		JR	NZ,.L6				;STOPキーで中断
  66FC  37            		SCF					;強制終了フラグを立てる
  66FD  184B          		JR	.EXIT2				;
                      	
  66FF  DD7E0B        	.L6:	LD	A,(IX+0BH)			;=属性値
  6702  5F            		LD	E,A				;
  6703  E60E          		AND	00001110B			;隠しファイル、システム、ボリューム属性を排除する
  6705  2042          		JR	NZ,.EXIT			;
  6707  7B            		LD	A,E				;
  6708  E610          		AND	00010000B			;=「ディレクトリ」属性
  670A  200D          		JR	NZ,.DIR				;
  670C  CD456A        		CALL	IPRINT				;
  670F  20202020202022		DB	"      ",DQUOTE,EOL		;
        00            	
  6717  180B          		JR	.NAME				;ファイル・ディレクトリ名表示へ
                      	
  6719  CD456A        	.DIR:	CALL	IPRINT				;ディレクトリマーク表示
  671C  3C4449523E2022		DB	"<DIR> ",DQUOTE,EOL		;
        00            	
  6724  060B          	.NAME	LD	B,DNAME_SIZE			;ファイル・ディレクトリ名表示
  6726  0E00          		LD	C,00H				;空白カウンタ
  6728  7E            	.L1:	LD	A,(HL)				;
  6729  FE20          		CP	SPC				;空白をピリオドに置き換える
  672B  282F          		JR	Z,.L3				;
  672D  DF            	.L2:	RST	18H				;
  672E  23            		INC	HL				;
  672F  10F7          		DJNZ	.L1				;
  6731  3E22          	.L5:	LD	A,DQUOTE			;二重引用符表示
  6733  DF            		RST	18H				;
                      	
                      	IF FALSE
;;                   -		CALL	IPRINT				;FATエントリ表示
;;                   -		DB	3AH,27H,EOL			;
;;                   -		LD	L,(IX+1AH)			;
;;                   -		LD	H,(IX+1BH)			;
;;                   -		CALL	PRTHLHEX			;
                      	ENDIF
                      	
                      	
  6734  79            		LD	A,C				;位置合わせ用の空白表示
  6735  B7            		OR	A				;
  6736  2806          		JR	Z,.L8				;
  6738  CDD45F        	.L7:	CALL	PUT_SPC				;
  673B  0D            		DEC	C				;
  673C  20FA          		JR	NZ,.L7				;
  673E  CD456A        	.L8:	CALL	IPRINT				;
  6741  2700          		DB	27H,EOL				;= "'"
                      	
                      	IF SHOW_DATE
;;                   -		LD	E,(IX+18H)			;
;;                   -		LD	D,(IX+19H)			;
;;                   -		CALL	PRT_FDATE			;日付表示
;;                   -		CALL	PUT_SPC				;
;;                   -		LD	E,(IX+16H)			;
;;                   -		LD	D,(IX+17H)			;
;;                   -		CALL	PRT_FTIME			;時刻表示
                      	ELSE
  6743  CD1568        		CALL	PRT_FSIZE			;ファイルサイズ出力
                      	ENDIF
                      	
                      	
  6746  CDCA5F        		CALL	PUT_CR				;改行
  6749  B7            	.EXIT:	OR	A				;CY<-0
  674A  DDE1          	.EXIT2:	POP	IX				;
  674C  E1            		POP	HL				;
  674D  C1            		POP	BC				;
  674E  C9            		RET					;
                      	
  674F  7E            	.L4:	LD	A,(HL)				;空白部をピリオドに置き換える
  6750  FE20          		CP	SPC				;
  6752  2808          		JR	Z,.L3				;
  6754  F5            		PUSH	AF				;
  6755  3E2E          		LD	A,"."				;
  6757  DF            		RST	18H				;
  6758  F1            		POP	AF				;
  6759  0D            		DEC	C				;
  675A  18D1          		JR	.L2				;
  675C  23            	.L3:	INC	HL				;バッファポインタ++
  675D  0C            		INC	C				;空白カウンタ++
  675E  10EF          		DJNZ	.L4				;
  6760  18CF          		JR	.L5				;
                      	
                      	;=================================================
                      	;[DIR]ディレクトリエントリバッファをクリアする
                      	;=================================================
  6762                	CLR_DENT_BFFR:
  6762  D9            		EXX
  6763  21C57C        		LD	HL,DIR_ENTRY			;
  6766  11C67C        		LD	DE,DIR_ENTRY+1			;
  6769  011F00        		LD	BC,DENT_SIZE-1			;
  676C  3600          		LD	(HL),00H			;
  676E  EDB0          		LDIR					;
  6770  D9            		EXX					;
  6771  C9            		RET					;
                      	
[EOF:DIR.asm]
                      	INCLUDE	"FS.asm"				;ファイルシステム
                      	
                      	;=================================================
                      	;[FS]自動実行
                      	;・"/HELLO.CMT"が存在すればロードしてBASICを実行する
                      	;=================================================
  6772                	AUTOEXEC:
  6772  DB08          		IN	A,(08H)				;
  6774  E640          		AND	01000000B			;"SHIFT"キーが押されていたらキャンセルする
  6776  C8            		RET	Z				;
                      	
  6777  E5            		PUSH	HL
  6778  219B67        		LD	HL,.NAME			;
  677B  CDB667        		CALL	STR2BUFF			;
  677E  213DFF        		LD	HL,STR_BUFF			;
  6781  CDA767        		CALL	IS_FILE				;
  6784  E1            		POP	HL				;
  6785  C8            		RET	Z				;
                      	
  6786  E5            		PUSH	HL
  6787  219B67        		LD	HL,.NAME			;
  678A  CDB667        		CALL	STR2BUFF			;
  678D  213DFF        		LD	HL,STR_BUFF			;
  6790  22A37C        		LD	(ARG0),HL			;
  6793  E1            		POP	HL				;
  6794  CD1675        		CALL	LOAD.E1				;
  6797  E1            		POP	HL				;！重要！
  6798  C3F43D        		JP	RUN
                      	
  679B  222F48454C4C4F	.NAME:	DB	DQUOTE,"/HELLO.CMT",EOL		;
        2E434D5400    	
                      	
                      	;=================================================
                      	;[FS]ファイルが存在するかを調べる
                      	;IN  HL=パス文字列の先頭アドレス
                      	;OUT Z=1:存在しない
                      	;=================================================
  67A7                	IS_FILE:
  67A7  22A37C        		LD	(ARG0),HL			;
  67AA  CDB764        		CALL	CHANGE_WDIR			;
  67AD  0E20          		LD	C,ATRB_FILE			;
  67AF  CD5D65        		CALL	GET_DENT			;
  67B2  CD4A65        		CALL	RESTORE_WDIR			;
  67B5  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]文字列式を評価して文字列バッファに格納する
                      	;=================================================
  67B6                	STR2BUFF:
  67B6  CD8F4A        		CALL	EVALEXP				;式を評価
  67B9  E5            		PUSH	HL				;TP退避
  67BA  CD9C54        		CALL	549CH				;DE<-結果の文字列の先頭アドレス
  67BD  2B            		DEC	HL				;
  67BE  2B            		DEC	HL				;
  67BF  46            		LD	B,(HL)				;B<-結果の文字列全体の長さ
  67C0  0E4F          		LD	C,STR_BUFF_SIZE-1		;C<-文字列バッファの長さ。終端識別コード用に１文字分減らす
  67C2  213DFF        		LD	HL,STR_BUFF			;HL<-文字列バッファの先頭アドレス
  67C5  1A            	.L2:	LD	A,(DE)				;
  67C6  77            		LD	(HL),A				;
  67C7  23            		INC	HL				;
  67C8  13            		INC	DE				;
  67C9  0D            		DEC	C				;
  67CA  2802          		JR	Z,.L3				;
  67CC  10F7          		DJNZ	.L2				;
  67CE  3600          	.L3:	LD	(HL),EOL			;終端コードをセットする
  67D0  E1            		POP	HL				;
  67D1  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]FAT16関連ワーク初期化
                      	;=================================================
  67D2                	INIT_FAT16:
  67D2  210000        		LD	HL,ROOT				;
  67D5  22107D        		LD	(WDIR_CLSTR),HL			;ワーキングディレクトリのクラスタ＃<-ルートディレクトリ
  67D8  210200        		LD	HL,MIN_CLSTR			;
  67DB  22147D        		LD	(TGT_CLSTR),HL			;ターゲットクラスタ＃<-最小クラスタ＃
  67DE  CD1364        		CALL	INIT_BFFR			;バッファ関連ワーク初期化
  67E1  21C47C        		LD	HL,DNAME			;ディレクトリエントリ文字列の文字数
  67E4  360B          		LD	(HL),DNAME_SIZE			;
  67E6  211F7D        		LD	HL,ATRB				;ファイル属性文字列の文字数
  67E9  3606          		LD	(HL),ATRB_SIZE			;
  67EB  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]ボリューム名を表示する
                      	;=================================================
  67EC                	PRT_VOLUME:
  67EC  21087D        		LD	HL,ROOT_SCTR			;(DW0)<-ルートディレクトリの開始セクタ＃
  67EF  11317D        		LD	DE,DW0				;
  67F2  CDAB6A        		CALL	DW_COPY				;
  67F5  DD21BD7C      		LD	IX,FILE_BFFR_STRCT		;
  67F9  CD6A64        		CALL	LOAD_BFFR			;ルートディレクトリの開始セクタをバッファIXに読み込む
  67FC  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-データポインタ=バッファの先頭アドレス
  67FF  DD6605        		LD	H,(IX+IDX_BADR+1)		;
  6802  CD456A        		CALL	IPRINT				;
  6805  566F6C3A00    		DB	"Vol:",EOL			;
  680A  060B          		LD	B,DNAME_SIZE			;
  680C  7E            	.L1:	LD	A,(HL)				;
  680D  23            		INC	HL				;
  680E  DF            		RST	18H				;
  680F  10FB          		DJNZ	.L1				;
  6811  CDCA5F        		CALL	PUT_CR				;
  6814  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]ファイルサイズを16進数で現在位置に出力する
                      	;IN  IX=ディレクトリポインタ
                      	;OUT -
                      	;=================================================
  6815                	PRT_FSIZE:
  6815  E5            		PUSH	HL				;
  6816  DD7E1E        		LD	A,(IX+1EH)			;
  6819  DDB61F        		OR	(IX+1FH)			;
  681C  3E20          		LD	A," "				;
  681E  2802          		JR	Z,.L1				;
  6820  3E2B          		LD	A,"+"				;FFFFHより大きい場合は"+"を付ける
  6822  DF            	.L1:	RST	18H				;
  6823  DD6E1C        		LD	L,(IX+1CH)			;
  6826  DD661D        		LD	H,(IX+1DH)			;
  6829  CDC05E        		CALL	PRTHLHEX			;
  682C  E1            		POP	HL				;
  682D  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]FAT16のSDがマウントされているかをチェックする
                      	;=================================================
  682E                	IS_FAT16:
  682E  E5            		PUSH	HL				;
  682F  CD6761        		CALL	MMC_INIT			;MMCをSPIモードに初期化する。オンラインでなければタイムアウトになるはず？
  6832  E1            		POP	HL				;
  6833  3AEE7C        		LD	A,(SCTRS_PER_CLSTR)		;
  6836  B7            		OR	A				;
  6837  C0            		RET	NZ				;
  6838  21D477        		LD	HL,MSG_NOT_FAT16		;
  683B  C3FF69        		JP	ERR				;
                      	
                      	;=================================================
                      	;[FS]MBRの読み込み
                      	;IN  
                      	;OUT (PP_SCTR)
                      	;=================================================
  683E                	READ_MBR:
  683E  21297D        		LD	HL,MMCADR0			;MMCアドレスを00000000Hにセット
  6841  CD1F6B        		CALL	DW_CLR				;
  6844  21FF7C        		LD	HL,PP_SCTR			;プライマリパーティションの開始セクタ＃を00000000Hにセット
  6847  CD1F6B        		CALL	DW_CLR				;
  684A  21A37A        		LD	HL,FILE_BFFR			;MBRをバッファに読み込む
  684D  0601          		LD	B,01H				;
  684F  E5            		PUSH	HL				;
  6850  CD8B62        		CALL	MMC_READ			;
  6853  E1            		POP	HL				;セクタ＃0の最初のバイトが00Hならパーティションが切られているとする
  6854  7E            		LD	A,(HL)				;
  6855  B7            		OR	A				;
  6856  C0            		RET	NZ				;
  6857  11C601        		LD	DE,IDX_PP_SCTR			;「プライマリパーティションの開始セクタ＃」をワークに保存する
  685A  19            		ADD	HL,DE				;
  685B  11FF7C        		LD	DE,PP_SCTR			;
  685E  CDAB6A        		CALL	DW_COPY				;
  6861  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]IPLの読み込み
                      	;IN  
                      	;OUT (BPB)
                      	;=================================================
  6862                	READ_IPL:
  6862  21EC7C        		LD	HL,BPB				;BPB用ワークをクリアする
  6865  11ED7C        		LD	DE,BPB+1			;
  6868  3600          		LD	(HL),00H			;
  686A  011200        		LD	BC,0013H-1			;
  686D  EDB0          		LDIR					;
  686F  CD186B        		CALL	DW0_CLR				;(DW0)<-00000000H
  6872  21A37A        		LD	HL,FILE_BFFR			;
  6875  E5            		PUSH	HL				;
  6876  CD1B69        		CALL	READ_SCTR			;IPL領域をバッファに読み込む
  6879  E1            		POP	HL				;
  687A  E5            		PUSH	HL				;バッファアドレス退避
  687B  113600        		LD	DE,0036H			;HL<-「FATタイプ文字列」の先頭アドレス
  687E  19            		ADD	HL,DE				;
  687F  113D78        		LD	DE,FAT_CODE			;コードと照合する
  6882  010800        		LD	BC,0008H			;=文字数
  6885  1A            	.L1:	LD	A,(DE)				;
  6886  EDA1          		CPI					;HL++,BC--
  6888  2806          		JR	Z,.L2				;
  688A  21D477        		LD	HL,MSG_NOT_FAT16		;
  688D  C3FF69        		JP	ERR				;
  6890  13            	.L2:	INC	DE				;
  6891  EA8568        		JP	PE,.L1				;
  6894  E1            		POP	HL				;バッファアドレス復帰
  6895  110B00        		LD	DE,IDX_BPB			;HL<-BPB領域の先頭アドレス
  6898  19            		ADD	HL,DE				;
  6899  11EC7C        		LD	DE,BPB				;BPBをワークに保存する
  689C  011300        		LD	BC,0013H			;
  689F  EDB0          		LDIR					;
  68A1  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]BPBから必要な定数を求める
                      	;・(ROOT_SCTR)<-FAT開始セクタ＃+FAT１面に必要なセクタ数*2
                      	;・(DATA_SCTR)<-ルートディレクトリのセクタ＃+(総ルートディレクトリ数*ディレクトリサイズ)/セクタサイズ
                      	;=================================================
  68A2                	READ_BPB:
  68A2  21047D        		LD	HL,FAT_SCTR			;(FAT_SCTR)<-FAT開始セクタ＃
  68A5  CD1F6B        		CALL	DW_CLR				;
  68A8  ED5BEF7C      		LD	DE,(FAT_START)			;
  68AC  73            		LD	(HL),E				;
  68AD  23            		INC	HL				;
  68AE  72            		LD	(HL),D				;
  68AF  21317D        		LD	HL,DW0				;HL<-DW0
  68B2  E5            		PUSH	HL				;
  68B3  CD186B        		CALL	DW0_CLR				;(DW0)<-00000000H
  68B6  EB            		EX	DE,HL				;DE=DW0
  68B7  2AF77C        		LD	HL,(FAT_SIZE)			;HL<-(BPB+11)=FAT１面に必要なセクタ数
  68BA  29            		ADD	HL,HL				;HL<-(BPB+11)*2
  68BB  EB            		EX	DE,HL				;DE=(BPB+11)*2,HL=DW0
  68BC  73            		LD	(HL),E				;(DW0)<-(BPB+11)*2
  68BD  23            		INC	HL				;HL++
  68BE  72            		LD	(HL),D				;
  68BF  E1            		POP	HL				;HL=DW0
  68C0  11047D        		LD	DE,FAT_SCTR			;DE<-FAT_SCTR
  68C3  CD556B        		CALL	DW_ADD				;(DW0)<-(FAT_SCTR)+(BPB+11)*2
  68C6  11087D        		LD	DE,ROOT_SCTR			;
  68C9  CDAB6A        		CALL	DW_COPY				;(ROOT_SCTR)<-(DW0)=(FAT_SCTR)+(BPB+11)*2
  68CC  2AF27C        		LD	HL,(ROOT_SIZE)			;=総ルートディレクトリ数
  68CF  29            		ADD	HL,HL				;=X*2
  68D0  29            		ADD	HL,HL				;=X*4
  68D1  29            		ADD	HL,HL				;=X*8
  68D2  29            		ADD	HL,HL				;=X*16
  68D3  29            		ADD	HL,HL				;=X*32=総ルートディレクトリ数*ディレクトリのサイズ
  68D4  B7            		OR	A				;CY<-0
  68D5  0E00          		LD	C,00H				;ルートディレクトリの総セクタ数を求める
  68D7  110002        		LD	DE,SCTR_SIZE			;=200H
  68DA  ED52          	.L1:	SBC	HL,DE				;HL<-HL-200H
  68DC  0C            		INC	C				;
  68DD  30FB          		JR	NC,.L1				;
  68DF  0D            		DEC	C				;
  68E0  21037D        		LD	HL,ROOT_SCTR_SIZE		;ルートディレクトリの総セクタ数<-C
  68E3  71            		LD	(HL),C				;
  68E4  21087D        		LD	HL,ROOT_SCTR			;
  68E7  110C7D        		LD	DE,DATA_SCTR			;
  68EA  D5            		PUSH	DE				;
  68EB  CDAB6A        		CALL	DW_COPY				;(DATA_SCTR)<-(ROOT_SCTR)
  68EE  E1            		POP	HL				;HL<-DATA_SCTR
  68EF  7E            		LD	A,(HL)				;(DATA_SCTR)<-(ROOT_SCTR)+C
  68F0  81            		ADD	A,C				;
  68F1  77            		LD	(HL),A				;
  68F2  23            		INC	HL				;
  68F3  7E            		LD	A,(HL)				;
  68F4  CE00          		ADC	A,0				;
  68F6  77            		LD	(HL),A				;
  68F7  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]セクタ＃から物理アドレスを求める
                      	;IN  (DW0)=セクタ＃
                      	;OUT (MMCADR0)=物理アドレス
                      	;=================================================
  68F8                	GET_PHYSICAL_ADRS:
  68F8  D5            		PUSH	DE				;
  68F9  E5            		PUSH	HL				;
  68FA  CDB76A        		CALL	DW0_PUSH			;(DW0)を退避
  68FD  21FF7C        		LD	HL,PP_SCTR			;(DW0)<-セクタ＃+プライマリパーティションの開始セクタ＃
  6900  11357D        		LD	DE,DW1				;
  6903  CDAB6A        		CALL	DW_COPY				;
  6906  CD496B        		CALL	DW0_ADD				;
  6909  CDE56B        		CALL	DW_X512				;(MMCADR0)<-セクタ＃*セクタサイズ=物理アドレス
  690C  21317D        		LD	HL,DW0				;
  690F  11297D        		LD	DE,MMCADR0			;
  6912  CDAB6A        		CALL	DW_COPY				;
  6915  CDDD6A        		CALL	DW0_POP				;(DW0)を復旧
  6918  E1            		POP	HL				;
  6919  D1            		POP	DE				;
  691A  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]セクタを指定領域に読み込む
                      	;IN  (DW0)=読み込みたいセクタ＃,HL=メモリ領域の先頭アドレス
                      	;OUT (MMCADR0~3)
                      	;=================================================
  691B                	READ_SCTR:
  691B  CDF868        		CALL	GET_PHYSICAL_ADRS		;(MMCADR0)<-セクタ＃(DW0)の物理アドレス
  691E  0601          		LD	B,01H				;=MMCブロック数
  6920  CD8B62        		CALL	MMC_READ			;メモリ<-セクタデータ200Hバイト
  6923  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]指定領域をセクタに書き込む
                      	;IN  (DW0)=書き込みたいセクタ＃,HL=メモリ領域の先頭アドレス
                      	;OUT (MMCADR0~3)
                      	;=================================================
  6924                	WRITE_SCTR:
  6924  CDF868        		CALL	GET_PHYSICAL_ADRS		;(MMCADR0)<-セクタ＃(DW0)の物理アドレス
  6927  0601          		LD	B,01H				;=MMCブロック数
  6929  CDB062        		CALL	MMC_WRITE			;セクタ<-メモリデータ200Hバイト
  692C  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]クラスタの開始セクタ＃を求める
                      	;IN  HL=クラスタ＃
                      	;OUT (DW0)=セクタ＃
                      	;=================================================
  692D                	GET_FIRST_SCTR:
  692D  C5            		PUSH	BC				;
  692E  D5            		PUSH	DE				;
  692F  E5            		PUSH	HL				;
  6930  7C            		LD	A,H				;HL=0000H ?
  6931  B5            		OR	L				;
  6932  200B          		JR	NZ,.L1				;
  6934  21087D        		LD	HL,ROOT_SCTR			;(DW0)<-ルートディレクトリの開始セクタ＃
  6937  11317D        		LD	DE,DW0				;
  693A  CDAB6A        		CALL	DW_COPY				;
  693D  1814          		JR	.EXIT				;
  693F  2B            	.L1:	DEC	HL				;HL<-HL-2
  6940  2B            		DEC	HL				;
  6941  3AEE7C        		LD	A,(SCTRS_PER_CLSTR)		;=１クラスタ当たりのセクタ数
  6944  5F            		LD	E,A				;
  6945  1600          		LD	D,00H				;
  6947  CDEC6B        		CALL	HLXDE				;(DW0)<-HL*DE
  694A  21317D        		LD	HL,DW0				;
  694D  110C7D        		LD	DE,DATA_SCTR			;
  6950  CD556B        		CALL	DW_ADD				;(DW0)<-セクタ＃
  6953  E1            	.EXIT:	POP	HL				;
  6954  D1            		POP	DE				;
  6955  C1            		POP	BC				;
  6956  C9            		RET					;
                      	
                      	;=================================================
                      	;[FS]ワーキングディレクトリ内からファイルを探して、そのクラスタ＃を求める
                      	;IN  HL=ファイル名の先頭アドレス
                      	;OUT (TGT_CLSTR)=一致したファイルのクラスタ＃
                      	;=================================================
  6957                	DNAME2CLSTR:
  6957  0E20          		LD	C,ATRB_FILE			;
  6959  CD5D65        		CALL	GET_DENT			;
  695C  CA2B78        		JP	Z,ERR_NOT_FOUND			;
  695F  2ADF7C        		LD	HL,(DIR_ENTRY+IDX_FAT)		;=一致したファイルのクラスタ＃
  6962  7C            		LD	A,H				;クラスタ＃が0000Hなら空ファイルなのでエラーへ
  6963  B5            		OR	L				;
  6964  CA3178        		JP	Z,ERR_EMPTY_FILE		;
  6967  22147D        		LD	(TGT_CLSTR),HL			;一致したファイルのクラスタ＃をターゲットクラスタにセットする
  696A  C9            		RET					;
                      	
[EOF:FS.asm]
                      	INCLUDE	"SUBS.asm"				;汎用サブルーチン
                      	;=================================================
                      	;[SUB]インフォメーションスイッチがオンかチェックする
                      	;IN  -
                      	;OUT Z=1:オフ（情報を表示しないモード）
                      	;=================================================
  696B                	IS_INFO_ON:
  696B  3A797D        		LD	A,(INFO_SW)
  696E  A7            		AND	A
  696F  C9            		RET
                      	
                      	;=================================================
                      	;[SUB]日付が79年かチェックする
                      	;IN  (DT_YEAR)
                      	;OUT CF=1:79年
                      	;=================================================
                      	IF FALSE
;;                   -	IS_YEAR79:
;;                   -		LD	A,(DT_YEAR)			;
;;                   -		CP	79H				;=79年
;;                   -		RET	NZ				;
;;                   -		CALL	IPRINT				;
;;                   -		DB	"SET",CR,LF			;
;;                   -		DB	"DATE$=",DQUOTE,"00/00/00",DQUOTE
;;                   -		DB	":TIME$=",DQUOTE,"00:00:00",DQUOTE,CR,LF,EOL
;;                   -		RET
                      	ENDIF
                      	
                      	;=================================================
                      	;[SUB]一時停止
                      	;IN  
                      	;OUT :Z=1:STOPキーが押された
                      	;=================================================
  6970                	PAUSE:
  6970  DB09          		IN	A,(09H)				;
  6972  CB47          		BIT	00H,A				;STOP押下ならZ=1
  6974  C8            		RET	Z				;処理中断へ
  6975  CB7F          		BIT	07H,A				;エスケープ押下なら一時停止
  6977  C0            		RET	NZ				;
  6978  CD750F        		CALL	KEYWAIT				;リターン入力で再開
  697B  FE03          		CP	03H				;STOP押下ならZ=1
  697D  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]拡張子別にサブルーチンへジャンプする
                      	;IN  (TGT_CLSTR)=ファイルのクラスタ＃,HL=サブルーチンテーブルポインタ
                      	;OUT
                      	;=================================================
  697E                	EXT_TABLE_JUMP:
  697E  E5            	.L3:	PUSH	HL				;テーブルポインタを退避
  697F  11CD7C        		LD	DE,DIR_ENTRY+IDX_EXT		;DE<-ディレクトリエントリ拡張子部
  6982  0603          		LD	B,03H				;B<-拡張子の文字数
  6984  1A            	.L2:	LD	A,(DE)				;入力された拡張子とテーブルを照合する
  6985  BE            		CP	(HL)				;(DE):(HL)
  6986  200A          		JR	NZ,.L1				;不一致処理へ
  6988  13            		INC	DE				;それぞれのポインタを進める
  6989  23            		INC	HL				;
  698A  10F8          		DJNZ	.L2				;文字数分だけ繰り返す
                      	
  698C  D1            		POP	DE				;不要になったテーブルポインタを捨てる
  698D  5E            		LD	E,(HL)				;DE<-拡張子に対応したサブルーチンのアドレス
  698E  23            		INC	HL				;
  698F  56            		LD	D,(HL)				;
  6990  EB            		EX	DE,HL				;HL<-DE
  6991  E9            		JP	(HL)				;サブルーチンへ
                      	
  6992  E1            	.L1:	POP	HL				;HL<-行の先頭アドレス
  6993  010500        		LD	BC,0005H			;BC<-テーブル１行あたりのバイト数
  6996  09            		ADD	HL,BC				;テーブルのポインタを次の行に進める
  6997  7E            		LD	A,(HL)				;値が00Hになるまで繰り返す
  6998  B7            		OR	A				;
  6999  20E3          		JR	NZ,.L3				;
                      	
  699B  219177        		LD	HL,MSG_NOT_SUPPORTED_EXT 	;不一致処理
  699E  C3FF69        		JP	ERR				;
                      	
                      	;=================================================
                      	;[SUB]入力された引数をワークにセットする
                      	; "文字列",式1,式2 -> (ARG0),(ARG1),(ARG2),(ARG3)
                      	; 式1,式2,式3は省略可
                      	;IN  HL=TP
                      	;OUT HL=TP,(ARG0)=文字列ポインタ,(ARG1~3)=WORD型,(ARGNUM)=有効なWORD型パラメータの数 0~3
                      	;=================================================
  69A1                	GET_ARGS:
  69A1  CDD769        		CALL	RESET_ARGS			;入力パラメータ用ワークを初期化
  69A4  CD8576        		CALL	STR2ARG0			;(ARG0)<-文字列ポインタ
                      	
  69A7  2B            		DEC	HL				;！重要！
  69A8  D7            		RST	10H				;BASIC解析
  69A9  7E            		LD	A,(HL)				;カンマが無ければ終了する
  69AA  FE2C          		CP	","				;
  69AC  C0            		RET	NZ				;
                      	
  69AD  CDB06D        		CALL	EXP2WORD			;(ARG1)<-式１の評価結果
  69B0  ED53A57C      		LD	(ARG1),DE			;
  69B4  CDD069        		CALL	.INC				;(ARGNUM)++
  69B7  7E            		LD	A,(HL)				;
  69B8  FE2C          		CP	","				;
  69BA  C0            		RET	NZ				;
                      	
  69BB  CDB06D        		CALL	EXP2WORD			;(ARG2)<-式２の評価結果
  69BE  ED53A77C      		LD	(ARG2),DE			;
  69C2  CDD069        		CALL	.INC				;(ARGNUM)++
  69C5  7E            		LD	A,(HL)				;
  69C6  FE2C          		CP	","				;
  69C8  C0            		RET	NZ				;
                      	
  69C9  CDB06D        		CALL	EXP2WORD			;(ARG2)<-式３の評価結果
  69CC  ED53A97C      		LD	(ARG3),DE			;
                      	
  69D0  E5            	.INC:	PUSH	HL				;有効な入力パラメータの数を＋１する
  69D1  21AB7C        		LD	HL,ARGNUM			;
  69D4  34            		INC	(HL)				;
  69D5  E1            		POP	HL				;
  69D6  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]引数用ワークをリセットする
                      	;IN  -
                      	;OUT (ARG0~ARG3)<-0000H,ARGNUM<-0
                      	;=================================================
  69D7                	RESET_ARGS:
                      	;	PUSH	HL				;
                      	;	LD	HL,0000H			;
                      	;	LD	(ARG0),HL			;
                      	;	LD	(ARG1),HL			;
                      	;	LD	(ARG2),HL			;
                      	;	LD	(ARG3),HL			;
                      	;	XOR	A				;
                      	;	LD	(ARGNUM),A			;
                      	;	POP	HL
                      	
  69D7  E5            		PUSH	HL				;
  69D8  0609          		LD	B,09H				;
  69DA  21A37C        		LD	HL,ARG0				;
  69DD  AF            		XOR	A				;
  69DE  77            	.L1:	LD	(HL),A				;
  69DF  23            		INC	HL				;
  69E0  10FC          		DJNZ	.L1				;
  69E2  E1            		POP	HL				;
  69E3  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]16進文字コード照合
                      	;IN  A=文字コード
                      	;OUT -
                      	;=================================================
  69E4                	IS_HEX:
  69E4  F5            		PUSH	AF				;
  69E5  CDC15F        		CALL	CAPITAL				;大文字化
  69E8  D630          		SUB	"0"				;"0"->0,"9"->9,"A"->17,"F"->22
  69EA  380C          		JR	C,.ERR				;00H~2FHを除外
  69EC  D60A          		SUB	10				;"A"->7,"F"->12
  69EE  380D          		JR	C,.EXIT				;"0"~"9"を抽出
  69F0  D607          		SUB	7				;"A"->0,"F"->5
  69F2  3804          		JR	C,.ERR				;":"~"@"を除外
  69F4  D606          		SUB	6				;
  69F6  3805          		JR	C,.EXIT				;"A"~"F"を抽出
                      	
  69F8  1E05          	.ERR:	LD	E,ILLEGAL_FUNCTION_CALL		;
  69FA  C3F93B        		JP	ERROR				;
                      	
  69FD  F1            	.EXIT:	POP	AF				;
  69FE  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]エラーメッセージ表示
                      	;IN  HL=メッセージのアドレス
                      	;OUT -
                      	;=================================================
  69FF                	ERR:
  69FF  CDED52        		CALL	PRINT				;
  6A02  CDCA5F        		CALL	PUT_CR				;
  6A05  1E15          		LD	E,UNPRINTABLE			;
  6A07  C3F93B        		JP	ERROR				;
                      	
                      	;=================================================
                      	;[SUBS]YES / NO 入力待ち
                      	;IN  HL=メッセージ用文字列のアドレス
                      	;OUT Z=1:YES
                      	;=================================================
  6A0A                	YES_NO:
  6A0A  CDED52        		CALL	PRINT				;
  6A0D  CD456A        		CALL	IPRINT				;
  6A10  3F2028592F4E29		DB	"? (Y/N)",EOL			;
        00            	
  6A18  CD750F        		CALL	KEYWAIT				;A<-入力コード
  6A1B  CDC15F        		CALL	CAPITAL				;大文字化
  6A1E  F5            		PUSH	AF				;
  6A1F  DF            		RST	18H				;エコーバック
  6A20  CDCA5F        		CALL	PUT_CR				;改行
  6A23  F1            		POP	AF				;
  6A24  FE59          		CP	"Y"				;"Y"ならZ<-1
  6A26  C8            		RET	Z				;
                      	
  6A27  21DE77        		LD	HL,MSG_CANCELED			;
  6A2A  CDED52        		CALL	PRINT				;
  6A2D  B7            		OR	A				;Z<-0
  6A2E  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUBS]BCDをバイナリに変換する
                      	;IN  A=BCD値
                      	;OUT A=バイナリ値
                      	;=================================================
  6A2F                	BCD2BIN:
  6A2F  C5            		PUSH	BC				;A=59Hの場合
  6A30  4F            		LD	C,A				;0101.1001B=59H
  6A31  E6F0          		AND	11110000B			;0101.0000B=50H
  6A33  CB3F          		SRL	A				;0010.1000B=28H=40
  6A35  47            		LD	B,A				;B<-40
  6A36  CB3F          		SRL	A				;0001.0100B
  6A38  CB3F          		SRL	A				;0000.1010B
  6A3A  CB3F          		SRL	A				;0000.0101B=5
  6A3C  87            		ADD	A,A				;=10
  6A3D  80            		ADD	A,B				;A<-A+B=10+40=50
  6A3E  47            		LD	B,A				;B=50
  6A3F  79            		LD	A,C				;A=0101.1001B=59H
  6A40  E60F          		AND	00001111B			;A=0000.1001B=09H
  6A42  80            		ADD	A,B				;A=A+B=9+50=59
  6A43  C1            		POP	BC				;
  6A44  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]文字列を表示する
                      	;IN  (SP)=文字列の先頭アドレス
                      	;OUT -
                      	;=================================================
  6A45                	IPRINT:
  6A45  E3            		EX	(SP),HL				;
  6A46  F5            		PUSH	AF				;
  6A47  7E            	.L1:	LD	A,(HL)				;
  6A48  23            		INC	HL				;
  6A49  B7            		OR	A				;
  6A4A  2803          		JR	Z,.L2				;
  6A4C  DF            		RST	18H				;
  6A4D  18F8          		JR	.L1				;
  6A4F  F1            	.L2:	POP	AF				;
  6A50  E3            		EX	(SP),HL				;
  6A51  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]16進数を表示する
                      	;IN  A
                      	;OUT -
                      	;=================================================
  6A52                	PUTHEX:
  6A52  D5            		PUSH	DE				;
  6A53  CD835E        		CALL	CNVBYTEHEX			;D,E<-文字
  6A56  7A            		LD	A,D				;
  6A57  DF            		RST	18H				;
  6A58  7B            		LD	A,E				;
  6A59  DF            		RST	18H				;
  6A5A  D1            		POP	DE				;
  6A5B  C9            		RET					;
                      	
                      	;=================================================
                      	;[SUB]ダブルワードを16進数で表示する
                      	;IN  HL=ダブルワードのポインタ
                      	;OUT 
                      	;=================================================
  6A5C                	PRT_DW_HEX:
  6A5C  C5            		PUSH	BC				;
  6A5D  E5            		PUSH	HL				;
  6A5E  23            		INC	HL				;
  6A5F  23            		INC	HL				;
  6A60  23            		INC	HL				;
  6A61  0604          		LD	B,04H				;
  6A63  7E            	.L1:	LD	A,(HL)				;
  6A64  CD526A        		CALL	PUTHEX				;
  6A67  2B            		DEC	HL				;
  6A68  10F9          		DJNZ	.L1				;
  6A6A  E1            		POP	HL				;
  6A6B  C1            		POP	BC				;
  6A6C  C9            		RET					;
                      	
[EOF:SUBS.asm]
                      	INCLUDE	"DWORD.asm"				;ダブルワード
                      	
                      	;=================================================
                      	;ダブルワード用ワーク LSB<<<MSB
                      	;=================================================
                      	;DW0:		DB	00H,00H,00H,00H		;変数
                      	;DW1:		DB	00H,00H,00H,00H		;変数
                      	;DW_SP_ORG:	DB	00H,00H			;スタックポインタの一時退避エリア
                      	;DW_SP:		DB	00H,00H			;ダブルワード用スタックポインタ
                      	;		DB	00H,00H,00H,00H		;ダブルワード用スタックエリア
                      	;		DB	00H,00H,00H,00H		;
                      	;		DB	00H,00H,00H,00H		;
                      	;		DB	00H,00H,00H,00H		;
                      	;DW_STACK	EQU	$			;
                      	
                      	;=================================================
                      	;ダブルワードスタック初期化
                      	;=================================================
  6A6D                	INIT_DW:
  6A6D  214D7D        		LD	HL,DW_STACK			;
  6A70  223B7D        		LD	(DW_SP),HL			;
  6A73  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード変数にレジスタの値をロードする
                      	;IN  HL=DW変数のポインタ,BCDE=MSB->LSB
                      	;OUT (HL)<-BCDE
                      	;=================================================
  6A74                	DW_LD:
  6A74  E5            		PUSH	HL				;
  6A75  73            		LD	(HL),E				;
  6A76  23            		INC	HL				;
  6A77  72            		LD	(HL),D				;
  6A78  23            		INC	HL				;
  6A79  71            		LD	(HL),C				;
  6A7A  23            		INC	HL				;
  6A7B  70            		LD	(HL),B				;
  6A7C  E1            		POP	HL				;
  6A7D  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)(DW1)を比較する
                      	;IN  -
                      	;OUT (DW0)<(DW1):CY=1 Z=?
                      	;    (DW0)=(DW1):CY=0 Z=1
                      	;    (DW0)>(DW1):CY=0 Z=0
                      	;=================================================
  6A7E                	DW0_CP:
  6A7E  C5            		PUSH	BC				;
  6A7F  D5            		PUSH	DE				;
  6A80  E5            		PUSH	HL				;
  6A81  21317D        		LD	HL,DW0				;
  6A84  11357D        		LD	DE,DW1				;
  6A87  C38D6A        		JP	DW_CP.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HHLL)(DDEE)を比較する
                      	;IN  HL,DE
                      	;OUT (HHLL)<(DDEE):CY=1 Z=?
                      	;    (HHLL)=(DDEE):CY=0 Z=1
                      	;    (HHLL)>(DDEE):CY=0 Z=0
                      	;=================================================
  6A8A                	DW_CP:
  6A8A  C5            		PUSH	BC				;
  6A8B  D5            		PUSH	DE				;DW0_CPと整合を取るために入れている
  6A8C  E5            		PUSH	HL				;
  6A8D  E5            	.E1:	PUSH	HL				;DW_POP用に退避
  6A8E  CDBF6A        		CALL	DW_PUSH				;(HHLL)を退避する
  6A91  CD726B        		CALL	DW_SUB				;(HHLL)<-(HHLL)-(DDEE)
  6A94  380B          		JR	C,.EXIT				;CY=1なら(HHLL)<(DDEE) Zは無視してよい
  6A96  AF            		XOR	A				;A<-0, CY<-0
  6A97  010400        		LD	BC,0004H			;=バイト数
  6A9A  EDA1          	.L1:	CPI					;A-(HL) HL++ BC--
  6A9C  2003          		JR	NZ,.EXIT			;結果が0ではないので(HHLL)>(DDEE) CY=0, Z=0
  6A9E  EA9A6A        		JP	PE,.L1				;結果が0なので(HHLL)=(DDEE) CY=0, Z=1
  6AA1  E1            	.EXIT:	POP	HL				;DW_POP用に復帰
  6AA2  F5            		PUSH	AF				;フラグを退避
  6AA3  CDE66A        		CALL	DW_POP				;(HHLL)を復旧する
  6AA6  F1            		POP	AF				;
  6AA7  E1            		POP	HL				;
  6AA8  D1            		POP	DE				;
  6AA9  C1            		POP	BC				;
  6AAA  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワードをコピーする
                      	;(HL)->(DE)
                      	;IN  HL=SOURCE,DE=DEST
                      	;OUT 
                      	;=================================================
  6AAB                	DW_COPY:
  6AAB  C5            		PUSH	BC				;
  6AAC  D5            		PUSH	DE				;
  6AAD  E5            		PUSH	HL				;
  6AAE  010400        		LD	BC,0004H			;
  6AB1  EDB0          		LDIR					;
  6AB3  E1            		POP	HL				;
  6AB4  D1            		POP	DE				;
  6AB5  C1            		POP	BC				;
  6AB6  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)をスタックに積む
                      	;IN  DW0
                      	;OUT -
                      	;=================================================
  6AB7                	DW0_PUSH:
  6AB7  D5            		PUSH	DE				;
  6AB8  E5            		PUSH	HL				;
  6AB9  21317D        		LD	HL,DW0				;
  6ABC  C3C16A        		JP	DW_PUSH.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HL)をスタックに積む
                      	;IN  HL
                      	;OUT -
                      	;=================================================
  6ABF                	DW_PUSH:
  6ABF  D5            		PUSH	DE				;
  6AC0  E5            		PUSH	HL				;
  6AC1  ED73397D      	.E1:	LD	(DW_SP_ORG),SP			;システムのスタックポインタを一時エリアに退避する
  6AC5  ED7B3B7D      		LD	SP,(DW_SP)			;スタックポインタをダブルワード用に変更する
  6AC9  5E            		LD	E,(HL)				;<-最下位バイト
  6ACA  23            		INC	HL				;
  6ACB  56            		LD	D,(HL)				;<-第２位バイト
  6ACC  23            		INC	HL				;
  6ACD  D5            		PUSH	DE				;
  6ACE  5E            		LD	E,(HL)				;<-第３位バイト
  6ACF  23            		INC	HL				;
  6AD0  56            		LD	D,(HL)				;<-最上位バイト
  6AD1  D5            		PUSH	DE				;
  6AD2  ED733B7D      		LD	(DW_SP),SP			;ダブルワード用スタックポインタを保存する
  6AD6  ED7B397D      		LD	SP,(DW_SP_ORG)			;システムのスタックポインタを復旧する
  6ADA  E1            		POP	HL				;
  6ADB  D1            		POP	DE				;
  6ADC  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)をスタックから取り出す
                      	;IN  -
                      	;OUT (DW0)
                      	;=================================================
  6ADD                	DW0_POP:
  6ADD  C5            		PUSH	BC				;
  6ADE  D5            		PUSH	DE				;
  6ADF  E5            		PUSH	HL				;
  6AE0  21317D        		LD	HL,DW0				;
  6AE3  C3E96A        		JP	DW_POP.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HL)をスタックから取り出す
                      	;IN  HL
                      	;OUT (HL)
                      	;=================================================
  6AE6                	DW_POP:
  6AE6  C5            		PUSH	BC				;
  6AE7  D5            		PUSH	DE				;
  6AE8  E5            		PUSH	HL				;
  6AE9  ED73397D      	.E1:	LD	(DW_SP_ORG),SP			;システムのスタックポインタを一時エリアに退避する
  6AED  ED7B3B7D      		LD	SP,(DW_SP)			;スタックポインタをダブルワード用に変更する
  6AF1  D1            		POP	DE				;
  6AF2  C1            		POP	BC				;
  6AF3  71            		LD	(HL),C				;<-最下位バイト
  6AF4  23            		INC	HL				;
  6AF5  70            		LD	(HL),B				;<-第２位バイト
  6AF6  23            		INC	HL				;
  6AF7  73            		LD	(HL),E				;<-第３位バイト
  6AF8  23            		INC	HL				;
  6AF9  72            		LD	(HL),D				;<-最上位バイト
  6AFA  ED733B7D      		LD	(DW_SP),SP			;ダブルワード用スタックポインタを保存する
  6AFE  ED7B397D      		LD	SP,(DW_SP_ORG)			;システムのスタックポインタを復旧する
  6B02  E1            		POP	HL				;
  6B03  D1            		POP	DE				;
  6B04  C1            		POP	BC				;
  6B05  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)に即値をロードする
                      	;IN  (SP)
                      	;BRK HL
                      	;=================================================
  6B06                	DW0_ILD:
  6B06  E3            		EX	(SP),HL				;
  6B07  D5            		PUSH	DE				;
  6B08  C5            		PUSH	BC				;
  6B09  11317D        		LD	DE,DW0				;
  6B0C  0604          		LD	B,4				;
  6B0E  7E            	.L1:	LD	A,(HL)				;
  6B0F  23            		INC	HL				;
  6B10  12            		LD	(DE),A				;
  6B11  13            		INC	DE				;
  6B12  10FA          		DJNZ	.L1				;
  6B14  C1            	.L2:	POP	BC				;
  6B15  D1            		POP	DE				;
  6B16  E3            		EX	(SP),HL				;
  6B17  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)を０にする
                      	;IN  -
                      	;OUT (DW0)
                      	;=================================================
  6B18                	DW0_CLR:
  6B18  E5            		PUSH	HL				;
  6B19  21317D        		LD	HL,DW0				;
  6B1C  C3206B        		JP	DW_CLR.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HHLL)を０にする
                      	;IN  HL
                      	;OUT (HHLL)
                      	;=================================================
  6B1F                	DW_CLR:
  6B1F  E5            		PUSH	HL				;
  6B20  AF            	.E1:	XOR	A				;DW0_CLRのエントリポイント
  6B21  77            		LD	(HL),A				;
  6B22  23            		INC	HL				;
  6B23  77            		LD	(HL),A				;
  6B24  23            		INC	HL				;
  6B25  77            		LD	(HL),A				;
  6B26  23            		INC	HL				;
  6B27  77            		LD	(HL),A				;
  6B28  E1            		POP	HL				;
  6B29  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード交換 (DW0)<->(DW1)
                      	;IN  -
                      	;OUT (DW0),(DW1)
                      	;=================================================
  6B2A                	DW0_SWAP:
  6B2A  C5            		PUSH	BC				;
  6B2B  D5            		PUSH	DE				;
  6B2C  E5            		PUSH	HL				;
  6B2D  11317D        		LD	DE,DW0				;
  6B30  21357D        		LD	HL,DW1				;
  6B33  C3396B        		JP	DW_SWAP.E1			;
                      	
                      	;=================================================
                      	;ダブルワード交換 (DE)<->(HL)
                      	;IN  DE,HL
                      	;OUT (DE),(HL)
                      	;=================================================
  6B36                	DW_SWAP:
  6B36  C5            		PUSH	BC				;
  6B37  D5            		PUSH	DE				;
  6B38  E5            		PUSH	HL				;
  6B39  0604          	.E1:	LD	B,4				;DW0_SWAPのエントリポイント
  6B3B  4E            	.L1:	LD	C,(HL)				;C<-(HL)
  6B3C  1A            		LD	A,(DE)				;A<-(DE)
  6B3D  EB            		EX	DE,HL				;
  6B3E  71            		LD	(HL),C				;(DE)<-C
  6B3F  12            		LD	(DE),A				;(HL)<-A
  6B40  EB            		EX	DE,HL				;結果として(HL)と(DE)が入れ替わっている
  6B41  23            		INC	HL				;
  6B42  13            		INC	DE				;
  6B43  10F6          		DJNZ	.L1				;
  6B45  E1            		POP	HL				;
  6B46  D1            		POP	DE				;
  6B47  C1            		POP	BC				;
  6B48  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード加算 (DW0)<-(DW0)+(DW1)
                      	;IN  DW0=被加算数のポインタ,DW1=加算数のポインタ
                      	;OUT (DW0),CY
                      	;=================================================
  6B49                	DW0_ADD:
  6B49  C5            		PUSH	BC				;
  6B4A  D5            		PUSH	DE				;
  6B4B  E5            		PUSH	HL				;
  6B4C  21317D        		LD	HL,DW0				;
  6B4F  11357D        		LD	DE,DW1				;
  6B52  C3586B        		JP	DW_ADD.E1			;
                      	
                      	;=================================================
                      	;ダブルワード加算 (HL)<-(HL)+(DE)
                      	;IN  HL=被加算数のポインタ,DE=加算数のポインタ
                      	;OUT (HL),CY
                      	;=================================================
  6B55                	DW_ADD:
  6B55  C5            		PUSH	BC				;
  6B56  D5            		PUSH	DE				;
  6B57  E5            		PUSH	HL				;
  6B58  0604          	.E1:	LD	B,4				;DW0_ADDのエントリポイント
  6B5A  B7            		OR	A				;CY<-0
  6B5B  1A            	.L1:	LD	A,(DE)				;(HL)<-(HL)+(DE) & CY
  6B5C  8E            		ADC	A,(HL)				;
  6B5D  77            		LD	(HL),A				;
  6B5E  13            		INC	DE				;DE++
  6B5F  23            		INC	HL				;HL++
  6B60  10F9          		DJNZ	.L1				;B--
  6B62  E1            		POP	HL				;
  6B63  D1            		POP	DE				;
  6B64  C1            		POP	BC				;
  6B65  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード減算 (DW0)<-(DW0)-(DW1)
                      	;IN  DW0=被減算数のポインタ,DW1=減算数のポインタ
                      	;OUT (DW0),CY
                      	;=================================================
  6B66                	DW0_SUB:
  6B66  C5            		PUSH	BC				;
  6B67  D5            		PUSH	DE				;
  6B68  E5            		PUSH	HL				;
  6B69  21317D        		LD	HL,DW0				;
  6B6C  11357D        		LD	DE,DW1				;
  6B6F  C3756B        		JP	DW_SUB.E1			;
                      	
                      	;=================================================
                      	;ダブルワード減算 (HL)<-(HL)-(DE)
                      	;IN  HL=被減算数のポインタ,DE=減算数のポインタ
                      	;OUT (HL),CY
                      	;=================================================
  6B72                	DW_SUB:
  6B72  C5            		PUSH	BC				;
  6B73  D5            		PUSH	DE				;
  6B74  E5            		PUSH	HL				;
  6B75  EB            	.E1:	EX	DE,HL				;SBC命令でDEが使えないため入れ替える
  6B76  0604          		LD	B,4				;=バイト数
  6B78  B7            		OR	A				;CY<-0
  6B79  1A            	.L1:	LD	A,(DE)				;実質は (HL)<-(HL)-(DE)
  6B7A  9E            		SBC	A,(HL)				;
  6B7B  12            		LD	(DE),A				;
  6B7C  13            		INC	DE				;
  6B7D  23            		INC	HL				;
  6B7E  10F9          		DJNZ	.L1				;
  6B80  E1            		POP	HL				;
  6B81  D1            		POP	DE				;
  6B82  C1            		POP	BC				;
  6B83  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)に１加算する
                      	;IN  -
                      	;OUT (DW0)
                      	;=================================================
  6B84                	DW0_INC:
  6B84  E5            		PUSH	HL				;
  6B85  21317D        		LD	HL,DW0				;
  6B88  C38C6B        		JP	DW_INC.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HHLL)に１加算する
                      	;IN  HL=ダブルワードのポインタ
                      	;OUT (HHLL)
                      	;=================================================
  6B8B                	DW_INC:
  6B8B  E5            		PUSH	HL				;
  6B8C  34            	.E1:	INC	(HL)				;最下位バイトに１加算して０にならなければ
  6B8D  200A          		JR	NZ,.EXIT			;桁上りがないと判断し終了へ
  6B8F  23            		INC	HL				;第２バイトに１加算して０にならなければ
  6B90  34            		INC	(HL)				;桁上りがないと判断し終了へ
  6B91  2006          		JR	NZ,.EXIT			;
  6B93  23            		INC	HL				;第３バイトに１加算して０にならなければ
  6B94  34            		INC	(HL)				;桁上りがないと判断し終了へ
  6B95  2002          		JR	NZ,.EXIT			;
  6B97  23            		INC	HL				;最上位バイトに１加算
  6B98  34            		INC	(HL)				;
  6B99  E1            	.EXIT:	POP	HL				;
  6B9A  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)を１減算する
                      	;IN  -
                      	;OUT (DW0),CY
                      	;=================================================
  6B9B                	DW0_DEC:
  6B9B  E5            		PUSH	HL				;
  6B9C  C5            		PUSH	BC				;
  6B9D  21317D        		LD	HL,DW0				;
  6BA0  C3A56B        		JP	DW_DEC.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HL)を１減算する
                      	;IN  HL=ダブルワードのポインタ
                      	;OUT (HL),CY
                      	;=================================================
  6BA3                	DW_DEC:
  6BA3  E5            		PUSH	HL				;
  6BA4  C5            		PUSH	BC				;
  6BA5  7E            	.E1:	LD	A,(HL)				;最下位バイトから１減算して
  6BA6  D601          		SUB	1				;桁借りが生じなければ終了へ ！DECはCYが変化しないので使用できない！
  6BA8  77            		LD	(HL),A				;
  6BA9  300C          		JR	NC,.EXIT			;
  6BAB  23            		INC	HL				;
  6BAC  010003        		LD	BC,0300H			;B=ループ数, C=0
  6BAF  7E            	.L1:	LD	A,(HL)				;第２バイトから最上位バイトまで
  6BB0  99            		SBC	A,C				;キャリー付き減算を繰り返す
  6BB1  77            		LD	(HL),A				;
  6BB2  3003          		JR	NC,.EXIT			;桁借りが生じなければ終了へ
  6BB4  23            		INC	HL				;
  6BB5  10F8          		DJNZ	.L1				;
  6BB7  C1            	.EXIT:	POP	BC				;
  6BB8  E1            		POP	HL				;
  6BB9  C9            		RET					;
                      	
                      	;=================================================
                      	;ダブルワード(DW0)を2倍する
                      	;IN  -
                      	;OUT (DW0),CY<-BIT31
                      	;=================================================
  6BBA                	DW0_X2:
  6BBA  E5            		PUSH	HL				;
  6BBB  21317D        		LD	HL,DW0				;
  6BBE  C3C26B        		JP	DW_X2.E1			;
                      	
                      	;=================================================
                      	;ダブルワード(HL)を2倍する
                      	;IN  HL
                      	;OUT (HL),CY<-BIT31
                      	;=================================================
  6BC1                	DW_X2:
  6BC1  E5            		PUSH	HL				;
  6BC2  CB26          	.E1:	SLA	(HL)				;BIT0<-0,CY<-BIT7
  6BC4  23            		INC	HL				;+1 フラグは変化しない
  6BC5  CB16          		RL	(HL)				;BIT8<-CY,CY<-BIT15
  6BC7  23            		INC	HL				;+2
  6BC8  CB16          		RL	(HL)				;BIT16<-CY,CY<-BIT23
  6BCA  23            		INC	HL				;+3
  6BCB  CB16          		RL	(HL)				;BIT24<-CY,CY<-BIT31
  6BCD  E1            		POP	HL				;
  6BCE  C9            		RET					;
                      	
                      	;=================================================
                      	;DW0を256倍する
                      	;IN  (DW0)
                      	;OUT -
                      	;=================================================
  6BCF                	DW_X256:
  6BCF  F5            		PUSH	AF				;
  6BD0  C5            		PUSH	BC				;
  6BD1  D5            		PUSH	DE				;
  6BD2  E5            		PUSH	HL				;
  6BD3  21337D        		LD	HL,DW0+2			;転送元 00 01 02 03
  6BD6  11347D        		LD	DE,DW0+3			;転送先 XX 00 01 02
  6BD9  010300        		LD	BC,0003H			;転送回数
  6BDC  EDB8          		LDDR					;BC--,DE--,HL--
  6BDE  AF            		XOR	A				;
  6BDF  12            		LD	(DE),A				;(DW0+0)<-0
  6BE0  E1            		POP	HL				;
  6BE1  D1            		POP	DE				;
  6BE2  C1            		POP	BC				;
  6BE3  F1            		POP	AF				;
  6BE4  C9            		RET					;
                      	
                      	;=================================================
                      	;DW0を512倍する
                      	;IN  (DW0)
                      	;OUT CY
                      	;=================================================
  6BE5                	DW_X512:
  6BE5  CDBA6B        		CALL	DW0_X2				;
  6BE8  CDCF6B        		CALL	DW_X256				;
  6BEB  C9            		RET					;
                      	
                      	;=================================================
                      	;ワードの乗算 (DW0)<-HLxDE 結果はダブルワード
                      	;HL X DE
                      	;IN  HL=被乗数,DE=乗数
                      	;OUT (DW0)
                      	;=================================================
  6BEC                	HLXDE:
  6BEC  C5            		PUSH	BC				;
  6BED  CD186B        		CALL	DW0_CLR				;DW0,DW1<-0
  6BF0  CD2A6B        		CALL	DW0_SWAP			;
  6BF3  CD186B        		CALL	DW0_CLR				;
  6BF6  7D            		LD	A,L				;
  6BF7  32317D        		LD	(DW0+0),A			;(DW0)<-HL=被乗数
  6BFA  7C            		LD	A,H				;
  6BFB  32327D        		LD	(DW0+1),A			;
  6BFE  0610          		LD	B,16				;ループ数
  6C00  CB3A          	.L2:	SRL	D				;乗数DEを右シフトする
  6C02  CB1B          		RR	E				;CY<-BIT0
  6C04  3009          		JR	NC,.L1				;CY=1なら被乗数を結果に加算する
  6C06  CD2A6B        		CALL	DW0_SWAP			;(DW0)=結果, (DW1)=被乗数
  6C09  CD496B        		CALL	DW0_ADD				;(DW0)<-(DW0)+(DW1)
  6C0C  CD2A6B        		CALL	DW0_SWAP			;(DW0)=被乗数, (DW1)=結果
  6C0F  CDBA6B        	.L1:	CALL	DW0_X2				;被乗数を左シフトして2倍にする
  6C12  10EC          		DJNZ	.L2				;
  6C14  CD2A6B        		CALL	DW0_SWAP			;(DW0)=結果, (DW1)=被乗数
  6C17  C1            		POP	BC				;
  6C18  C9            		RET					;
                      	
[EOF:DWORD.asm]
                      	INCLUDE	"FP.asm"				;ファイルポインタ
                      	
                      	;-------------------------------------------------
                      	;ファイルポインタFPの構造
                      	;-------------------------------------------------
                      	;MSB                             LSB
                      	;00000000 00000000 00000000 00000000
                      	;                         1 11111111: 0~ 8  9bit オフセット値        0~511
                      	;                   111111          : 9~14  6bit セクタシリアル＃    0~63       FP_SCTR_SN
                      	;-1111111 11111111 1                :15~30 16bit クラスタシリアル＃  0~65535	FP_CLSTR_SN
                      	;
                      	;・オフセット値　　　…バッファ内での相対位置                 0~511
                      	;・セクタシリアル＃　…クラスタを構成するセクタのシリアル＃   0~(BPB+2)-1
                      	;・クラスタシリアル＃…ファイルを構成するクラスタのシリアル＃ 0~65535
                      	;
                      	;　※FPの最大値はファイルサイズ
                      	;-------------------------------------------------
                      	
                      	;=================================================
                      	;[FP]FP関連のワークを初期化する（読み込み＆書き込み）
                      	;IN  HL=ファイルの開始クラスタ＃
                      	;OUT (FP),(FP_CLSTR),(FP_SCTR_SN)
                      	;=================================================
  6C19                	INIT_FP:
  6C19  E5            		PUSH	HL				;
  6C1A  221A7D        		LD	(FP_CLSTR),HL			;(FP_CLSTR)<-ファイルの開始クラスタ＃
  6C1D  21167D        		LD	HL,FP				;(FP)<-00.00.00.00H
  6C20  CD1F6B        		CALL	DW_CLR				;
  6C23  AF            		XOR	A				;(FP_SCTR_SN)<-00H
  6C24  321E7D        		LD	(FP_SCTR_SN),A			;
  6C27  210000        		LD	HL,0000H			;(FP_CLSTR_SN)<-0000H
  6C2A  221C7D        		LD	(FP_CLSTR_SN),HL		;
  6C2D  E1            		POP	HL				;
  6C2E  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]オフセット値のゼロ判定
                      	;IN  HL=FPのポインタ
                      	;OUT Z=1:FPのオフセット値はゼロ
                      	;=================================================
  6C2F                	IS_FP_OFST_ZERO:
  6C2F  7E            		LD	A,(HL)				;FPの下位９ビットをチェック
  6C30  B7            		OR	A				;
  6C31  C0            		RET	NZ				;
  6C32  23            		INC	HL				;
  6C33  7E            		LD	A,(HL)				;
  6C34  CB3F          		SRL	A				;
  6C36  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FP関連ワークからセクタ＃を求める
                      	;IN (FP_CLSTR),(FP_CLSTR_SN),(FP_SCTR_SN)
                      	;OUT (DW0)
                      	;=================================================
  6C37                	FP2SCTR:
  6C37  CD4E6C        		CALL	GET_FP_CLSTR			;DE<-FPが存在するクラスタ＃
  6C3A  EB            		EX	DE,HL				;HL<-FPが存在するクラスタ＃
  6C3B  CD2D69        		CALL	GET_FIRST_SCTR			;(DW0)<-FPが存在するクラスタの開始セクタ＃
  6C3E  21357D        		LD	HL,DW1				;(DW1)<-00000000H
  6C41  CD1F6B        		CALL	DW_CLR				;
  6C44  3A1E7D        		LD	A,(FP_SCTR_SN)			;(DW1)<-セクタシリアル＃
  6C47  32357D        		LD	(DW1),A				;
  6C4A  CD496B        		CALL	DW0_ADD				;(DW0)<-開始セクタ＃+セクタシリアル＃=目的のセクタ＃
  6C4D  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]ファイルの(FP_CLSTR_SN)番目のクラスタ＃と、そのFATエントリを求める
                      	;IN  (FP_CLSTR)=ファイルの先頭クラスタ＃,(FP_CLSTR_SN)=FPが示すアドレスが、先頭から何番目のクラスタに含まれるか
                      	;OUT DE=クラスタ＃,HL=FATエントリ
                      	;=================================================
  6C4E                	GET_FP_CLSTR:
  6C4E  ED5B1A7D      		LD	DE,(FP_CLSTR)			;DE<-ファイルの先頭クラスタ＃。デフォルトの返り値
  6C52  3A1C7D        		LD	A,(FP_CLSTR_SN)			;
  6C55  47            		LD	B,A				;
  6C56  04            		INC	B				;！重要！
  6C57  EB            		EX	DE,HL				;HL=ファイルの先頭クラスタ＃
  6C58  C5            	.L1:	PUSH	BC				;最終クラスタサーチ
  6C59  CD8E63        		CALL	READ_FAT_DATA			;DE<-クラスタ＃HLのFATエントリ
  6C5C  EB            		EX	DE,HL				;HL=FATエントリ,DE=クラスタ＃
  6C5D  C1            		POP	BC				;
  6C5E  10F8          		DJNZ	.L1				;
  6C60  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FPが示すセクタをバッファに読み込む（読み込み）
                      	;IN  (FP_CLSTR),(FP_SCTR_SN),IX=バッファ構造体のポインタ
                      	;OUT (DW0),(DW1)
                      	;=================================================
  6C61                	READ_FP_SCTR:
  6C61  CD376C        		CALL	FP2SCTR				;FP関連ワークからセクタ＃を求める
  6C64  CD6A64        		CALL	LOAD_BFFR			;セクタ(DW0)をバッファ構造体IXに読み込む IXのセクタ＃も更新される
  6C67  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FPが示すメモリの値を取得しFP++する（読み込み）
                      	;！セクタがバッファに取り込まれていること！
                      	;IN  FP,IX=バッファ構造体のポインタ
                      	;OUT A=(FP)の値,FP
                      	;=================================================
  6C68                	FETCH_1BYTE:
  6C68  D9            		EXX					;
  6C69  CD726C        		CALL	FP2BP				;A<-FPが示すメモリの値
  6C6C  7E            		LD	A,(HL)				;
  6C6D  CD816C        		CALL	INC_FP				;FP++
  6C70  D9            		EXX					;
  6C71  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FPとバッファ構造体IXから、FPが示すバッファポインタを求める
                      	;IN  FP,IX=バッファ構造体のポインタ
                      	;OUT HL=バッファポインタ
                      	;=================================================
  6C72                	FP2BP:
  6C72  2A167D        		LD	HL,(FP)				;HL<-FPの下位２バイト
  6C75  7C            		LD	A,H				;H<-上位７ビットをオフ
  6C76  E601          		AND	00000001B			;
  6C78  67            		LD	H,A				;HL=オフセット値
  6C79  DD5E04        		LD	E,(IX+IDX_BADR)			;HL<-バッファアドレス+オフセット値=バッファポインタ
  6C7C  DD5605        		LD	D,(IX+IDX_BADR+1)		;
  6C7F  19            		ADD	HL,DE				;
  6C80  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]ファイルポインタを１進める（読み込み）
                      	;IN  FP
                      	;OUT FP
                      	;=================================================
  6C81                	INC_FP:
  6C81  F5            		PUSH	AF				;！重要 ！
  6C82  21167D        		LD	HL,FP				;(FP)++
  6C85  CD8B6B        		CALL	DW_INC				;
  6C88  7E            		LD	A,(HL)				;バッファポインタが 0.00000000B であれば
  6C89  B7            		OR	A				;新たにセクタを読み込む
  6C8A  2021          		JR	NZ,.EXIT			;
  6C8C  23            		INC	HL				;
  6C8D  7E            		LD	A,(HL)				;
  6C8E  CB3F          		SRL	A				;
  6C90  381B          		JR	C,.EXIT				;
  6C92  F5            		PUSH	AF				;B<-(SCTRS_PER_CLSTR)=(BPB+2)
  6C93  3AEE7C        		LD	A,(SCTRS_PER_CLSTR)		;
  6C96  47            		LD	B,A				;
  6C97  05            		DEC	B				;=FPからセクタシリアル＃を求めるためのビットマスク
  6C98  F1            		POP	AF				;
  6C99  A0            		AND	B				;
  6C9A  321E7D        		LD	(FP_SCTR_SN),A			;
  6C9D  200B          		JR	NZ,.L1				;セクタシリアル＃が０なら
  6C9F  CDAF6C        		CALL	NEXT_CLSTR			;次のクラスタ＃をFATから求める
  6CA2  2006          		JR	NZ,.L1				;次のクラスタ＃が0FFFFHの場合は
  6CA4  21A177        		LD	HL,MSG_SCTR_OVERFLOW		;ファイル上限を超過したことになるのでエラー終了
  6CA7  C3FF69        		JP	ERR				;
                      	
  6CAA  CD616C        	.L1:	CALL	READ_FP_SCTR			;FPが示すセクタをバッファに読み込む
  6CAD  F1            	.EXIT:	POP	AF				;
  6CAE  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]クラスタを１すすめる（読み込み）
                      	;IN  (FP_CLSTR),(FP_CLSTR_SN)
                      	;OUT (FP_CLSTR),(FP_CLSTR_SN),Z=1:EOF
                      	;=================================================
  6CAF                	NEXT_CLSTR:
  6CAF  D5            		PUSH	DE				;
  6CB0  E5            		PUSH	HL				;
  6CB1  2A1C7D        		LD	HL,(FP_CLSTR_SN)		;(FP_CLSTR_SN)++
  6CB4  23            		INC	HL				;
  6CB5  221C7D        		LD	(FP_CLSTR_SN),HL		;
  6CB8  2A1A7D        		LD	HL,(FP_CLSTR)			;現在のクラスタ＃のFATデータを読み取る
  6CBB  CD8E63        		CALL	READ_FAT_DATA			;
  6CBE  ED531A7D      		LD	(FP_CLSTR),DE			;次のクラスタ＃に更新する
  6CC2  13            		INC	DE				;FATの値がFFFFH（ファイルエンド）ならZ=1になる
  6CC3  7A            		LD	A,D				;！INC命令ではフラグ変化しないので注意！
  6CC4  B3            		OR	E				;
  6CC5  E1            		POP	HL				;
  6CC6  D1            		POP	DE				;
  6CC7  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FPからクラスタシリアル＃、セクタシリアル＃、オフセット値を求める
                      	;IN  FP
                      	;OUT (FP_CLSTR_SN),(FP_SCTR_SN),HL=オフセット値 0000H~01FFH
                      	;=================================================
  6CC8                	PARSE_FP:
  6CC8  21167D        		LD	HL,FP				;HL<-FP
  6CCB  5E            		LD	E,(HL)				;E<-(FP)=オフセット値の下位バイト
  6CCC  23            		INC	HL				;HL=FP+1
  6CCD  7E            		LD	A,(HL)				;A<-(FP+1)
  6CCE  E601          		AND	00000001B			;=オフセット値を求めるためのビットマスク
  6CD0  57            		LD	D,A				;D<-オフセット値の上位バイト
  6CD1  D5            		PUSH	DE				;<-FPの0~8BIT
  6CD2  3AEE7C        		LD	A,(SCTRS_PER_CLSTR)		;A=0100.0000B=40H
  6CD5  3D            		DEC	A				;A=0011.1111B=3FH
  6CD6  F5            		PUSH	AF				;
  6CD7  56            		LD	D,(HL)				;D=XXXX.XXXoB=(FP+1)
  6CD8  CB3A          		SRL	D				;D=0XXX.XXXXB 右シフトして、オフセット部分の１ビットを落とす
  6CDA  A2            		AND	D				;A=00XX.XXXXB
  6CDB  321E7D        		LD	(FP_SCTR_SN),A			;<-FPの9~14BIT
  6CDE  F1            		POP	AF				;A=0011.1111B=3FH
  6CDF  CB27          		SLA	A				;A=0111.1110B=7EH オフセット部分の１ビット分を空ける
  6CE1  3C            		INC	A				;A=0111.1111B=7FH このビットパターンを使って必要なビット数を抽出する
  6CE2  5E            		LD	E,(HL)				;E=csss.sssoB=(FP+1) c=cluster,s=SCTR,o=offset bit
  6CE3  23            		INC	HL				;
  6CE4  4E            		LD	C,(HL)				;C=(FP+2)
  6CE5  23            		INC	HL				;
  6CE6  46            		LD	B,(HL)				;B=(FP+3)
  6CE7  CB27          	.L1:	SLA	A				;A=1111.1110B CY=0
  6CE9  3808          		JR	C,.L2				;CY=1なら抜ける
  6CEB  CB13          		RL	E				;B,C,Eをキャリー付き左ローテート
  6CED  CB11          		RL	C				;
  6CEF  CB10          		RL	B				;
  6CF1  18F4          		JR	.L1				;
                      	
  6CF3  ED431C7D      	.L2:	LD	(FP_CLSTR_SN),BC		;<-FPの15~30BIT
  6CF7  E1            		POP	HL				;HL=オフセット値
  6CF8  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]FPが示すファイルバッファのメモリに値をセットしFP++する（書き込み）
                      	;IN  FP,IX=ファイルバッファ構造体のポインタ,A=(FP)に書き込む値
                      	;OUT FP
                      	;=================================================
  6CF9                	POST_1BYTE:
  6CF9  D9            		EXX					;
  6CFA  F5            		PUSH	AF				;
  6CFB  CD726C        		CALL	FP2BP				;FPとバッファ構造体IXからバッファポインタHLを求める
  6CFE  F1            		POP	AF				;
  6CFF  77            		LD	(HL),A				;(バッファポインタ)<-A
  6D00  3EFF          		LD	A,TRUE				;
  6D02  32C37C        		LD	(FILE_BFFR_STRCT.FLG),A		;バッファの更新フラグを立てる
  6D05  CD0A6D        		CALL	INC_FP_W			;FP++
  6D08  D9            		EXX					;
  6D09  C9            		RET					;
                      	
                      	;=================================================
                      	;[FP]ファイルポインタを１進める（書き込み）
                      	;IN  FP,IX=ファイルバッファ構造体のポインタ
                      	;OUT FP
                      	;=================================================
  6D0A                	INC_FP_W:
  6D0A  21167D        		LD	HL,FP				;ファイルポインタを１進める
  6D0D  CD8B6B        		CALL	DW_INC				;
  6D10  7E            		LD	A,(HL)				;バッファポインタ(FPの下位９ビット)が0.00000000Bになったら、セクタを次に進める
  6D11  B7            		OR	A				;それ以外は終了へ
  6D12  2054          		JR	NZ,.EXIT			;
  6D14  23            		INC	HL				;
  6D15  7E            		LD	A,(HL)				;
  6D16  CB3F          		SRL	A				;
  6D18  384E          		JR	C,.EXIT				;
  6D1A  F5            		PUSH	AF				;ここではAの下位６ビットがセクタシリアル＃になっている
  6D1B  3AEE7C        		LD	A,(SCTRS_PER_CLSTR)		;
  6D1E  47            		LD	B,A				;B<-(SCTRS_PER_CLSTR)
  6D1F  05            		DEC	B				;=FPからセクタシリアル＃を求めるためのビットマスク
  6D20  F1            		POP	AF				;
  6D21  A0            		AND	B				;
  6D22  321E7D        		LD	(FP_SCTR_SN),A			;(FP_SCTR_SN)<-セクタシリアル＃
  6D25  202F          		JR	NZ,.NEW				;セクタシリアル＃が０でなければ
  6D27  2A1A7D        		LD	HL,(FP_CLSTR)			;HL<-現在のクラスタ＃
  6D2A  CD8E63        		CALL	READ_FAT_DATA			;DE<-クラスタHLのFATエントリ
  6D2D  7A            		LD	A,D				;FATエントリがセットされていれば、それをそのまま使う
  6D2E  B3            		OR	E				;
  6D2F  2806          		JR	Z,.NULL				;
  6D31  ED531A7D      		LD	(FP_CLSTR),DE			;現在のクラスタ＃<-クラスタHLのFATエントリ
  6D35  181F          		JR	.NEW				;
                      	
  6D37  CDCB63        	.NULL:	CALL	FIND_NULL_CLSTR			;空きクラスタ＃HLをFATから求める OUT HL,CY=1:見つかった
  6D3A  380F          		JR	C,.FOUND			;
  6D3C  2A1A7D        		LD	HL,(FP_CLSTR)			;HL<-現在のクラスタ＃
  6D3F  11FFFF        		LD	DE,0FFFFH			;DE<-FATの終了コード
  6D42  CD5963        		CALL	WRITE_FAT_DATA			;現在のクラスタ＃のFATエントリに終了コードをセットする
  6D45  21EF77        		LD	HL,MSG_MEDIA_FULL		;エラー終了
  6D48  C3FF69        		JP	ERR				;
                      	
  6D4B  EB            	.FOUND:	EX	DE,HL				;DE=空きクラスタ＃
  6D4C  2A1A7D        		LD	HL,(FP_CLSTR)			;HL<-現在のクラスタ＃
  6D4F  ED531A7D      		LD	(FP_CLSTR),DE			;現在のクラスタ＃<-空きクラスタ＃
  6D53  CD5963        		CALL	WRITE_FAT_DATA			;クラスタ＃HLのFATエントリに空きクラスタ＃DEをセットしリンクさせる
  6D56  CD8C64        	.NEW:	CALL	SAVE_BFFR			;現在のファイルバッファが更新されていればメディアに書き込む
  6D59  CD5964        		CALL	CLR_BFFR			;次のセクタ用にファイルバッファをクリアする
  6D5C  CD376C        		CALL	FP2SCTR				;(DW0)<-FPのセクタ＃
  6D5F  21317D        		LD	HL,DW0				;バッファ構造体のセクタ＃<-(DW0)
  6D62  DDE5          		PUSH	IX				;
  6D64  D1            		POP	DE				;
  6D65  CDAB6A        		CALL	DW_COPY				;
  6D68  C9            	.EXIT:	RET					;
                      	
                      	;=================================================
                      	;[FP]FPをファイル終端にセットし、ファイルバッファに最終セクタを読み込む
                      	;IN  (DIR_ENTRY)
                      	;OUT (FP),(FP_CLSTR),(FP_CLSTR_SN),(FP_SCTR_SN)
                      	;=================================================
  6D69                	SET_FP_END:
  6D69  2ADF7C        		LD	HL,(DIR_ENTRY+IDX_FAT)		;HL<-ファイルのクラスタ＃
  6D6C  7C            		LD	A,H				;
  6D6D  B5            		OR	L				;
  6D6E  CA3178        		JP	Z,ERR_EMPTY_FILE		;クラスタ＃が0000Hならエラー
  6D71  221A7D        		LD	(FP_CLSTR),HL			;(FP_CLSTR)<-ファイルの開始クラスタ＃
  6D74  21E17C        		LD	HL,DIR_ENTRY+IDX_SIZE		;HL<-ファイルサイズのポインタ
  6D77  11167D        		LD	DE,FP				;DE<-ファイルポインタ
  6D7A  CDAB6A        		CALL	DW_COPY				;FP<-(ファイルサイズ)=ファイルの終端位置
  6D7D  CDC86C        		CALL	PARSE_FP			;FPから(FP_CLSTR_SN),(FP_SCTR_SN)を求める
  6D80  CD4E6C        		CALL	GET_FP_CLSTR			;DE<-FPが存在するクラスタ＃,HL<-そのFATエントリ
  6D83  23            		INC	HL				;FATの値がFFFFH（ファイル終端）ならZ=1になる！INC命令はフラグ変化しない！
  6D84  7C            		LD	A,H				;
  6D85  B5            		OR	L				;
  6D86  2806          		JR	Z,.L1				;ファイル終端でなければエラー
  6D88  21C977        		LD	HL,MSG_BAD_FORMAT		;選択されたクラスタのFATが0FFFFHでない
  6D8B  C3FF69        		JP	ERR				;
                      	
  6D8E  CD616C        	.L1:	CALL	READ_FP_SCTR			;FPが示すセクタをバッファに読み込む
  6D91  C9            		RET					;
                      	
[EOF:FP.asm]
                      	INCLUDE	"TP.asm"				;テキストポインタ
                      	
                      	;=================================================
                      	;[TP]カンマで区切られた２つの文字列式のポインタを取得する
                      	;IN  HL=TP
                      	;OUT (ARG0)=１番目の文字列式のポインタ,(ARG1)=２番目の文字列式のポインタ
                      	;=================================================
  6D92                	GET_2STR_PTR:
  6D92  CDFE6D        		CALL	SKIP_SPC			;
  6D95  22A37C        		LD	(ARG0),HL			;
  6D98  0E2C          		LD	C,","				;
  6D9A  CD056E        		CALL	SKIP_CHR			;
  6D9D  1E16          		LD	E,MISSING_OPERAND		;
  6D9F  D2F93B        		JP	NC,ERROR			;
  6DA2  CDFE6D        		CALL	SKIP_SPC			;
  6DA5  22A57C        		LD	(ARG1),HL			;
  6DA8  0E3A          		LD	C,":"				;
  6DAA  CD056E        		CALL	SKIP_CHR			;
  6DAD  D0            		RET	NC				;
  6DAE  2B            		DEC	HL				;
  6DAF  C9            		RET					;
                      	
                      	;=================================================
                      	;[TP]テキストポインタの式を評価して16ビットレジスタに取得する
                      	;・値=0000~FFFFH
                      	;IN  HL=TP
                      	;OUT HL=TP,DE=式の結果
                      	;=================================================
  6DB0                	EXP2WORD:
  6DB0  D7            		RST	10H				;！重要！
  6DB1  CD8F4A        	.SKIP:	CALL	EVALEXP				;FAC<-式の計算結果
  6DB4  E5            		PUSH	HL				;TP退避
  6DB5  CD2A59        		CALL	FAC2INT				;HL<-INT(FAC)
  6DB8  EB            		EX	DE,HL				;
  6DB9  E1            		POP	HL				;TP復帰
  6DBA  C9            		RET					;
                      	
                      	;=================================================
                      	;[TP]テキストポインタの式を評価して８ビットレジスタに取得する
                      	;・値=00~FFH
                      	;IN  HL=TP
                      	;OUT HL=TP,A=式の結果
                      	;=================================================
                      	IF FALSE
;;                   -	
;;                   -	EXP2BYTE:
;;                   -		RST	10H				;！重要！BASIC解析命令
;;                   -		CALL	BYTE_EVALEXP			;A<-式の計算結果(0~255)
;;                   -		RET
;;                   -	
                      	ENDIF
                      	
                      	;=================================================
                      	;[TP]テキストポインタ以降の文字列とコマンドテーブルを比較して、一致すればジャンプする
                      	;IN  C=ジャンプ用インデックスの初期値,DE=コマンドテーブルポインタ,HL=現在のテキストポインタ
                      	;OUT HL=次のテキストポインタ
                      	;=================================================
  6DBB                	WORD_JUMP:
  6DBB  CDFE6D        		CALL	SKIP_SPC			;
  6DBE  E5            	.L1:	PUSH	HL				;TPを退避
  6DBF  1A            		LD	A,(DE)				;ここでDEはコマンド文字列の先頭を指している
  6DC0  B7            		OR	A				;その値が00Hならすべて不一致を意味するので
  6DC1  2005          		JR	NZ,.L3				;エラーを出力して終了
  6DC3  1E02          		LD	E,SYNTAX_ERROR			;
  6DC5  C3F93B        		JP	ERROR				;
  6DC8  BE            	.L3:	CP	(HL)				;コマンド文字とTPの内容を比較
  6DC9  280A          		JR	Z,.EQUAL			;等しくなければ次のコマンド文字列へ
  6DCB  13            	.NEXT:	INC	DE				;コマンド文字に00Hが見つかるまでCPを進める
  6DCC  1A            		LD	A,(DE)				;
  6DCD  B7            		OR	A				;
  6DCE  20FB          		JR	NZ,.NEXT			;
  6DD0  13            		INC	DE				;00Hの次の文字にポインタをセットする
  6DD1  0C            		INC	C				;ジャンプ用インデックス値++
  6DD2  E1            		POP	HL				;TPを復帰
  6DD3  18E9          		JR	.L1				;
  6DD5  13            	.EQUAL:	INC	DE				;ここから文字が等しい場合の処理
  6DD6  23            		INC	HL				;TPとCPを１進める
  6DD7  1A            		LD	A,(DE)				;CPが指す内容が文字列終端マーカーならすべて一致したことになるので
  6DD8  B7            		OR	A				;一致処理へ進む
  6DD9  20ED          		JR	NZ,.L3				;
  6DDB  D1            		POP	DE				;ここから一致処理。スタックに退避していたTPを捨てる
  6DDC  E5            		PUSH	HL				;現在のTPを退避
  6DDD  216D78        		LD	HL,JUMP_TABLE			;HL<-JUMP_TABLE+C*2=ジャンプ先
  6DE0  CB21          		SLA	C				;
  6DE2  0600          		LD	B,0				;
  6DE4  09            		ADD	HL,BC				;
  6DE5  7E            		LD	A,(HL)				;HL<-(HL)=ジャンプ先
  6DE6  23            		INC	HL				;
  6DE7  66            		LD	H,(HL)				;
  6DE8  6F            		LD	L,A				;
  6DE9  E3            		EX	(SP),HL				;(SP)<-ジャンプ先,HL<-現在のTP
  6DEA  C9            		RET					;ここでスタックからジャンプ先が取り出される
                      	
                      	;=================================================
                      	;[TP]TPを開二重引用符の次に進める。存在しなければエラーにする
                      	;IN  HL=TP
                      	;OUT HL=TP
                      	;=================================================
  6DEB                	OPEN_DQUOTE:
  6DEB  CDFE6D        		CALL	SKIP_SPC			;
  6DEE  7E            		LD	A,(HL)				;
  6DEF  FE22          		CP	DQUOTE				;
  6DF1  1E16          		LD	E,MISSING_OPERAND		;
  6DF3  C2F93B        		JP	NZ,ERROR			;
  6DF6  23            		INC	HL				;
  6DF7  C9            		RET					;
                      	
                      	;=================================================
                      	;[TP]TPを閉二重引用符の次に進める
                      	;IN  HL=TP
                      	;OUT HL=TP
                      	;=================================================
  6DF8                	CLOSE_DQUOTE:
  6DF8  0E22          		LD	C,DQUOTE			;
  6DFA  CD056E        		CALL	SKIP_CHR			;
  6DFD  C9            		RET					;
                      	
                      	;=================================================
                      	;[TP]空白以外の文字が現れるまでTPを進める
                      	;IN  HL=TP
                      	;OUT HL=TP,Z<-1
                      	;=================================================
  6DFE                	SKIP_SPC:
  6DFE  7E            	.L1:	LD	A,(HL)				;
  6DFF  FE20          		CP	SPC				;
  6E01  C0            		RET	NZ				;
  6E02  23            		INC	HL				;
  6E03  18F9          		JR	.L1				;
                      	
                      	;=================================================
                      	;[TP]指定された文字の次、または00HまでTPを進める
                      	;IN  HL=TP,C=スキップする文字
                      	;OUT HL=新しいTP,CY=1:目的の文字が見つかった 0:EOLが見つかった
                      	;=================================================
  6E05                	SKIP_CHR:
  6E05  7E            	.L1:	LD	A,(HL)				;EOLならCY<-0で終了
  6E06  B7            		OR	A				;
  6E07  C8            		RET	Z				;
  6E08  23            		INC	HL				;TPを進める
  6E09  B9            		CP	C				;目的の文字ならCY<-1で終了
  6E0A  20F9          		JR	NZ,.L1				;
  6E0C  37            		SCF					;
  6E0D  C9            		RET					;
                      	
[EOF:TP.asm]
                      	INCLUDE	"CMT.asm"				;CMTファイル関連
                      	
                      	;CMTファイルフォーマット
                      	
  003A                	BIN_MARK: 	EQU	03AH	;CMTファイルで使用されるマシン語用マーカー
  00D3                	BAS_MARK: 	EQU	0D3H	;CMTファイルで使用されるBASIC用マーカー
  000A                	BAS_MARK_LEN:	EQU	0AH	;CMTファイルで使用されるBASIC用マーカーの数
                      	
                      	;BAS_ZERO:	EQU	04H	;BASICファイルの終端を判定するための00Hの数
  000A                	BAS_ZERO:	EQU	0AH	;BASICファイルの終端を判定するための00Hの数
                      	
  0040                	CMT_STACK_LVL:	EQU	40H	;OUT OF MEMORY判定用のスタックレベル=だいたいの値
  0006                	BFNAME_SIZE:	EQU	06H	;BASICファイル名の長さ
                      	;CMT_ZERO:	EQU	10H	;CMTファイルの終端を判定するための00Hの数
                      	
                      	;-------------------------------------------------
                      	;BASICプログラムファイル構造
                      	;-------------------------------------------------
                      	;ヘッダー	10 バイト D3 D3 D3 D3 D3 D3 D3 D3 D3 D3 
                      	;ファイル名	 6 バイト XX XX XX XX XX XX 
                      	;プログラム本体	
                      	;エンドマーク	 3 バイト 00 00 00
                      	;フッター	 9 バイト 00 00 00 00 00 00 00 00 00
                      	;-------------------------------------------------
                      	
                      	;-------------------------------------------------
                      	;マシン語プログラムファイル構造
                      	;-------------------------------------------------
                      	;スタートアドレス部	3A hi lo cs
                      	;データ部		3A nn XX ... XX cs
                      	;エンドマーク		3A 00 00
                      	;
                      	;hi & lo:アドレス, nn:サイズ, cs:チェックサム
                      	;-------------------------------------------------
                      	
                      	;=================================================
                      	;[CMT]CMTファイルの読み込み
                      	;IN  (TGT_CLSTR)
                      	;OUT -
                      	;=================================================
  6E0E                	READ_CMT:
  6E0E  21C0EA        		LD	HL,FKEY_POINTER		;ファンクションキーのポインタを初期化 ！オートスタート対策！
  6E11  22C0ED        		LD	(ACTIVE_FKEY),HL	;
  6E14  CD4970        		CALL	PREP_READ		;
  6E17  CD686C        	.LOOP:	CALL	FETCH_1BYTE		;A<-(FP),FP++
  6E1A  FED3          		CP	BAS_MARK		;BASICマーカーか？
  6E1C  2004          		JR	NZ,.L1			;
  6E1E  CD436E        		CALL	READ_CMT_BASIC		;
  6E21  AF            		XOR	A			;A<-0
  6E22  FE3A          	.L1:	CP	BIN_MARK		;マシン語マーカーか？
  6E24  2004          		JR	NZ,.L3			;
  6E26  CD9B6E        		CALL	READ_CMT_BINARY		;
  6E29  AF            		XOR	A			;A<-0
  6E2A  A7            	.L3:	AND	A			;00Hとマーカー以外の値ならスキップ
  6E2B  200A          		JR	NZ,.L4			;
  6E2D  2168EA        	.L5:	LD	HL,FKEY_FLAG		;ファンクションキー押下フラグが立てられているか
  6E30  7E            		LD	A,(HL)			;
  6E31  B7            		OR	A			;
  6E32  2803          		JR	Z,.L4			;
  6E34  CD3D6F        		CALL	PSEUDO_MON		;キーバッファの文字列を1行だけ疑似モニタ内で処理する。対象は"G"コマンドのみ
  6E37  21E17C        	.L4:	LD	HL,DIR_ENTRY+IDX_SIZE	;=ファイルサイズのポインタ
  6E3A  11167D        		LD	DE,FP			;=FP
  6E3D  CD8A6A        		CALL	DW_CP			;FPがファイルサイズを超えるまで繰り返す
  6E40  30D5          		JR	NC,.LOOP		;
  6E42  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]BASICファイルの読み込み
                      	;・終了時にFPはBAS_ZERO個目の00Hを指している
                      	;IN  FP=ファイルポインタ
                      	;OUT FP
                      	;=================================================
  6E43                	READ_CMT_BASIC:
  6E43  0609          		LD	B,BAS_MARK_LEN-1	;ヘッダーの残り９バイトをチェック
  6E45  CD686C        	.L4:	CALL	FETCH_1BYTE		;A<-(FP),FP++
  6E48  FED3          		CP	BAS_MARK		;
  6E4A  C2FB6E        		JP	NZ,READ_ERR		;
  6E4D  10F6          		DJNZ	.L4			;
                      	
  6E4F  217D7D        		LD	HL,INFO_BUF		;
  6E52  E5            		PUSH	HL			;
  6E53  0606          		LD	B,BFNAME_SIZE		;=CSAVE命令でのファイル名サイズ
  6E55  CD686C        	.L1:	CALL	FETCH_1BYTE		;A<-(FP),FP++
  6E58  77            		LD	(HL),A			;
  6E59  23            		INC	HL			;
  6E5A  10F9          		DJNZ	.L1			;
  6E5C  AF            		XOR	A			;
  6E5D  77            		LD	(HL),A			;=EOL
  6E5E  E1            		POP	HL			;
  6E5F  CD6B69        		CALL	IS_INFO_ON		;
  6E62  2816          		JR	Z,.L9			;
                      	
  6E64  CD456A        		CALL	IPRINT			;
  6E67  5B4241535D0D0A		DB	"[BAS]",CR,LF		;
  6E6E  4E414D453A00  		DB	"NAME:",EOL		;
  6E74  CDED52        		CALL	PRINT			;
  6E77  CDCA5F        		CALL	PUT_CR			;
                      	
  6E7A  2A54EB        	.L9:	LD	HL,(BASBEGIN)		;HL<-BASIC先頭アドレス
  6E7D  CD356F        		CALL	GET_FIREWALL		;DE<-スタックエリアとフリーエリアの境界値
  6E80  060A          	.L2:	LD	B,BAS_ZERO		;=ファイル終了と判断する00Hの数(ゼロカウンタ)
  6E82  C5            	.L3:	PUSH	BC			;
  6E83  CD686C        		CALL	FETCH_1BYTE		;A<-(FP),FP++
  6E86  77            		LD	(HL),A			;メモリへ転送
  6E87  C1            		POP	BC			;
  6E88  CDD35E        		CALL	CPHLDE			;OUT OF MEMORY チェック
  6E8B  3805          		JR	C,.L5			; HL=アドレス
  6E8D  1E07          		LD	E,OUT_OF_MEMORY		; DE=境界値
  6E8F  C3F93B        		JP	ERROR			; HL>=DEでエラー
  6E92  23            	.L5:	INC	HL			;転送先アドレス++
  6E93  B7            		OR	A			;値が00Hでなければゼロカウンタを初期値に戻す
  6E94  20EA          		JR	NZ,.L2			;
  6E96  10EA          		DJNZ	.L3			;値が00HならBのカウントダウンを続ける
                      	
  6E98  C35B70        		JP	FIN_READ_BASIC		;
                      	
                      	
                      	;=================================================
                      	;[CMT]マシン語ファイルの読み込み
                      	;IN  FP=ファイルポインタ
                      	;OUT FP,Z=1:正常終了
                      	;=================================================
  6E9B                	READ_CMT_BINARY:
  6E9B  CD356F        		CALL	GET_FIREWALL		;スタックエリア侵入防止用の境界値をセットする
  6E9E  ED53267D      		LD	(FIREWALL),DE		;
                      	
  6EA2  CD686C        		CALL	FETCH_1BYTE		;A<-(FP),FP++
  6EA5  67            		LD	H,A			;HL<-マシン語ファイルの先頭アドレス
  6EA6  CD686C        		CALL	FETCH_1BYTE		;A<-(FP),FP++
  6EA9  6F            		LD	L,A			;
  6EAA  CD686C        		CALL	FETCH_1BYTE		;A<-(FP),FP++ チェックバイト部は捨てる
                      	
  6EAD  CD6B69        		CALL	IS_INFO_ON		;
  6EB0  2816          		JR	Z,.L1			;
  6EB2  CD456A        		CALL	IPRINT			;
  6EB5  5B42494E5D0D0A		DB	"[BIN]",CR,LF		;
  6EBC  41444452455353		DB	"ADDRESS:",EOL		;
        3A00          	
  6EC5  CDC05E        		CALL	PRTHLHEX		;先頭アドレスを表示
                      	
  6EC8  CD686C        	.L1:	CALL	FETCH_1BYTE		;A<-(FP),FP++
  6ECB  FE3A          		CP	BIN_MARK		;マーカーでなければエラー処理へ
  6ECD  C2FB6E        		JP	NZ,READ_ERR		;
                      	
  6ED0  CD686C        		CALL	FETCH_1BYTE		;A<-(FP),FP++
  6ED3  A7            		AND	A			;データ長が0なら終了へ
  6ED4  2812          		JR	Z,.L3			;
                      	
  6ED6  47            		LD	B,A			;B=データ長
  6ED7  C5            	.L2:	PUSH	BC			;
  6ED8  CD686C        		CALL	FETCH_1BYTE		;データ転送処理
  6EDB  77            		LD	(HL),A			;
  6EDC  23            		INC	HL			;
  6EDD  CD156F        		CALL	CHECK_STACK_AREA	;スタックエリアに侵入しているかチェックする
  6EE0  C1            		POP	BC			;
  6EE1  10F4          		DJNZ	.L2			;データ長だけ繰り返す
  6EE3  CD686C        		CALL	FETCH_1BYTE		;A<-(FP),FP++ チェックバイト部は捨てる
  6EE6  18E0          		JR	.L1			;
                      	
  6EE8  2B            	.L3:	DEC	HL			;
                      	
  6EE9  CD6B69        		CALL	IS_INFO_ON		;
  6EEC  2809          		JR	Z,.L5			;
  6EEE  3E2D          		LD	A,"-"			;終了アドレスを表示
  6EF0  DF            		RST	18H			;
  6EF1  CDC05E        		CALL	PRTHLHEX		;
  6EF4  CDCA5F        		CALL	PUT_CR			;
                      	
  6EF7  CD686C        	.L5:	CALL	FETCH_1BYTE		;FP++
  6EFA  C9            		RET				;
                      	
                      	;=================================================
                      	;[CMT]リードエラー
                      	;IN  HL=アドレス
                      	;=================================================
  6EFB                	READ_ERR:
  6EFB  CD456A        		CALL	IPRINT			;
  6EFE  0D0A4552524F52		DB	CR,LF,"ERROR IN ",EOL	;
        20494E2000    	
  6F0A  CDC05E        		CALL	PRTHLHEX		;
  6F0D  CDCA5F        		CALL	PUT_CR			;
  6F10  1E19          		LD	E,BAD_FILE_DATA		;
  6F12  C3F93B        		JP	ERROR			;
                      	
                      	;=================================================
                      	;[CMT]スタックエリア侵入チェック
                      	;IN  HL=対象のアドレス
                      	;OUT 
                      	;=================================================
  6F15                	CHECK_STACK_AREA:
  6F15  D5            		PUSH	DE
  6F16  E5            		PUSH	HL
                      	
  6F17  EB            		EX	DE,HL			;DE=アドレス
  6F18  2A54EF        		LD	HL,(FREE_END)		;HL<-フリーエリアの底
  6F1B  CDD35E        		CALL	CPHLDE			;
  6F1E  3812          		JR	C,.EXIT			;スタックエリアの底 < アドレス
                      	
  6F20  2A267D        		LD	HL,(FIREWALL)		;HL<-スタックエリアとフリーエリアの境界値
  6F23  CDD35E        		CALL	CPHLDE			;
  6F26  300A          		JR	NC,.EXIT		;スタックエリアとフリーエリアの境界値 >= アドレス
                      	
  6F28  AF            	.ERR:	XOR	A			;
  6F29  3268EA        		LD	(FKEY_FLAG),A		;！重要！ファンクションキー押下フラグを降ろす
  6F2C  21AA77        		LD	HL,MSG_MEMORY_CONFLICT	;スタックエリア侵入エラー
  6F2F  C3FF69        		JP	ERR			;
                      	
  6F32  E1            	.EXIT:	POP	HL
  6F33  D1            		POP	DE
  6F34  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]スタックエリアとフリーエリアの境界値を求める
                      	;OUT DE=境界値
                      	;=================================================
  6F35                	GET_FIREWALL:
  6F35  E5            		PUSH	HL
  6F36  21E0FF        		LD	HL,-32
  6F39  39            		ADD	HL,SP
  6F3A  EB            		EX	DE,HL
  6F3B  E1            		POP	HL
  6F3C  C9            		RET
                      	
                      	
                      	;=================================================
                      	;[CMT]疑似モニタ
                      	;・"G"コマンドのみ処理し、それ以外のコマンドは無視される
                      	;・プログラム中からコールされた場合は処理を行わない！F5キーで実行した場合、必ずFキー押下フラグが立ってしまうため！
                      	;=================================================
  6F3D                	PSEUDO_MON:
  6F3D  2A52EB        		LD	HL,(EXECLINENUM)	;=現在実行中の行番号
  6F40  23            		INC	HL			;停止中は0FFFFHなので、１加えてZフラグが立つかで判別している
  6F41  7C            		LD	A,H			;
  6F42  B5            		OR	L			;
  6F43  C0            		RET	NZ			;プログラムから呼ばれた場合は処理しないで戻る
                      	
  6F44  CD750F        	.L1:	CALL	KEYWAIT			;A<-キー入力された文字
  6F47  CDC15F        		CALL	CAPITAL			;大文字化
  6F4A  FE0D          		CP	CR			;
  6F4C  2813          		JR	Z,.EXIT			;
  6F4E  FE47          		CP	"G"			;
  6F50  20F2          		JR	NZ,.L1			;
  6F52  CD626F        		CALL	.SUB			;16進コード DE→16進 A
  6F55  67            		LD	H,A
  6F56  CD626F        		CALL	.SUB
  6F59  6F            		LD	L,A			;HL<-ジャンプアドレス
  6F5A  CD750F        		CALL	KEYWAIT			;改行を読み捨てる
                      	
  6F5D  C1            		POP	BC			;->READ_CMT	戻りアドレスを捨てる
  6F5E  C1            		POP	BC			;->PUSH BC	スタックを捨てる
  6F5F  C1            		POP	BC			;->LOAD		戻りアドレスを捨てる
  6F60  E9            		JP	(HL)			;Gコマンド実行
                      	
  6F61  C9            	.EXIT:	RET
                      	
  6F62  CD750F        	.SUB:	CALL	KEYWAIT			;
  6F65  57            		LD	D,A			;
  6F66  CD750F        		CALL	KEYWAIT			;
  6F69  5F            		LD	E,A			;
  6F6A  CDA05E        		CALL	CNVHEXBYTE		;16進コード DE→16進 A
  6F6D  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]CMTファイルの書き込み
                      	;IN  (TGT_CLSTR),(ARG0),(ARG1),(ARG2)
                      	;OUT 
                      	;=================================================
  6F6E                	WRITE_CMT:
  6F6E  CD6870        		CALL	PREP_WRITE
                      	
  6F71                	.MERGE:					;MERGEのエントリポイント
  6F71  218F6F        		LD	HL,.RET			;！重要！戻りアドレスをスタックにセットする
  6F74  E5            		PUSH	HL			;
                      	
  6F75  3AAB7C        		LD	A,(ARGNUM)		;A<-入力パラメータ数
  6F78  A7            		AND	A			;入力パラメータ数が0ならBASICセーブへ
  6F79  2820          		JR	Z,WRITE_CMT_BASIC	;
                      	
  6F7B  3D            		DEC	A			;入力パラメータ数が1ならエラーへ
  6F7C  280C          		JR	Z,.ERR			;
                      	
                      	;	LD	DE,(ARG1)		;=開始アドレス
                      	;	LD	HL,(ARG2)		;=終了アドレス
                      	;	CALL	CPHLDE			;終了アドレス-開始アドレス
                      	;	JR	Z,.ERR			;終了アドレス=開始アドレス？
                      	;	JR	NC,WRITE_CMT_BINARY	;終了アドレス>開始アドレス？
                      	
  6F7E  ED5BA57C      		LD	DE,(ARG1)		;=開始アドレス
  6F82  2AA77C        		LD	HL,(ARG2)		;=終了アドレス
  6F85  CDD35E        		CALL	CPHLDE			;終了アドレス-開始アドレス
  6F88  306E          		JR	NC,WRITE_CMT_BINARY	;終了アドレスが、開始アドレスより小さければエラー
                      	
  6F8A  1E05          	.ERR:	LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  6F8C  C3F93B        		JP	ERROR
                      	
  6F8F  C38570        	.RET:	JP	FIN_WRITE
                      	
                      	;=================================================
                      	;[CMT]メモリにBASICプログラムが存在するか
                      	;IN  -
                      	;OUT Z=1:プログラムなし
                      	;=================================================
  6F92                	IS_BASIC:
  6F92  E5            		PUSH	HL			;
  6F93  2A54EB        		LD	HL,(BASBEGIN)		;開始２バイトが00Hなら空とみなす
  6F96  7E            		LD	A,(HL)			;
  6F97  23            		INC	HL			;
  6F98  B6            		OR	(HL)			;
  6F99  E1            		POP	HL			;
  6F9A  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]BASICファイルの書き込み
                      	;=================================================
  6F9B                	WRITE_CMT_BASIC:
  6F9B  CD926F        		CALL	IS_BASIC		;
  6F9E  CA3178        		JP	Z,ERR_EMPTY_FILE	;
                      	
  6FA1  CD865B        		CALL	RAD2RNUM		;BASICの行アドレスを行番号に変換する！重要！
  6FA4  CD456A        		CALL	IPRINT			;
  6FA7  5B4241535D0D0A		DB	"[BAS]",CR,LF,EOL	;
        00            	
                      	
  6FAF  060A          		LD	B,BAS_MARK_LEN		;ヘッダ
  6FB1  3ED3          	.HEADR:	LD	A,BAS_MARK		;
  6FB3  CDF96C        		CALL	POST_1BYTE		;
  6FB6  10F9          		DJNZ	.HEADR			;
                      	
  6FB8  CD456A        		CALL	IPRINT			;ファイル名
  6FBB  4E414D453A00  		DB	"NAME:",EOL		;
                      	
  6FC1  21C57C        		LD	HL,DIR_ENTRY		;
  6FC4  0606          		LD	B,BFNAME_SIZE		;
  6FC6  7E            	.FNAME:	LD	A,(HL)			;
  6FC7  DF            		RST	18H			;
  6FC8  FE20          		CP	SPC			;ファイル名の20Hを00Hに変換する
  6FCA  2001          		JR	NZ,.L1			;
  6FCC  AF            		XOR	A			;
  6FCD  CDF96C        	.L1:	CALL	POST_1BYTE		;
  6FD0  23            		INC	HL			;
  6FD1  10F3          		DJNZ	.FNAME			;
  6FD3  CDCA5F        		CALL	PUT_CR			;
                      	
  6FD6  ED5B54EB      		LD	DE,(BASBEGIN)		;=先頭アドレス
  6FDA  2AA0EF        		LD	HL,(VARBEGIN)		;=終了アドレス
  6FDD  E5            		PUSH	HL			;
  6FDE  B7            		OR	A			;CY<-0
  6FDF  ED52          		SBC	HL,DE			;HL<-終了アドレス-先頭アドレス
  6FE1  44            		LD	B,H			;
  6FE2  4D            		LD	C,L			;BC<-プログラムのサイズ
  6FE3  E1            		POP	HL			;
  6FE4  EB            		EX	DE,HL			;HL=先頭アドレス,DE=終了アドレス
                      	
  6FE5  7E            	.DATA:	LD	A,(HL)			;プログラムデータ部
  6FE6  CDF96C        		CALL	POST_1BYTE		;
  6FE9  23            		INC	HL			;
  6FEA  0B            		DEC	BC			;
  6FEB  78            		LD	A,B			;
  6FEC  B1            		OR	C			;
  6FED  20F6          		JR	NZ,.DATA		;
                      	
  6FEF  0609          		LD	B,9			;フッタ部
  6FF1  AF            	.FOOTR:	XOR	A			;
  6FF2  CDF96C        		CALL	POST_1BYTE		;
  6FF5  10FA          		DJNZ	.FOOTR			;
                      	
  6FF7  C9            		RET
                      	
                      	;=================================================
                      	;[CMT]マシン語ファイルの書き込み
                      	;IN  DE=先頭アドレス,HL=終了アドレス
                      	;OUT 
                      	;=================================================
  6FF8                	WRITE_CMT_BINARY:
  6FF8  CD9B70        		CALL	PRT_WRITE_BIN_INFO	;
                      	
  6FFB  23            		INC	HL			;！重要！データ長計算の便宜上、終了アドレスに１加えておく
  6FFC  3E3A          		LD	A,BIN_MARK		;先頭マーカー部
  6FFE  CDF96C        		CALL	POST_1BYTE		;
                      	
  7001  7A            		LD	A,D			;先頭アドレス部
  7002  CDF96C        		CALL	POST_1BYTE		;
  7005  7B            		LD	A,E			;
  7006  CDF96C        		CALL	POST_1BYTE		;
                      	
  7009  7A            		LD	A,D			;チェックサム計算
  700A  83            		ADD	A,E			;
  700B  2F            		CPL				;
  700C  3C            		INC	A			;
  700D  CDF96C        		CALL	POST_1BYTE		;チェックサム部
                      	
  7010  3E3A          	.L2:	LD	A,BIN_MARK		;マーカー部
  7012  CDF96C        		CALL	POST_1BYTE		;
                      	
  7015  CDD35E        		CALL	CPHLDE			;
  7018  2826          		JR	Z,.EXIT			;先頭アドレス=(終了アドレス+1)なら終了
                      	
  701A  E5            		PUSH	HL			;終了アドレス退避
  701B  06FF          		LD	B,0FFH			;ブロック内データの最大値 255
  701D  B7            		OR	A			;CY<-0
  701E  ED52          		SBC	HL,DE			;HL<-終了アドレス-先頭アドレス
  7020  7C            		LD	A,H			;H>0ならB<-0FFH
  7021  B7            		OR	A			;H=0ならB<-L
  7022  2001          		JR	NZ,.L3			;
  7024  45            		LD	B,L			;
  7025  78            	.L3:	LD	A,B			;
  7026  CDF96C        		CALL	POST_1BYTE		;ブロックサイズ部
  7029  E1            		POP	HL			;終了アドレス復帰
                      	
  702A  EB            		EX	DE,HL			;HL=先頭アドレス,DE=終了アドレス
  702B  48            		LD	C,B			;C<-サイズ チェックサム用
                      	
  702C  7E            	.L1:	LD	A,(HL)			;A<-(先頭アドレス)
  702D  F5            		PUSH	AF			;
  702E  CDF96C        		CALL	POST_1BYTE		;データ部
  7031  F1            		POP	AF			;
                      	
  7032  81            		ADD	A,C			;データブロックのチェックサムを計算
  7033  4F            		LD	C,A			;C<-C+A
                      	
  7034  23            		INC	HL			;先頭アドレス++
  7035  10F5          		DJNZ	.L1			;
                      	
  7037  EB            		EX	DE,HL			;DE=先頭アドレス,HL=終了アドレス
  7038  79            		LD	A,C			;A<-チェックサム
  7039  ED44          		NEG				;符号を反転
  703B  CDF96C        		CALL	POST_1BYTE		;チェックサム部
  703E  18D0          		JR	.L2			;
                      	
  7040  AF            	.EXIT:	XOR	A			;
  7041  CDF96C        		CALL	POST_1BYTE		;終了マーカ 00H,00H
  7044  AF            		XOR	A			;
  7045  CDF96C        		CALL	POST_1BYTE		;
                      	
  7048  C9            		RET
                      	
                      	;=================================================
                      	;読み込みの前処理
                      	;=================================================
  7049                	PREP_READ:
  7049  AF            		XOR	A			;コールバックフラグを降ろす
  704A  327A7D        		LD	(IS_CALLBACK),A		;
  704D  2A147D        		LD	HL,(TGT_CLSTR)		;HL<-ファイルの開始クラスタ＃
  7050  CD196C        		CALL	INIT_FP			;ファイルポインタ初期化
  7053  DD21BD7C      		LD	IX,FILE_BFFR_STRCT	;IX<-ファイルバッファ構造体のポインタ
  7057  CD616C        		CALL	READ_FP_SCTR		;FPが示すセクタをIXバッファ構造体に読み込む
  705A  C9            		RET
                      	
                      	;=================================================
                      	;BASIC読み込みの後処理
                      	;=================================================
  705B                	FIN_READ_BASIC:
  705B  22A0EF        		LD	(VARBEGIN),HL		;BASIC終了アドレスをセット
  705E  22A2EF        		LD	(ARRBEGIN),HL		;
  7061  22A4EF        		LD	(FREBEGIN),HL		;
  7064  CD763D        		CALL	PRGFIT			;
  7067  C9            		RET
                      	
                      	;=================================================
                      	;書き込みの前処理
                      	;=================================================
  7068                	PREP_WRITE:
  7068  2A147D        		LD	HL,(TGT_CLSTR)		;
  706B  CD196C        		CALL	INIT_FP			;
  706E  CD3563        		CALL	ERASE_FAT_LINK		;
  7071  DD21BD7C      		LD	IX,FILE_BFFR_STRCT	;
  7075  CD5964        		CALL	CLR_BFFR		;
                      	
  7078  CD376C        		CALL	FP2SCTR			;(DW0)<-FPのセクタ＃
  707B  21317D        		LD	HL,DW0			;バッファのセクタ情報<-(DW0)
  707E  DDE5          		PUSH	IX			;
  7080  D1            		POP	DE			;
  7081  CDAB6A        		CALL	DW_COPY			;
                      	
  7084  C9            		RET
                      	
                      	;=================================================
                      	;書き込みの後処理
                      	;=================================================
  7085                	FIN_WRITE:
  7085  21167D        		LD	HL,FP			;ファイルサイズをディレクトリエントリにセットする
  7088  11E17C        		LD	DE,DIR_ENTRY+IDX_SIZE	;
  708B  CDAB6A        		CALL	DW_COPY			;
  708E  2A1A7D        		LD	HL,(FP_CLSTR)		;HL<-最終クラスタ＃
  7091  11FFFF        		LD	DE,0FFFFH		;最終クラスタのFATエントリにFFFFHを書き込む
  7094  CD5963        		CALL	WRITE_FAT_DATA		;
  7097  CD3F64        		CALL	FLUSH_BFFR		;ファイルバッファとFAT1,2バッファをメディアに書き込む
  709A  C9            		RET
                      	
                      	;=================================================
                      	;機械語書き込み情報表示
                      	;IN  DE=開始アドレス,HL=終了アドレス
                      	;=================================================
  709B                	PRT_WRITE_BIN_INFO:
  709B  CD456A        		CALL	IPRINT			;
  709E  5B42494E5D0D0A		DB	"[BIN]",CR,LF		;
  70A5  41444452455353		DB	"ADDRESS:",EOL		;
        3A00          	
  70AE  D5            		PUSH	DE			;
  70AF  E5            		PUSH	HL			;
  70B0  EB            		EX	DE,HL			;
  70B1  CDC05E        		CALL	PRTHLHEX		;
  70B4  3E2D          		LD	A,"-"			;
  70B6  DF            		RST	18H			;
                      	
  70B7  EB            		EX	DE,HL			;
  70B8  CDC05E        		CALL	PRTHLHEX		;
  70BB  CDCA5F        		CALL	PUT_CR			;
  70BE  E1            		POP	HL			;
  70BF  D1            		POP	DE			;
  70C0  C9            		RET
                      	
                      	
                      	
                      	
                      	
[EOF:CMT.asm]
                      	INCLUDE	"BIN.asm"				;BINファイル関連
                      	
                      	;=================================================
                      	;[BIN]セーフゾーンチェック
                      	;DE~HLのアドレス領域がスタック領域を犯していないかチェックする
                      	;フリーエリアの底＜開始アドレス または 終了アドレス＜境界値 であればセーフ
                      	;IN  DE=開始アドレス,HL=終了アドレス
                      	;OUT -
                      	;=================================================
  70C1                	IS_SAFE_ZONE:
  70C1  E5            		PUSH	HL
  70C2  2A54EF        		LD	HL,(FREE_END)		;HL<-フリーエリアの底
  70C5  CDD35E        		CALL	CPHLDE			;フリーエリアの底-開始アドレス
  70C8  E1            		POP	HL			;HL=終了アドレス
  70C9  D8            		RET	C			;フリーエリアの底<開始アドレス
                      	
  70CA  D5            		PUSH	DE			;
  70CB  ED5B267D      		LD	DE,(FIREWALL)		;DE<-スタックエリアとフリーエリアの境界値
  70CF  CDD35E        		CALL	CPHLDE			;終了アドレス-境界値
  70D2  D1            		POP	DE			;DE=開始アドレス
  70D3  D8            		RET	C			;境界値>終了アドレス
                      	
  70D4  C3286F        		JP	CHECK_STACK_AREA.ERR	;エラー
                      	
                      	;=================================================
                      	;[BIN]バイナリファイルの読み込み
                      	;IN  (TGT_CLSTR),(ARG0),(ARG1)=新しい開始アドレス<省略可>
                      	;OUT -
                      	;=================================================
  70D7                	READ_BIN:
  70D7  CD4970        		CALL	PREP_READ		;
  70DA  CD356F        		CALL	GET_FIREWALL		;
  70DD  ED53267D      		LD	(FIREWALL),DE		;
                      	
  70E1  CD686C        		CALL	FETCH_1BYTE		;
  70E4  6F            		LD	L,A			;HL<-マシン語ファイルの開始アドレス
  70E5  CD686C        		CALL	FETCH_1BYTE		;
  70E8  67            		LD	H,A			;
  70E9  CD686C        		CALL	FETCH_1BYTE		;
  70EC  5F            		LD	E,A			;DE<-マシン語ファイルの終了アドレス
  70ED  CD686C        		CALL	FETCH_1BYTE		;
  70F0  57            		LD	D,A			;
  70F1  CD686C        		CALL	FETCH_1BYTE		;
  70F4  4F            		LD	C,A			;BC<-マシン語ファイルの実行アドレス
  70F5  CD686C        		CALL	FETCH_1BYTE		;
  70F8  47            		LD	B,A			;
  70F9  ED43AD7C      		LD	(EXECADR),BC		;実行アドレスをセット
                      	
  70FD  CD6B69        		CALL	IS_INFO_ON		;ファイル情報を出力
  7100  2830          		JR	Z,.L6			;
  7102  D5            		PUSH	DE			;=終了アドレス
  7103  E5            		PUSH	HL			;=開始アドレス
  7104  CD456A        		CALL	IPRINT			;
  7107  5B42494E5D0D0A		DB	"[BIN]",CR,LF		;
  710E  41444452455353		DB	"ADDRESS:",EOL		;
        3A00          	
  7117  CDC05E        		CALL	PRTHLHEX		;開始アドレスを表示
  711A  3E2D          		LD	A,"-"			;
  711C  DF            		RST	18H			;
  711D  EB            		EX	DE,HL			;
  711E  CDC05E        		CALL	PRTHLHEX		;終了アドレスを表示
  7121  60            		LD	H,B			;
  7122  69            		LD	L,C			;
  7123  7C            		LD	A,H			;
  7124  B5            		OR	L			;
  7125  2809          		JR	Z,.L10			;
  7127  3E3A          		LD	A,":"			;実行アドレスを出力
  7129  DF            		RST	18H			;
  712A  CDC05E        		CALL	PRTHLHEX		;
  712D  CDCA5F        		CALL	PUT_CR			;
  7130  E1            	.L10:	POP	HL			;HL<-開始アドレス
  7131  D1            		POP	DE			;DE<-終了アドレス
                      	
  7132  EB            	.L6:	EX	DE,HL			;DE=開始アドレス,HL=終了アドレス
  7133  CDD35E        		CALL	CPHLDE			;終了アドレスが、開始アドレスより小さければエラー
  7136  3005          		JR	NC,.L5			;
  7138  1E19          		LD	E,BAD_FILE_DATA		;
  713A  C3F93B        		JP	ERROR			;
                      	
  713D  CDC170        	.L5:	CALL	IS_SAFE_ZONE		;セーフゾーンチェック
  7140  B7            		OR	A			;CY<-0
  7141  ED52          		SBC	HL,DE			;HL<-終了アドレス-開始アドレス
  7143  44            		LD	B,H			;
  7144  4D            		LD	C,L			;
  7145  03            		INC	BC			;BC<-ファイルサイズ
  7146  62            		LD	H,D			;HL<-DE=開始アドレス
  7147  6B            		LD	L,E			;
                      	
  7148  3AAB7C        		LD	A,(ARGNUM)		;A<-入力パラメータ数
  714B  A7            		AND	A			;入力パラメータ数が0なら.L2へ
  714C  2820          		JR	Z,.L2
                      	
  714E  2AA57C        		LD	HL,(ARG1)		;HL<-新しい開始アドレス
  7151  FE01          		CP	1			;入力パラメータ数が1なら.L2へ
  7153  2819          		JR	Z,.L2
                      	
  7155  23            		INC	HL			;(ARG1)は0FFFFHか？
  7156  7C            		LD	A,H			;
  7157  B5            		OR	L			;
  7158  2805          		JR	Z,.L9			;
  715A  1E05          		LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  715C  C3F93B        		JP	ERROR			;
                      	
  715F  62            	.L9:	LD	H,D			;HL<-開始アドレス
  7160  6B            		LD	L,E			;
  7161  3EFF          		LD	A,TRUE			;コールバックフラグを立てる
  7163  327A7D        		LD	(IS_CALLBACK),A		;
  7166  ED5BA77C      		LD	DE,(ARG2)		;コールバックアドレスをセット
  716A  ED537B7D      		LD	(CALLBACK),DE		;
                      	
  716E  110002        	.L2:	LD	DE,CB_BYTES		;=コールバックタイミングカウンタ
                      	
  7171  CD686C        	.LOOP:	CALL	FETCH_1BYTE		;メモリに書き込み
  7174  77            		LD	(HL),A			;
  7175  23            		INC	HL			;
                      	
  7176  3A7A7D        	.L1:	LD	A,(IS_CALLBACK)		;
  7179  A7            		AND	A			;
  717A  2812          		JR	Z,.L8			;
                      	
  717C  1B            		DEC	DE			;コールバックタイミングカウンタを減らす
  717D  7A            		LD	A,D			;
  717E  B3            		OR	E			;
  717F  200D          		JR	NZ,.L8			;
  7181  E5            		PUSH	HL			;
  7182  218A71        		LD	HL,.RET			;戻り先アドレスをスタックに積む
  7185  E5            		PUSH	HL			;
  7186  2A7B7D        		LD	HL,(CALLBACK)		;
  7189  E9            		JP	(HL)			;
  718A  110002        	.RET:	LD	DE,CB_BYTES		;コールバックタイミングカウンタをリセットする
  718D  E1            		POP	HL			;
                      	
  718E  0B            	.L8:	DEC	BC			;残りサイズ--
  718F  78            		LD	A,B			;
  7190  B1            		OR	C			;
  7191  20DE          		JR	NZ,.LOOP		;
                      	
  7193  2AAD7C        	.L7:	LD	HL,(EXECADR)		;HL<-実行アドレス
  7196  7D            		LD	A,L			;実行アドレスが0000Hなら終了へ
  7197  B4            		OR	H			;
  7198  280C          		JR	Z,.L3			;
                      	
  719A  3AAC7C        		LD	A,(EXECFLG)		;フラグが立っていたら機械語プログラムを実行する
  719D  A7            		AND	A			;
  719E  2806          		JR	Z,.L3			;
  71A0  AF            		XOR	A			;フラグを降ろす
  71A1  32AC7C        		LD	(EXECFLG),A		;
  71A4  1801          		JR	EXECUTE			;実行
                      	
  71A6  C9            	.L3:	RET				;
                      	
                      	;=================================================
                      	;機械語プログラムを実行する
                      	; IN	(EXECADR)
                      	;=================================================
  71A7                	EXECUTE:
  71A7  CD5A04        		CALL	CLS
  71AA  1140FE        		LD	DE,0FE40H	;VRAM
  71AD  21DE71        		LD	HL,.L1
  71B0  010500        		LD	BC,5
  71B3  EDB0          		LDIR			; VRAM <- FUNCTION KEY DATA
  71B5  D5            		PUSH	DE
  71B6  3AAE7C        		LD	A,(EXECADR+1)
  71B9  CD835E        		CALL	CNVBYTEHEX
  71BC  E1            		POP	HL
  71BD  72            		LD	(HL),D
  71BE  23            		INC	HL
  71BF  73            		LD	(HL),E
  71C0  23            		INC	HL
  71C1  3AAD7C        		LD	A,(EXECADR)
  71C4  CD835E        		CALL	CNVBYTEHEX
  71C7  72            		LD	(HL),D
  71C8  23            		INC	HL
  71C9  73            		LD	(HL),E
  71CA  23            		INC	HL
  71CB  360D          		LD	(HL),0DH
  71CD  23            		INC	HL
  71CE  3600          		LD	(HL),0
                      	
  71D0  3E01          		LD	A,1
  71D2  3268EA        		LD	(FKEY_FLAG),A
  71D5  2140FE        		LD	HL,0FE40H
  71D8  22C0ED        		LD	(ACTIVE_FKEY),HL
  71DB  C38100        		JP	BASIC
                      	
  71DE  4D4F4E0D47    	.L1:	DB	"MON",CR,"G"
                      	
                      	
                      	;=================================================
                      	;[BIN]バイナリファイルの書き込み
                      	;IN  (TGT_CLSTR),(ARG0),(ARG1)=開始アドレス,(ARG2)=終了アドレス,(ARG3)=実行アドレス<省略可>
                      	;OUT -
                      	;=================================================
  71E3                	WRITE_BIN:
  71E3  CD6870        		CALL	PREP_WRITE		;
                      	
  71E6  3AAB7C        		LD	A,(ARGNUM)		;入力パラメータ数が2未満ならエラーへ
  71E9  FE02          		CP	2			;
  71EB  3813          		JR	C,.ERR			;
                      	
  71ED  ED5BA57C      		LD	DE,(ARG1)		;DE<-開始アドレス
  71F1  2AA77C        		LD	HL,(ARG2)		;HL<-終了アドレス
  71F4  E5            		PUSH	HL			;
  71F5  23            		INC	HL			;サイズ算出用に１を加算
  71F6  B7            		OR	A			;
  71F7  ED52          		SBC	HL,DE			;
  71F9  44            		LD	B,H			;BC<-サイズ
  71FA  4D            		LD	C,L			;
  71FB  E1            		POP	HL			;
  71FC  2802          		JR	Z,.ERR			;サイズが０ならエラー
  71FE  3005          		JR	NC,.L1			;サイズが正の数なら.L1へ
                      	
  7200  1E05          	.ERR:	LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  7202  C3F93B        		JP	ERROR			;
                      	
  7205  C5            	.L1:	PUSH	BC			;サイズを退避
                      	
  7206  CD9B70        		CALL	PRT_WRITE_BIN_INFO	;
  7209  EB            		EX	DE,HL			;HL=開始アドレス,DE=終了アドレス
  720A  7D            		LD	A,L			;開始アドレス部
  720B  CDF96C        		CALL	POST_1BYTE		;
  720E  7C            		LD	A,H			;
  720F  CDF96C        		CALL	POST_1BYTE		;
                      	
  7212  7B            		LD	A,E			;終了アドレス部
  7213  CDF96C        		CALL	POST_1BYTE		;
  7216  7A            		LD	A,D			;
  7217  CDF96C        		CALL	POST_1BYTE		;
                      	
  721A  E5            		PUSH	HL			;
  721B  2AA97C        		LD	HL,(ARG3)		;
  721E  7D            		LD	A,L			;実行アドレス部
  721F  CDF96C        		CALL	POST_1BYTE		;
  7222  7C            		LD	A,H			;
  7223  CDF96C        		CALL	POST_1BYTE		;
  7226  E1            		POP	HL			;
                      	
  7227  C1            		POP	BC			;サイズを復帰
  7228  7E            	.L2:	LD	A,(HL)			;
  7229  CDF96C        		CALL	POST_1BYTE		;
  722C  23            		INC	HL			;
  722D  0B            		DEC	BC			;
  722E  78            		LD	A,B			;
  722F  B1            		OR	C			;
  7230  20F6          		JR	NZ,.L2			;
                      	
  7232  C38570        		JP	FIN_WRITE		;
                      	
                      	
[EOF:BIN.asm]
                      	INCLUDE	"BAS.asm"				;BASファイル関連
                      	
                      	;=================================================
                      	;[BAS]BASファイルの読み込み
                      	;IN  (TGT_CLSTR)
                      	;OUT -
                      	;=================================================
  7235                	READ_BAS:
  7235  CD4970        		CALL	PREP_READ		;
                      	
  7238  3AAB7C        		LD	A,(ARGNUM)		;入力パラメータ数が0でなければエラーへ
  723B  A7            		AND	A			;
  723C  2805          		JR	Z,.L1			;
                      	
  723E  1E05          		LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  7240  C3F93B        		JP	ERROR
                      	
  7243  CD6B69        	.L1:	CALL	IS_INFO_ON		;
  7246  280B          		JR	Z,.L4			;
  7248  CD456A        		CALL	IPRINT			;
  724B  5B4241535D0D0A		DB	"[BAS]",CR,LF,EOL	;
        00            	
                      	
  7253  2A54EB        	.L4:	LD	HL,(BASBEGIN)		;
  7256  CD356F        		CALL	GET_FIREWALL		;
  7259  060A          	.L2:	LD	B,BAS_ZERO		;
  725B  C5            	.L3:	PUSH	BC			;
  725C  CD686C        		CALL	FETCH_1BYTE		;
  725F  77            		LD	(HL),A			;
  7260  C1            		POP	BC			;
  7261  CDD35E        		CALL	CPHLDE			;OUT OF MEMORY チェック
  7264  3805          		JR	C,.L5			; HL=アドレス
  7266  1E07          		LD	E,OUT_OF_MEMORY		; DE=境界値
  7268  C3F93B        		JP	ERROR			; HL>=DEでエラー
  726B  23            	.L5:	INC	HL			;転送先アドレス++
  726C  B7            		OR	A			;値が00Hでなければゼロカウンタを初期値に戻す
  726D  20EA          		JR	NZ,.L2			;
  726F  10EA          		DJNZ	.L3			;値が00HならBのカウントダウンを続ける
                      	
  7271  C35B70        		JP	FIN_READ_BASIC		;
                      	
                      	
                      	;=================================================
                      	;[BAS]BASファイルの書き込み
                      	;IN  (TGT_CLSTR)
                      	;OUT -
                      	;=================================================
  7274                	WRITE_BAS:
  7274  CD926F        		CALL	IS_BASIC		;
  7277  CA3178        		JP	Z,ERR_EMPTY_FILE	;
                      	
  727A  CD6870        		CALL	PREP_WRITE		;
  727D  CD865B        		CALL	RAD2RNUM		;BASICの行アドレスを行番号に変換する！重要！
                      	
  7280  3AAB7C        		LD	A,(ARGNUM)		;入力パラメータ数が0でなければエラーへ
  7283  A7            		AND	A			;
  7284  2805          		JR	Z,.L1			;
                      	
  7286  1E05          		LD	E,ILLEGAL_FUNCTION_CALL	;引数が不正
  7288  C3F93B        		JP	ERROR
                      	
  728B  CD456A        	.L1:	CALL	IPRINT			;
  728E  5B4241535D0D0A		DB	"[BAS]",CR,LF,EOL	;
        00            	
                      	
  7296  ED5B54EB      		LD	DE,(BASBEGIN)		;=先頭アドレス
  729A  2AA0EF        		LD	HL,(VARBEGIN)		;=終了アドレス
  729D  E5            		PUSH	HL			;
  729E  B7            		OR	A			;CY<-0
  729F  ED52          		SBC	HL,DE			;HL<-終了アドレス-先頭アドレス
  72A1  44            		LD	B,H			;
  72A2  4D            		LD	C,L			;BC<-プログラムのサイズ
  72A3  E1            		POP	HL			;
  72A4  EB            		EX	DE,HL			;HL=先頭アドレス,DE=終了アドレス
  72A5  7E            	.L2:	LD	A,(HL)			;
  72A6  CDF96C        		CALL	POST_1BYTE		;
  72A9  23            		INC	HL			;
  72AA  0B            		DEC	BC			;
  72AB  78            		LD	A,B			;
  72AC  B1            		OR	C			;
  72AD  20F6          		JR	NZ,.L2			;
                      	
  72AF  C38570        		JP	FIN_WRITE		;
                      	
[EOF:BAS.asm]
                      	INCLUDE	"DATE.asm"				;日時
                      	
  00FF                	KANJI:			EQU	TRUE	;ファイル更新日時に漢字を使用する場合はTRUE
  0000                	SECONDS:		EQU	FALSE	;ファイル更新日時の"秒"を出力する場合はTRUE
                      	
                      	;=================================================
                      	;ファイルの日付情報を現在の位置に出力する
                      	;IN  DE=エンコードされた日付
                      	;OUT 
                      	;=================================================
  72B2                	PRT_FDATE:
  72B2  D5            		PUSH	DE
  72B3  D9            		EXX
  72B4  E1            		POP	HL
  72B5  CDE572        		CALL	GET_FDATE	;
                      	
  72B8  7A            		LD	A,D		;=YEAR
  72B9  CD4773        		CALL	PRT_WDEC	;
                      	IF KANJI
  72BC  3EF2          		LD	A,0F2H		;="年"
                      	ELSE
;;                   -		LD	A,"/"
                      	ENDIF
  72BE  DF            		RST	18H		;
  72BF  7B            		LD	A,E		;=MONTH
  72C0  CD4773        		CALL	PRT_WDEC	;
                      	IF KANJI
  72C3  3EF3          		LD	A,0F3H		;="月"
                      	ELSE
;;                   -		LD	A,"/"
                      	ENDIF
  72C5  DF            		RST	18H		;
  72C6  79            		LD	A,C		;=DAY
  72C7  CD4773        		CALL	PRT_WDEC	;
                      	IF KANJI
  72CA  3EF4          		LD	A,0F4H		;="日"
  72CC  DF            		RST	18H		;
                      	ENDIF
                      	
  72CD  D9            		EXX
  72CE  C9            		RET
                      	
                      	;=================================================
                      	;ファイルの時刻情報を現在の位置に出力する
                      	;IN  DE=エンコードされた時刻
                      	;OUT 
                      	;=================================================
  72CF                	PRT_FTIME:
  72CF  D5            		PUSH	DE
  72D0  D9            		EXX
  72D1  E1            		POP	HL
  72D2  CD0373        		CALL	GET_FTIME	;D=HOUR,E=MIN,C=SEC
                      	
  72D5  7A            		LD	A,D		;=HOUR
  72D6  CD4773        		CALL	PRT_WDEC		;
                      	IF KANJI
  72D9  3EF5          		LD	A,0F5H		;"時"
                      	ELSE
;;                   -		LD	A,":"
                      	ENDIF
  72DB  DF            		RST	18H		;
  72DC  7B            		LD	A,E		;=MIN
  72DD  CD4773        		CALL	PRT_WDEC	;
                      	IF KANJI
  72E0  3EF6          		LD	A,0F6H		;"分"
  72E2  DF            		RST	18H		;
                      	ENDIF
                      	
                      	IF SECONDS
;;                   -	 IF !KANJI
;;                   -		LD	A,":"
;;                   -		RST	18H
;;                   -	 ENDIF
;;                   -	
;;                   -		RST	18H		;
;;                   -		LD	A,C		;=SEC
;;                   -		CALL	PRT_WDEC	;
;;                   -	 IF KANJI
;;                   -		LD	A,0F7H		;"秒"
;;                   -		RST	18H		;
;;                   -	 ENDIF
                      	ENDIF
                      	
  72E3  D9            		EXX
  72E4  C9            		RET
                      	
                      	;=================================================
                      	;[DATE]ファイルの日付情報をレジスタに取得する
                      	;IN  HL=エンコードされた日付
                      	;OUT D=YEAR,E=MONTH,C=DAY
                      	;=================================================
  72E5                	GET_FDATE:
                      					;L=MMMDDDDd
                      					;H=YYYYYYYm
  72E5  7D            		LD	A,L		;A=MMMDDDDd
  72E6  CB3C          		SRL	H		;H=0YYYYYYY CY=m H=YEAR
  72E8  1F            		RRA			;A=mMMMDDDD CY=d
  72E9  CB3F          		SRL	A		;
  72EB  CB3F          		SRL	A		;
  72ED  CB3F          		SRL	A		;
  72EF  CB3F          		SRL	A		;A=0000mMMM
  72F1  5F            		LD	E,A		;B=MONTH
  72F2  3E1F          		LD	A,00011111B	;
  72F4  A5            		AND	L		;
  72F5  4F            		LD	C,A		;C=DAY
  72F6  3E50          		LD	A,80		;=1980の下二桁
  72F8  84            		ADD	A,H		;=YEAR+80
  72F9  FE64          	.L2:	CP	100		;YEARを100未満にする
  72FB  3804          		JR	C,.L1		;
  72FD  D664          		SUB	100		;
  72FF  18F8          		JR	.L2		;
  7301  57            	.L1:	LD	D,A		;D=YEAR
                      	
  7302  C9            		RET
                      	
                      	;=================================================
                      	;[DATE]ファイルの時刻情報をレジスタに取得する
                      	;IN  HL=エンコードされた時刻
                      	;OUT D=HOUR,E=MIN,C=SEC
                      	;=================================================
  7303                	GET_FTIME:
                      					;L=MMMSSSSS
                      					;H=HHHHHMMM
  7303  3E1F          		LD	A,00011111B	;秒のビットマスク
  7305  A5            		AND	L		;A=000SSSSS
  7306  17            		RLA			;A=00SSSSS0 Ax2
  7307  4F            		LD	C,A		;C=00SSSSS0=SEC
  7308  7D            		LD	A,L		;A=MMMSSSSS
  7309  CB3C          		SRL	H		;H=0HHHHHMM CY=M
  730B  1F            		RRA			;A=MMMMSSSS CY=S
  730C  CB3C          		SRL	H		;H=00HHHHHM CY=M
  730E  1F            		RRA			;A=MMMMMSSS
  730F  CB3C          		SRL	H		;H=000HHHHH=HOUR
  7311  54            		LD	D,H		;D=HOUR
                      	
  7312  1F            		RRA			;A=MMMMMMSS
  7313  CB3F          		SRL	A		;A=0MMMMMMS
  7315  CB3F          		SRL	A		;A=00MMMMMM
  7317  5F            		LD	E,A		;E=00MMMMMM=MIN
                      					;D=HOUR,E=MIN
  7318  C9            		RET
                      	
                      	;=================================================
                      	;[DATE]時刻をFATフォーマットにエンコードする
                      	;IN  D=000HHHHH=0~31,E=00MMMMMM=0~63,C=00SSSSSS=0~63
                      	;OUT HL=HHHHHMMM.MMMSSSSS
                      	;=================================================
  7319                	ENC_TIME:
  7319  CBC1          		SET	0,C				;C=00SSSSS0 SECを1/2にする
  731B  CB21          		SLA	C				;C=0SSSSS00
  731D  CB21          		SLA	C				;C=SSSSS000
  731F  79            		LD	A,C				;A=SSSSS000
  7320  CB3B          		SRL	E				;E=000MMMMM CY=M
  7322  1F            		RRA					;A=MSSSSS00 CY=0
  7323  CB3B          		SRL	E				;E=0000MMMM CY=M
  7325  1F            		RRA					;A=MMSSSSS0 CY=0
  7326  CB3B          		SRL	E				;E=00000MMM CY=M
  7328  1F            		RRA					;A=MMMSSSSS CY=0
  7329  6F            		LD	L,A				;L=MMMSSSSS CY=0
  732A  7A            		LD	A,D				;A=000HHHHH CY=0
  732B  07            		RLCA					;A=00HHHHH0 CY=0
  732C  07            		RLCA					;A=0HHHHH00 CY=0
  732D  07            		RLCA					;A=HHHHH000 CY=0
  732E  B3            		OR	E				;A=HHHHHMMM
  732F  67            		LD	H,A				;H=HHHHHMMM
  7330  C9            		RET					;
                      	
                      	;=================================================
                      	;[DATE]日付をFATフォーマットにエンコードする
                      	;IN  D=0YYYYYYY=0~127,E=0000MMMM=0~15,C=000DDDDD=0~31
                      	;OUT HL=YYYYYYYM.MMMDDDDD
                      	;=================================================
  7331                	ENC_DATE:
  7331  CB21          		SLA	C				;C=00DDDDD0
  7333  CB21          		SLA	C				;C=0DDDDD00
  7335  CB21          		SLA	C				;C=DDDDD000
  7337  79            		LD	A,C				;A=DDDDD000
  7338  CB3B          		SRL	E				;L=00000MMM CY=M
  733A  1F            		RRA					;A=MDDDDD00 CY=0
  733B  CB3B          		SRL	E				;L=000000MM CY=M
  733D  1F            		RRA					;A=MMDDDDD0 CY=0
  733E  CB3B          		SRL	E				;L=0000000M CY=M
  7340  1F            		RRA					;A=MMMDDDDD CY=0
  7341  6F            		LD	L,A				;L=MMMDDDDD
  7342  7A            		LD	A,D				;A=0YYYYYYY
  7343  07            		RLCA					;A=YYYYYYY0
  7344  B3            		OR	E				;A=YYYYYYYM
  7345  67            		LD	H,A				;H=YYYYYYYM
  7346  C9            		RET					;
                      	
                      	;=================================================
                      	;2桁の10進数を現在の位置に出力する
                      	;IN  A
                      	;OUT -
                      	;=================================================
  7347                	PRT_WDEC:
  7347  C5            		PUSH	BC				;
  7348  FE64          	.L4:	CP	100				;あらかじめ値を100未満に修正する
  734A  3804          		JR	C,.L3				;
  734C  D664          		SUB	100				;
  734E  18F8          		JR	.L4				;
  7350  0600          	.L3:	LD	B,0				;
  7352  0E0A          		LD	C,10				;
  7354  91            	.L2:	SUB	C				;
  7355  3803          		JR	C,.L1				;
  7357  04            		INC	B				;
  7358  18FA          		JR	.L2				;
  735A  C60A          	.L1:	ADD	A,10				;
  735C  4F            		LD	C,A				;
  735D  3E30          		LD	A,"0"				;
  735F  80            		ADD	A,B				;
  7360  DF            		RST	18H				;
  7361  3E30          		LD	A,"0"				;
  7363  81            		ADD	A,C				;
  7364  DF            		RST	18H				;
  7365  C1            		POP	BC				;
  7366  C9            		RET					;
                      	
[EOF:DATE.asm]
                      	INCLUDE	"DUMP.asm"				;ダンプ表示
                      	
                      	;=================================================
                      	;[DUMP]ディレクトリエントリのプロパティを表示する
                      	;IN  (DIR_ENTRY)
                      	;OUT 
                      	;=================================================
  7367                	DUMP_DENT:
  7367  E5            		PUSH	HL				;
  7368  CD2E68        		CALL	IS_FAT16			;
  736B  21C57C        		LD	HL,DIR_ENTRY			;
  736E  CD456A        		CALL	IPRINT				;
  7371  4E414D4520203A		DB	"NAME  :",EOL			;
        00            	
  7379  060B          		LD	B,DNAME_SIZE			;ファイル名と拡張子
  737B  7E            	.L1:	LD	A,(HL)				;
  737C  23            		INC	HL				;
  737D  DF            		RST	18H				;
  737E  10FB          		DJNZ	.L1				;
  7380  CDCA5F        		CALL	PUT_CR				;
  7383  CD456A        		CALL	IPRINT				;
  7386  4154524220203A		DB	"ATRB  :--",EOL			;
        2D2D00        	
  7390  7E            		LD	A,(HL)				;属性
  7391  23            		INC	HL				;
  7392  E5            		PUSH	HL				;
  7393  F5            		PUSH	AF				;
  7394  115E74        		LD	DE,ATRB_BIT_SYMBL		;DE<-属性シンボル文字列へのポインタ
  7397  211F7D        		LD	HL,ATRB				;HL<-固定長文字列ATRBへのポインタ
  739A  CD5077        		CALL	NULL_STR			;
  739D  F1            		POP	AF				;
  739E  CB27          		SLA	A				;BIT7
  73A0  CB27          		SLA	A				;BIT6
  73A2  0606          		LD	B,6				;
  73A4  EB            	.L4:	EX	DE,HL				;
  73A5  4E            		LD	C,(HL)				;C<-(属性シンボル)
  73A6  CB27          		SLA	A				;左シフト
  73A8  3802          		JR	C,.L3				;
  73AA  0E2D          	.L2:	LD	C,"-"				;
  73AC  EB            	.L3:	EX	DE,HL				;HL=固定長文字列ATRBへのポインタ
  73AD  F5            		PUSH	AF				;
  73AE  CD5D77        		CALL	ADD_STR				;(ATRB)に属性シンボルCを加える
  73B1  F1            		POP	AF				;
  73B2  13            		INC	DE				;属性シンボル文字列へのポインタ++
  73B3  10EF          		DJNZ	.L4				;
  73B5  211F7D        		LD	HL,ATRB				;
  73B8  46            		LD	B,(HL)				;
  73B9  23            	.L5:	INC	HL				;
  73BA  7E            		LD	A,(HL)				;
  73BB  DF            		RST	18H				;
  73BC  10FB          		DJNZ	.L5				;
  73BE  E1            		POP	HL				;
  73BF  CDCA5F        		CALL	PUT_CR				;
  73C2  23            		INC	HL				;+0CH
  73C3  23            		INC	HL				;+0DH
  73C4  CD456A        		CALL	IPRINT				;
  73C7  4352454154453A		DB	"CREATE:",EOL			;
        00            	
  73CF  5E            		LD	E,(HL)				;作成時刻 0EH,0FH
  73D0  23            		INC	HL				;
  73D1  56            		LD	D,(HL)				;
  73D2  23            		INC	HL				;
  73D3  CDCF72        		CALL	PRT_FTIME			;
  73D6  CDD45F        		CALL	PUT_SPC				;
  73D9  5E            		LD	E,(HL)				;作成日 10H,11H
  73DA  23            		INC	HL				;
  73DB  56            		LD	D,(HL)				;
  73DC  23            		INC	HL				;
  73DD  CDB272        		CALL	PRT_FDATE			;
  73E0  CDCA5F        		CALL	PUT_CR				;
  73E3  23            		INC	HL				;+12H
  73E4  23            		INC	HL				;+13H
  73E5  23            		INC	HL				;+14H
  73E6  23            		INC	HL				;+15H
  73E7  CD456A        		CALL	IPRINT				;
  73EA  5550444154453A		DB	"UPDATE:",EOL			;
        00            	
  73F2  5E            		LD	E,(HL)				;更新時刻 16H,17H
  73F3  23            		INC	HL				;
  73F4  56            		LD	D,(HL)				;
  73F5  23            		INC	HL				;
  73F6  CDCF72        		CALL	PRT_FTIME			;
  73F9  CDD45F        		CALL	PUT_SPC				;
  73FC  5E            		LD	E,(HL)				;更新日 18H,19H
  73FD  23            		INC	HL				;
  73FE  56            		LD	D,(HL)				;
  73FF  23            		INC	HL				;
  7400  CDB272        		CALL	PRT_FDATE			;
  7403  CDCA5F        		CALL	PUT_CR				;
  7406  CD456A        		CALL	IPRINT				;
  7409  4641542020203A		DB	"FAT   :",EOL			;
        00            	
  7411  5E            		LD	E,(HL)				;FATエントリ 1AH,1BH
  7412  23            		INC	HL				;
  7413  56            		LD	D,(HL)				;
  7414  23            		INC	HL				;
  7415  EB            		EX	DE,HL				;
  7416  7C            		LD	A,H				;
  7417  B5            		OR	L				;
  7418  200B          		JR	NZ,.L6				;
  741A  CD456A        		CALL	IPRINT				;
  741D  4E2F410D0A00  		DB	"N/A",CR,LF,EOL			;
  7423  1814          		JR	.L7				;
                      	
  7425  CDC05E        	.L6:	CALL	PRTHLHEX			;
  7428  E5            		PUSH	HL				;
  7429  3E2F          		LD	A,"/"				;セクタ＃
  742B  DF            		RST	18H				;
  742C  CD2D69        		CALL	GET_FIRST_SCTR			;(DW0)<-クラスタHLのセクタ＃
  742F  21317D        		LD	HL,DW0				;
  7432  CD5C6A        		CALL	PRT_DW_HEX			;
  7435  CDCA5F        		CALL	PUT_CR				;
  7438  E1            		POP	HL				;
                      	
  7439  CD456A        	.L7:	CALL	IPRINT				;
  743C  44554D5020203A		DB	"DUMP  :",EOL			;
        00            	
  7444  CD6474        		CALL	DUMP8				;
  7447  CDCA5F        		CALL	PUT_CR				;
                      	
  744A  EB            		EX	DE,HL				;
  744B  CD456A        		CALL	IPRINT				;
  744E  53495A4520203A		DB	"SIZE  :",EOL			;
        00            	
  7456  CD5C6A        		CALL	PRT_DW_HEX			;ファイルサイズ 1CH,1DH,1EH,1FH
  7459  CDCA5F        		CALL	PUT_CR				;
  745C  E1            		POP	HL				;
  745D  C9            		RET					;
                      	
  745E                	ATRB_BIT_SYMBL:					;
  745E  414456534852  		DB	"A","D","V","S","H","R"		;
                      	
                      	
                      	;=================================================
                      	;[DUMP]先頭の８バイトをダンプ出力する
                      	;IN  HL=クラスタ＃
                      	;OUT -
                      	;=================================================
  7464                	DUMP8:
  7464  D5            		PUSH	DE				;
  7465  DD21BD7C      		LD	IX,FILE_BFFR_STRCT		;ファイルバッファを使用する
  7469  CD2D69        		CALL	GET_FIRST_SCTR			;(DW0)<-クラスタHLの開始セクタ＃
  746C  CD6A64        		CALL	LOAD_BFFR			;セクタ(DW0)をバッファIXに読み込む
  746F  DD6E04        		LD	L,(IX+IDX_BADR)			;HL<-バッファポインタ=バッファの先頭アドレス
  7472  DD6605        		LD	H,(IX+IDX_BADR+1)		;
                      	
  7475  0608          		LD	B,08H
  7477  7E            	.L1:	LD	A,(HL)
  7478  23            		INC	HL
  7479  CDC55E        		CALL	PRTAHEX
  747C  78            		LD	A,B
  747D  3D            		DEC	A
  747E  2803          		JR	Z,.L2
  7480  3E2E          		LD	A,"."
  7482  DF            		RST	18H
  7483  10F2          	.L2:	DJNZ	.L1
                      	
  7485  D1            		POP	DE
  7486  C9            		RET
                      	
                      	;=================================================
                      	;[DUMP]ファイルの種類を表示する
                      	;IN  HL=クラスタ＃
                      	;OUT -
                      	;=================================================
                      	IF FALSE
;;                   -	PRT_FTYPE:
;;                   -		PUSH	DE				;
;;                   -		LD	IX,FILE_BFFR_STRCT		;ファイルバッファを使用する
;;                   -		CALL	GET_FIRST_SCTR			;(DW0)<-クラスタHLの開始セクタ＃
;;                   -		CALL	LOAD_BFFR			;セクタ(DW0)をバッファIXに読み込む
;;                   -		LD	L,(IX+IDX_BADR)			;HL<-バッファポインタ=バッファの先頭アドレス
;;                   -		LD	H,(IX+IDX_BADR+1)		;
;;                   -		LD	A,(HL)				;
;;                   -		INC	HL				;
;;                   -		CP	BAS_MARK			;BASICマーカーか？
;;                   -		JR	Z,.BAS				;
;;                   -		CP	BIN_MARK			;
;;                   -		JR	Z,.BIN				;
;;                   -	.UNK:	LD	HL,.MUNK			;
;;                   -		JR	.L1				;
;;                   -	
;;                   -	.BAS:	LD	B,09H				;ヘッダーの残り９バイトをチェック
;;                   -	.L2:	LD	A,(HL)				;
;;                   -		INC	HL				;
;;                   -		CP	BAS_MARK			;
;;                   -		JP	NZ,.UNK				;
;;                   -		DJNZ	.L2				;
;;                   -		LD	HL,.MBAS			;
;;                   -	.L1:	CALL	PRINT				;
;;                   -		JR	.EXIT				;
;;                   -	
;;                   -	.BIN:	PUSH	HL				;
;;                   -		LD	HL,.MBIN			;
;;                   -		CALL	PRINT				;
;;                   -		POP	HL				;
;;                   -		LD	D,(HL)				;
;;                   -		INC	HL				;
;;                   -		LD	E,(HL)				;
;;                   -		EX	DE,HL				;
;;                   -		CALL	PRTHLHEX			;
;;                   -	.EXIT:	POP	DE				;
;;                   -		RET					;
;;                   -	
;;                   -	.MUNK:	DB	"     ",EOL			;
;;                   -	.MBAS:	DB	"BASIC",EOL			;
;;                   -	.MBIN:	DB	"BINARY &H",EOL			;
                      	ENDIF
                      	
[EOF:DUMP.asm]
                      	INCLUDE	"CMD.asm"				;コマンド
                      	
                      	;=================================================
                      	;[CMD]CMD命令
                      	;=================================================
  7487                	CMD:
  7487  0E00          		LD	C,00H				;ジャンプ用インデックスの初期値
  7489  115178        		LD	DE,CMD_TABLE			;コマンドテーブルポインタ(CP)の初期値
  748C  C3BB6D        		JP	WORD_JUMP			;
                      	
                      	;=================================================
                      	;[CMD]CMD V 命令 "VALID" DOSプログラムのチェックサムを出力する
                      	; CMD V
                      	;=================================================
  748F                	CMD_V:
  748F  E5            		PUSH	HL
  7490  B7            		OR	A				;
  7491  21A378        		LD	HL,WORK_AREA			;
  7494  110060        		LD	DE,6000H			;
  7497  D5            		PUSH	DE				;
  7498  ED52          		SBC	HL,DE				;
  749A  44            		LD	B,H				;
  749B  4D            		LD	C,L				;BC<-DOSプログラム全体のバイト数
  749C  E1            		POP	HL				;HL<-6000H
  749D  110000        		LD	DE,0000H			;=チェックサム
  74A0  7E            	.L1:	LD	A,(HL)				;
  74A1  83            		ADD	A,E				;
  74A2  5F            		LD	E,A				;
  74A3  7A            		LD	A,D				;
  74A4  CE00          		ADC	A,00H				;DE+=(HL)
  74A6  57            		LD	D,A				;
  74A7  23            		INC	HL				;
  74A8  0B            		DEC	BC				;
  74A9  78            		LD	A,B				;
  74AA  B1            		OR	C				;
  74AB  20F3          		JR	NZ,.L1				;
                      	
  74AD  CDCA5F        		CALL	PUT_CR
  74B0  62            		LD	H,D
  74B1  6B            		LD	L,E
  74B2  CDC05E        		CALL	PRTHLHEX
  74B5  CDCA5F        		CALL	PUT_CR
                      	
  74B8  C34A76        		JP	CLOSE_CMD
                      	
                      	;=================================================
                      	;[CMD]CMD F 命令 "FREE"	フリーエリアを拡張する
                      	;=================================================
  74BB                	CMD_F:
  74BB  218D7D        		LD	HL,FREE_AREA
  74BE  C3E917        		JP	SETFREADR
                      	
                      	;=================================================
                      	;[CMD]CMD P 命令 "PROPERTY"	ディレクトリエントリのプロパティ表示
                      	;=================================================
  74C1                	CMD_P:
  74C1  CD8576        		CALL	STR2ARG0			;
  74C4  E5            		PUSH	HL				;
  74C5  CD2E68        		CALL	IS_FAT16			;
  74C8  CDB764        		CALL	CHANGE_WDIR			;HL<-エントリ名の先頭アドレス
  74CB  0E00          		LD	C,00H				;=全属性
  74CD  CD5D65        		CALL	GET_DENT			;
  74D0  CA2B78        		JP	Z,ERR_NOT_FOUND			;
  74D3  CD6773        		CALL	DUMP_DENT			;メインルーチン
  74D6  CD4A65        		CALL	RESTORE_WDIR			;
  74D9  C34A76        		JP	CLOSE_CMD
                      	
                      	;=================================================
                      	;[CMD]CMD ON 命令 "INFO ON"	インフォメーションを表示する
                      	;=================================================
  74DC                	CMD_ON:
  74DC  3EFF          		LD	A,TRUE
                      	
  74DE  E5            	INFO:	PUSH	HL
  74DF  32797D        		LD	(INFO_SW),A
  74E2  3C            		INC	A
  74E3  200D          		JR	NZ,.L1
  74E5  CD456A        		CALL	IPRINT
  74E8  494E464F204F4E		DB	"INFO ON",CR,LF,EOL
        0D0A00        	
  74F2  C34A76        	.L1:	JP	CLOSE_CMD
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD OFF 命令 "INFO OFF"
                      	;=================================================
  74F5                	CMD_OFF:
  74F5  3E00          		LD	A,FALSE
  74F7  18E5          		JR	INFO
                      	
                      	;=================================================
                      	;[CMD]CMD R 命令 "RUN" 実行フラグを立ててロードする
                      	;=================================================
  74F9                	CMD_R:
  74F9  3EFF          		LD	A,TRUE				;実行フラグを立てる
  74FB  32AC7C        		LD	(EXECFLG),A			;
  74FE  CDD769        		CALL	RESET_ARGS			;入力パラメータを無効にする
  7501  CD8576        		CALL	STR2ARG0			;
  7504  CD1675        		CALL	LOAD.E1				;
                      	
  7507  3AAC7C        		LD	A,(EXECFLG)
  750A  A7            		AND	A
  750B  C8            		RET	Z
  750C  C3F43D        		JP	RUN
                      	
                      	;=================================================
                      	;[CMD]LOAD命令 ファイルをメモリに読み込む
                      	; LOAD FN$
                      	; LOAD "FILE.XXX"
                      	;=================================================
  750F                	LOAD:
  750F  AF            		XOR	A				;実行フラグを降ろす
  7510  32AC7C        		LD	(EXECFLG),A			;
  7513  CDA169        		CALL	GET_ARGS			;
                      	
  7516  E5            	.E1:	PUSH	HL				;CMD Rのエントリポイント
  7517  CD2E68        		CALL	IS_FAT16			;
  751A  CDB764        		CALL	CHANGE_WDIR			;
  751D  CD5769        		CALL	DNAME2CLSTR			;
  7520  218378        		LD	HL,EXT_LOAD_TABLE		;
  7523  CD7E69        		CALL	EXT_TABLE_JUMP			;拡張子に対応したロードルーチンへジャンプする
  7526  CD4A65        		CALL	RESTORE_WDIR			;
  7529  C34A76        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[CMD]SAVE命令 メモリ内容をファイルに書き込む
                      	; SAVE "FILE.XXX"		BASIC書き込み
                      	; SAVE "FILE.XXX",&HC000,&HDFFF	機械語書き込み
                      	;=================================================
  752C                	SAVE:
  752C  CDA169        		CALL	GET_ARGS			;(ARG0)=ファイルパス＋ファイル名の格納アドレス、(ARG1)=先頭アドレス,(ARG2)=終了アドレス
  752F  E5            		PUSH	HL				;
  7530  CD2E68        		CALL	IS_FAT16			;
  7533  0E20          		LD	C,ATRB_FILE			;
  7535  CD4A75        		CALL	PREP_DENT			;
  7538  CD8365        		CALL	IS_READ_ONLY			;
  753B  219378        		LD	HL,EXT_SAVE_TABLE		;
  753E  CD7E69        		CALL	EXT_TABLE_JUMP			;拡張子に対応したセーブルーチンへジャンプする
  7541  CDD365        		CALL	WRITE_DENT			;
  7544  CD4A65        		CALL	RESTORE_WDIR			;
  7547  C34A76        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[CMD] ファイルパスで指定されたディレクトリにエントリを作成する
                      	;IN  (ARG0)=ファイルパス＋エントリ名,C=作成するエントリの属性
                      	;OUT (ARG0)=エントリ名の先頭アドレス
                      	;=================================================
  754A                	PREP_DENT:
  754A  C5            		PUSH	BC				;
  754B  CDB764        		CALL	CHANGE_WDIR			;
  754E  22A37C        		LD	(ARG0),HL			;
  7551  C1            		POP	BC				;
  7552  CDAB65        		CALL 	TOUCH				;
  7555  CD8F65        		CALL	SET_DENT_FAT			;
  7558  C9            		RET
                      	
                      	;=================================================
                      	;[CMD]POLL命令 ワーキングディレクトリを変更する
                      	; POLL "/DIR1/DIR2"
                      	;=================================================
  7559                	POLL:
  7559  CDB667        		CALL	STR2BUFF			;
  755C  E5            		PUSH	HL				;
  755D  CD2E68        		CALL	IS_FAT16			;
  7560  213DFF        		LD	HL,STR_BUFF			;
  7563  CD1365        		CALL	TRACE_PATH			;
  7566  C34A76        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[CMD]KILL命令 ファイルを削除する
                      	; KILL "FILE.EXT"
                      	; KILL "/DIR/FILE.EXT"
                      	;=================================================
  7569                	KILL:
  7569  CD8576        		CALL	STR2ARG0			;
  756C  E5            		PUSH	HL				;
  756D  CD2E68        		CALL	IS_FAT16			;
  7570  210C78        		LD	HL,MSG_KILL_FILE		;
  7573  CD0A6A        		CALL	YES_NO				;
  7576  2024          		JR	NZ,.EXIT			;
  7578  CDB764        		CALL	CHANGE_WDIR			;
  757B  0E20          	.L1:	LD	C,ATRB_FILE			;
  757D  CD5D65        		CALL	GET_DENT			;
  7580  CA2B78        		JP	Z,ERR_NOT_FOUND
  7583  CD8365        		CALL	IS_READ_ONLY			;
  7586  2ADF7C        		LD	HL,(DIR_ENTRY+IDX_FAT)		;
  7589  7C            		LD	A,H				;FATエントリが0000Hならディレクトリエントリのみ削除する
  758A  B5            		OR	L				;それ以外は
  758B  C43563        		CALL	NZ,ERASE_FAT_LINK		;FATリンク先をすべて消去する
  758E  21C57C        	.DIR:	LD	HL,DIR_ENTRY			;ディレクトリエントリバッファの先頭に0E5Hをセットする
  7591  36E5          		LD	(HL),ID_DISABLED		;これによりディレクトリエントリが無効になる
  7593  CDD365        		CALL	WRITE_DENT			;ディレクトリエントリバッファをファイルバッファにコピーする
  7596  CD3F64        		CALL	FLUSH_BFFR			;全バッファ書き込み
  7599  CD4A65        		CALL	RESTORE_WDIR			;
  759C  C34A76        	.EXIT:	JP	CLOSE_CMD
                      	
                      	;=================================================
                      	;[CMD]MOUNT命令 SDカードのプライマリパーティションをマウントする
                      	;=================================================
  759F                	MOUNT:
  759F  E5            		PUSH	HL
  75A0  CD9E60        		CALL	INIT_8255			;PPI初期化
  75A3  CD6761        		CALL	MMC_INIT			;MMC初期化
  75A6  CD3E68        		CALL	READ_MBR			;パーティション開始セクタ＃をセットする
  75A9  CD6268        		CALL	READ_IPL			;FAT16フォーマットチェック
  75AC  CDA268        		CALL	READ_BPB			;BPB情報から導かれる定数をワークにセットする
  75AF  CDD267        		CALL	INIT_FAT16			;FAT16関連ワーク初期化！バッファクリアのため必ず最後に実行する！
  75B2  CDEC67        		CALL	PRT_VOLUME			;ボリューム名表示
                      	;	CALL	IS_YEAR79			;日付が未入力ならメッセージを出力
  75B5  E1            		POP	HL				;
  75B6  CD7267        		CALL	AUTOEXEC			;
  75B9  C9            		RET					;
                      	
                      	;=================================================
                      	;[CMD]FILES命令 指定されたディレクトリのエントリ一覧を表示する
                      	; FILES			ワーキングディレクトリのエントリ一覧
                      	; FILES "/.../..."  	指定ディレクトリのエントリ一覧
                      	;=================================================
  75BA                	FILES:
  75BA  FE3A          		CP	":"				;
  75BC  2806          		JR	Z,.L1				;
  75BE  B7            		OR	A				;
  75BF  2803          		JR	Z,.L1				;
  75C1  CD5975        		CALL	POLL				;
  75C4  E5            	.L1:	PUSH	HL				;
  75C5  CD2E68        		CALL	IS_FAT16			;
  75C8  2A107D        		LD	HL,(WDIR_CLSTR)			;
  75CB  FD21ED66      		LD	IY,PRT_DENT			;
  75CF  CD3A66        		CALL	DIR_WALK			;
  75D2  E1            		POP	HL				;
  75D3  C9            		RET					;
                      	
                      	;=================================================
                      	;[CMD]MERGE命令 メモリの内容をCMTファイルに追記する
                      	; MERGE "FILE.CMT"		BASICを追記する
                      	; MERGE "FILE.CMT",&HXXXX,&HYYYY マシン語を追記する
                      	;=================================================
  75D4                	MERGE:
  75D4  CDA169        		CALL	GET_ARGS			;
  75D7  E5            		PUSH	HL				;
  75D8  CD2E68        		CALL	IS_FAT16			;
  75DB  CDB764        		CALL	CHANGE_WDIR			;
  75DE  0E20          		LD	C,ATRB_FILE			;
  75E0  CD5D65        		CALL	GET_DENT			;
  75E3  CA2B78        		JP	Z,ERR_NOT_FOUND			;
  75E6  CD8365        		CALL	IS_READ_ONLY			;
  75E9  CD696D        		CALL	SET_FP_END			;FPをファイル終端にセットする
  75EC  CD716F        		CALL	WRITE_CMT.MERGE			;CMTファイルの追記実行
  75EF  CDD365        		CALL	WRITE_DENT			;
  75F2  CD4A65        		CALL	RESTORE_WDIR			;
  75F5  E1            		POP	HL				;
  75F6  C9            		RET					;
                      	
                      	;=================================================
                      	;[CMD]NAME命令 ディレクトリエントリ名を変更する
                      	; NAME "/DIR/OLD.EXT","NEW.EXT"
                      	;=================================================
  75F7                	NAME:
  75F7  CD3176        		CALL	GET_2STR_ARGS			;２つの文字列の先頭アドレスを引数にセットする
  75FA  E5            		PUSH	HL				;
  75FB  CD2E68        		CALL	IS_FAT16			;
  75FE  CDB764        		CALL	CHANGE_WDIR			;
  7601  22A37C        		LD	(ARG0),HL			;
  7604  2AA57C        		LD	HL,(ARG1)			;
  7607  E5            		PUSH	HL				;新しいエントリ名を退避
  7608  0E00          		LD	C,00H				;
  760A  CD5D65        		CALL	GET_DENT			;
  760D  C23778        		JP	NZ,ERR_EXISTS			;存在していればエラー
  7610  2AA37C        		LD	HL,(ARG0)			;HL<-現在のエントリ名の先頭アドレス
  7613  0E00          		LD	C,00H				;
  7615  CD5D65        		CALL	GET_DENT			;
  7618  CA2B78        		JP	Z,ERR_NOT_FOUND			;存在しなければエラー
  761B  CD8365        		CALL	IS_READ_ONLY			;
  761E  E1            		POP	HL				;新しいエントリ名を復帰
  761F  CDB876        		CALL	STR2SFN				;現在のディレクトリエントリ名を新しいエントリ名で上書きする
  7622  21DB7C        		LD	HL,DIR_ENTRY+IDX_TIME		;ディレクトリエントリバッファの「更新日時」に現在日時をセットする
  7625  CDF765        		CALL	SET_DATETIME			;
  7628  CDD365        		CALL	WRITE_DENT			;
  762B  CD4A65        		CALL	RESTORE_WDIR			;
  762E  C34A76        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[CMD]２つの文字列の先頭アドレスを引数にセットする
                      	;IN  HL=TP
                      	;OUT HL=TP,(ARG0)=1番目の文字列,(ARG1)=2番めの文字列
                      	;=================================================
  7631                	GET_2STR_ARGS:
  7631  CDEB6D        		CALL	OPEN_DQUOTE			;
  7634  22A37C        		LD	(ARG0),HL			;
  7637  CDF86D        		CALL	CLOSE_DQUOTE			;
  763A  2B            		DEC	HL				;！重要！
  763B  D7            		RST	10H				;
  763C  CD9B40        		CALL	TPSEEK				;
  763F  2C            		DB	","				;
  7640  CDEB6D        		CALL	OPEN_DQUOTE			;
  7643  22A57C        		LD	(ARG1),HL			;
  7646  CDF86D        		CALL	CLOSE_DQUOTE			;
  7649  C9            		RET
                      	
                      	;=================================================
                      	;[CMD]テキストポインタを適切な位置に合わせてBASIC解析を実行する
                      	;=================================================
  764A                	CLOSE_CMD:
  764A  E1            		POP	HL				;
  764B  2B            		DEC	HL				;！重要！
  764C  D7            		RST	10H				;
  764D  C9            		RET					;
                      	
                      	;=================================================
                      	;[CMD]ARG0とARG1を交換する
                      	;=================================================
  764E                	SWAP_ARGS:
  764E  2AA37C        		LD	HL,(ARG0)			;
  7651  E5            		PUSH	HL				;
  7652  2AA57C        		LD	HL,(ARG1)			;
  7655  22A37C        		LD	(ARG0),HL			;
  7658  E1            		POP	HL				;
  7659  22A57C        		LD	(ARG1),HL			;
  765C  C9            		RET					;
                      	
                      	
                      	;=================================================
                      	;[CMD]クラスタ内の全セクタをゼロクリアする
                      	;IN  HL=クラスタ＃,IX=バッファ構造体
                      	;OUT 
                      	;=================================================
  765D                	CLR_CLSTR:
  765D  CDB76A        		CALL	DW0_PUSH			;セクタ＃を退避
  7660  CD2D69        		CALL	GET_FIRST_SCTR			;
  7663  CD5964        		CALL	CLR_BFFR			;バッファIXをゼロクリアする
  7666  3AEE7C        		LD	A,(SCTRS_PER_CLSTR)		;
  7669  47            		LD	B,A				;B<-１クラスタあたりのセクタ数
  766A  C5            	.L1:	PUSH	BC				;
  766B  21317D        		LD	HL,DW0				;バッファ構造体のセクタ＃を更新する
  766E  DDE5          		PUSH	IX				;
  7670  D1            		POP	DE				;
  7671  CDAB6A        		CALL	DW_COPY				;(IX+0)<-(DW0)
  7674  DD3606FF      		LD	(IX+IDX_BUPD),TRUE		;バッファの更新フラグを立てる
  7678  CD8C64        		CALL	SAVE_BFFR			;バッファIXを書き込む
  767B  CD846B        		CALL	DW0_INC				;セクタ＃++
  767E  C1            		POP	BC				;
  767F  10E9          		DJNZ	.L1				;
  7681  CDDD6A        		CALL	DW0_POP				;セクタ＃を復帰
  7684  C9            		RET
                      	
                      	;=================================================
                      	;[CMD]文字列式の結果が格納されたアドレスを(ARG0)にセットする
                      	;IN  
                      	;OUT (ARG0),HL=TP
                      	;=================================================
  7685                	STR2ARG0:
  7685  CDB667        		CALL	STR2BUFF			;
  7688  113DFF        		LD	DE,STR_BUFF			;
  768B  ED53A37C      		LD	(ARG0),DE			;
  768F  C9            		RET					;
                      	
[EOF:CMD.asm]
                      	INCLUDE	"STR.asm"				;文字列処理
                      	
                      	;=================================================
                      	;[STR]".",".."文字列の判別
                      	;IN  HL=TP
                      	;OUT (DIR_ENTRY)
                      	;・文字列が"."あるいは".."の場合にのみ(DIR_ENTRY)にセットされる
                      	;=================================================
  7690                	IS_DOT:
  7690  E5            		PUSH	HL				;TP退避
  7691  060B          		LD	B,DNAME_SIZE			;B<-ファイル名全体の長さ
  7693  7E            		LD	A,(HL)				;A<-先頭の文字
  7694  FE2E          		CP	"."				;
  7696  201E          		JR	NZ,.EXIT			;"."でなければ終了
  7698  CD1377        		CALL	SFN_ADD_STR			;ディレクトリエントリバッファにセット
  769B  05            		DEC	B				;=残りの文字数
  769C  7E            		LD	A,(HL)				;
  769D  FE2E          		CP	"."				;
  769F  2005          		JR	NZ,.L2				;"."
  76A1  CD1377        		CALL	SFN_ADD_STR			;".."
  76A4  05            		DEC	B				;
  76A5  7E            		LD	A,(HL)				;
  76A6  CD4B77        	.L2:	CALL	IS_EOT				;"."の後に文字が続いたらエラー
  76A9  2805          		JR	Z,.L1				;
  76AB  1E05          		LD	E,ILLEGAL_FUNCTION_CALL		;
  76AD  C3F93B        		JP	ERROR				;
                      	
  76B0  CD2277        	.L1:	CALL	SFN_ADD_SPC			;Bの数だけ出力先に空白を加える
  76B3  C1            		POP	BC				;退避していたTPを捨てる
  76B4  C1            		POP	BC				;CALLの戻り先を捨てる
  76B5  C9            		RET					;
                      	
  76B6  E1            	.EXIT:	POP	HL				;TP復帰
  76B7  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]文字列を8.3形式ファイル名に変換する
                      	;IN  HL=TP
                      	;OUT (DNAME+1)=8.3形式ファイル名,HL=文字列のポインタ
                      	;・最初に現れたピリオドは、(8-n)個の空白に置き換える
                      	;・２番目以降のピリオドは無視
                      	;=================================================
  76B8                	STR2SFN:
  76B8  11C47C        		LD	DE,DNAME			;DE<-文字列の出力先
  76BB  EB            		EX	DE,HL				;出力先の中身をNULLにする
  76BC  CD5077        		CALL	NULL_STR			;
  76BF  EB            		EX	DE,HL				;
  76C0  CD9076        		CALL	IS_DOT				;"..","."の判別
  76C3  AF            		XOR	A				;A'=文字数カウンタ
  76C4  08            		EX	AF,AF'				;A'<-0
  76C5  0608          		LD	B,08H				;ここからファイル名部
  76C7  7E            	.L1:	LD	A,(HL)				;A<-(TP)
  76C8  CD4B77        		CALL	IS_EOT				;二重引用符か00Hなら
  76CB  2805          		JR	Z,.L7				;残りのファイル名部を20Hで埋める ！拡張子解析部でも利用するためHLは動かさない！
  76CD  FE2E          		CP	"."				;ピリオドなら！HLを進めて！残りのファイル名部を20Hで埋める
  76CF  2006          		JR	NZ,.L4				;それ以外なら文字列(DNAME)に文字Aを加える
  76D1  23            		INC	HL				;TP++
  76D2  CD2277        	.L7:	CALL	SFN_ADD_SPC			;Bの数だけ出力先に空白を加える
  76D5  1808          		JR	.L2				;
                      	
  76D7  CD1377        	.L4:	CALL	SFN_ADD_STR			;(DNAME)に文字Aを加える
  76DA  CD0F77        		CALL	.COUNT				;文字数A'++
  76DD  10E8          		DJNZ	.L1				;
  76DF  0603          	.L2:	LD	B,03H				;ここから拡張子部
  76E1  7E            	.L3:	LD	A,(HL)				;A<-(TP)
  76E2  CD4B77        		CALL	IS_EOT				;
  76E5  2005          		JR	NZ,.L5				;二重引用符か00Hなら
  76E7  CD2277        		CALL	SFN_ADD_SPC			;Bの数だけ出力先に空白を加える
  76EA  181A          		JR	.EXIT				;終了へ
                      	
  76EC  FE2E          	.L5:	CP	"."				;！重要！拡張子部にピリオドがあれば全てスキップする
  76EE  2003          		JR	NZ,.L6				;
  76F0  23            		INC	HL				;TP++
  76F1  18EE          		JR	.L3				;
  76F3  CD1377        	.L6:	CALL	SFN_ADD_STR			;(DNAME)に文字Aを加える
  76F6  CD0F77        		CALL	.COUNT				;文字数A'++
  76F9  10E6          		DJNZ	.L3				;
  76FB  7E            		LD	A,(HL)				;ファイル名の最大文字数を超えて入力していたらエラーにする
  76FC  CD4B77        		CALL	IS_EOT				;
  76FF  2805          		JR	Z,.EXIT				;
  7701  1E05          		LD	E,ILLEGAL_FUNCTION_CALL		;
  7703  C3F93B        		JP	ERROR				;
                      	
  7706  08            	.EXIT:	EX	AF,AF'				;A'=文字数カウンタ
  7707  B7            		OR	A				;出力された文字列の文字数が０ならエラー
  7708  C0            		RET	NZ				;
  7709  21FD77        		LD	HL,MSG_NO_NAME			;
  770C  C3FF69        		JP	ERR				;
                      	
  770F  08            	.COUNT:	EX	AF,AF'				;文字数カウンタ++
  7710  3C            		INC	A				;
  7711  08            		EX	AF,AF'				;
  7712  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]ファイル名用文字列に１文字追加する
                      	;IN  A=文字コード,HL=TP,DE=出力先のポインタ
                      	;=================================================
  7713                	SFN_ADD_STR:
  7713  CD2D77        		CALL	FIX_CHR				;文字コードを修正
  7716  CD3677        		CALL	IS_NGCHR			;使用できない文字を検出
  7719  4F            		LD	C,A				;
  771A  EB            		EX	DE,HL				;
  771B  CD5D77        		CALL	ADD_STR				;出力先に文字を加える
  771E  EB            		EX	DE,HL				;
  771F  13            		INC	DE				;出力先のポインタを進める
  7720  23            		INC	HL				;テキストポインタを進める
  7721  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]ファイル名用文字列に空白を指定数だけ追加する
                      	;IN  B=追加する数,HL=TP,DE=出力先のポインタ
                      	;=================================================
  7722                	SFN_ADD_SPC:
  7722  0E20          		LD	C,SPC				;
  7724  EB            		EX	DE,HL				;HL=出力先のポインタ,DE=TP
  7725  CD5D77        	.L1:	CALL	ADD_STR				;(DEST)+=20H
  7728  23            		INC	HL				;出力先のポインタを進める
  7729  10FA          		DJNZ	.L1				;
  772B  EB            		EX	DE,HL				;HL=TP,DE=出力先のポインタ
  772C  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]大文字化と"^"->"~"の修正
                      	;IN  A=文字コード
                      	;OUT A=修正された文字コード
                      	;=================================================
  772D                	FIX_CHR:
  772D  CDC15F        		CALL	CAPITAL				;大文字化
  7730  FE5E          		CP	"^"				;"^"を、キーボードから入力できない文字"~"に変換する
  7732  C0            		RET	NZ				;
  7733  3E7E          		LD	A,"~"				;
  7735  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]エントリ名に使用できない文字チェック
                      	;IN  A=対象の文字
                      	;OUT Z=1:NG文字と一致した
                      	;=================================================
  7736                	IS_NGCHR:
  7736  C5            		PUSH	BC				;
  7737  E5            		PUSH	HL				;
  7738  214578        		LD	HL,NG_CHR			;
  773B  010C00        		LD	BC,NG_CHR_END - NG_CHR		;BC<-NG_CHRの総文字数
  773E  EDB1          		CPIR					;
  7740  2803          		JR	Z,.ERR				;
  7742  E1            		POP	HL				;
  7743  C1            		POP	BC				;
  7744  C9            		RET					;
                      	
  7745  210578        	.ERR:	LD	HL,MSG_NG_CHR			;
  7748  C3FF69        		JP	ERR				;
                      	
                      	;=================================================
                      	;[STR]二重引用符＆00Hのチェック 引数の文字列解析に使用される
                      	;IN  A=文字コード
                      	;OUT Z=1:文字列終了
                      	;=================================================
  774B  FE22          	IS_EOT:	CP	DQUOTE				;Aが二重引用符または0ならZ<-1
  774D  C8            		RET	Z				;
  774E  B7            		OR	A				;
  774F  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]指定された固定長文字列全体を文字で埋める
                      	;IN  HL=固定長文字列のポインタ,C=文字コード
                      	;OUT
                      	;=================================================
  7750                	NULL_STR:
  7750  0E00          		LD	C,00H				;
  7752                	FILL_STR:
  7752  C5            		PUSH	BC				;
  7753  E5            		PUSH	HL				;
  7754  46            		LD	B,(HL)				;
  7755  23            		INC	HL				;
  7756  71            	.L1:	LD	(HL),C				;
  7757  23            		INC	HL				;
  7758  10FC          		DJNZ	.L1				;
  775A  E1            		POP	HL				;
  775B  C1            		POP	BC				;
  775C  C9            		RET					;
                      	
                      	;=================================================
                      	;[STR]固定長文字列の最初のNULL部分を文字で置き換える
                      	;NULL部分が無い場合は無視される
                      	;IN  HL=文字変数のポインタ,C=追加する文字コード
                      	;OUT　
                      	;=================================================
  775D                	ADD_STR:
  775D  C5            		PUSH	BC				;
  775E  E5            		PUSH	HL				;
  775F  46            		LD	B,(HL)				;B<-文字列長
  7760  23            	.L2:	INC	HL				;
  7761  7E            		LD	A,(HL)				;ポインタが示す値が00Hなら、その位置にCをセットする
  7762  B7            		OR	A				;それ以外なら00Hが見つかるまで繰り返す
  7763  2003          		JR	NZ,.L3				;
  7765  71            		LD	(HL),C				;
  7766  1802          		JR	.EXIT				;
  7768  10F6          	.L3:	DJNZ	.L2				;
  776A  E1            	.EXIT:	POP	HL				;
  776B  C1            		POP	BC				;
  776C  C9            		RET					;
                      	
[EOF:STR.asm]
                      	INCLUDE "MESSAGES.asm"				;メッセージ文字列
                      	;=================================================
                      	;文字列
                      	;=================================================
                      	
  776D                	MSG_TITLE:
  776D  0C3C2053442D44		DB	CL,"< SD-DOS 2020/Jan/19 >",CR,LF,EOL
        4F532032303230	
        2F4A616E2F3139	
        203E0D0A00    	
                      	
  7787                	MSG_NOT_FOUND:
  7787  4E6F7420666F75		DB	"Not found",EOL
        6E6400        	
                      	
  7791                	MSG_NOT_SUPPORTED_EXT:
  7791  42616420455854		DB	"Bad EXT",EOL
        00            	
                      	
  7799                	MSG_NG_NAME:
  7799  4E47206E616D65		DB	"NG name",EOL
        00            	
                      	
  77A1                	MSG_SCTR_OVERFLOW:
  77A1  4F766572666C6F		DB	"Overflow",EOL
        7700          	
                      	
  77AA                	MSG_MEMORY_CONFLICT:
  77AA  0D0A4D656D6F72		DB	CR,LF,"Memory conflict",CR,LF,"use ",SQUOTE,"CLEAR",SQUOTE,EOL
        7920636F6E666C	
        6963740D0A7573	
        652027434C4541	
        522700        	
                      	
  77C9                	MSG_BAD_FORMAT:
  77C9  42616420666F72		DB	"Bad format",EOL
        6D617400      	
                      	
  77D4                	MSG_NOT_FAT16:
  77D4  4E6F7420464154		DB	"Not FAT16",EOL
        313600        	
                      	
                      	;MSG_OVERWRITE:
                      	;	DB	"Overwrite",EOL
                      	
  77DE                	MSG_CANCELED:
  77DE  43616E63656C65		DB	"Canceled",CR,LF,EOL
        640D0A00      	
                      	
  77E9                	MSG_EMPTY_FILE:
  77E9  456D70747900  		DB	"Empty",EOL
                      	
  77EF                	MSG_MEDIA_FULL:
  77EF  46756C6C00    		DB	"Full",EOL
                      	
  77F4                	MSG_DIR_FULL:
  77F4  4469722046756C		DB	"Dir Full",EOL
        6C00          	
                      	;	DB	"use ",SQUOTE,"CMD EX",SQUOTE,EOL
                      	
  77FD                	MSG_NO_NAME:
  77FD  4E6F206E616D65		DB	"No name",EOL
        00            	
                      	
  7805                	MSG_NG_CHR:
  7805  4E472063687200		DB	"NG chr",EOL
                      	
  780C                	MSG_KILL_FILE:
  780C  44656C65746500		DB	"Delete",EOL
                      	
  7813                	MSG_EXISTS:
  7813  45786973747300		DB	"Exists",EOL
                      	
  781A                	MSG_EXPAND:
  781A  457870616E6400		DB	"Expand",EOL
                      	
  7821                	MSG_READ_ONLY:
  7821  50726F74656374		DB	"Protected",EOL
        656400        	
[EOF:MESSAGES.asm]
                      	INCLUDE	"ERROR.asm"				;エラー処理
                      	
                      	;=================================================
                      	;[ERROR]指定されたエントリ名が見つからない
                      	;=================================================
  782B                	ERR_NOT_FOUND:	
  782B  218777        		LD	HL,MSG_NOT_FOUND		;
  782E  C3FF69        		JP	ERR				;
                      	
                      	;=================================================
                      	;[ERROR]ファイルがカラ
                      	;=================================================
  7831                	ERR_EMPTY_FILE:
  7831  21E977        		LD	HL,MSG_EMPTY_FILE		;
  7834  C3FF69        		JP	ERR				;
                      	
                      	;=================================================
                      	;[ERROR]エントリがすでに存在する
                      	;=================================================
  7837                	ERR_EXISTS:
  7837  211378        		LD	HL,MSG_EXISTS			;
  783A  C3FF69        		JP	ERR				;
[EOF:ERROR.asm]
                      	;INCLUDE "SCRATCH.asm"				;テスト用
                      	
                      	;=================================================
                      	;固定データ
                      	;=================================================
                      	
  783D                	FAT_CODE:
  783D  46415431362020		DB	"FAT16   "			;FAT識別コード
        20            	
                      	
  7845                	NG_CHR:
  7845  3B5B5D3A22    		DB	";" , "[" , "]" , ":" , DQUOTE	;エントリ名に使用できない文字
  784A  3B7C3D2C5C    		DB	";" , "|" , "=" , "," , "\"	;
  784F  202F          		DB	" " , "/"			;
  7851                	NG_CHR_END	EQU	$			;
                      	
                      	
  7851                	CMD_TABLE:
  7851  4600          		DB	"F",EOL				;CMD F フリーエリア拡張
  7853  9500          		DB	95H,EOL				;CMD ON インフォメーションスイッチ オン 95H="ON"の中間言語コード
  7855  4F464600      		DB	"OFF",EOL			;CMD OFF インフォメーションスイッチ オフ
  7859  5000          		DB	"P",EOL				;CMD P プロパティ表示
  785B  5200          		DB	"R",EOL				;CMD R ファイル実行
  785D  5600          		DB	"V",EOL				;CMD V チェックサム算出
  785F  435000        		DB	"CP",EOL			;CMD CP ファイルコピー
  7862  4400          		DB	"D",EOL				;CMD D セクタダンプ
  7864  455800        		DB	"EX",EOL			;CMD EX サブディレクトリ拡張
  7867  4D4400        		DB	"MD",EOL			;CMD MD サブディレクトリ作成
  786A  5300          		DB	"S",EOL				;CMD S ディレクトリエントリ名でセクタダンプ
  786C  00            		DB	EOL				;END MARKER
                      	
  786D                	JUMP_TABLE:
  786D  BB74          		DW	CMD_F				;
  786F  DC74          		DW	CMD_ON				;
  7871  F574          		DW	CMD_OFF				;
  7873  C174          		DW	CMD_P				;
  7875  F974          		DW	CMD_R				;
  7877  8F74          		DW	CMD_V				;
  7879  7518          	JT_CP:	DW	DISKB_ERR			;
  787B  7518          	JT_D:	DW	DISKB_ERR			;
  787D  7518          	JT_EX:	DW	DISKB_ERR			;
  787F  7518          	JT_MD:	DW	DISKB_ERR			;
  7881  7518          	JT_S:	DW	DISKB_ERR			;
                      	
  7883                	EXT_LOAD_TABLE:					;ファイル読み込み用サブルーチンテーブル
                      							;・拡張子 3BYTE,ジャンプ先アドレス 2BYTE
  7883  434D54        		DB	"CMT"				;
  7886  0E6E          		DW	READ_CMT			;
  7888  42494E        		DB	"BIN"				;
  788B  D770          		DW	READ_BIN			;
  788D  424153        		DB	"BAS"				;
  7890  3572          		DW	READ_BAS			;
  7892  00            		DB	EOL				;
                      	
  7893                	EXT_SAVE_TABLE:					;ファイル書き込み用サブルーチンテーブル
                      							;・拡張子 3BYTE,ジャンプ先アドレス 2BYTE
  7893  434D54        		DB	"CMT"				;
  7896  6E6F          		DW	WRITE_CMT			;
  7898  42494E        		DB	"BIN"				;
  789B  E371          		DW	WRITE_BIN			;
  789D  424153        		DB	"BAS"				;
  78A0  7472          		DW	WRITE_BAS			;
  78A2  00            		DB	EOL				;
                      	
                      	;DEFAULT_EXT:					;
                      	;	DB	"CMT"				;
                      	
                      	;=================================================
                      	;ワークエリア
                      	;=================================================
                      	
  78A3                	WORK_AREA:
                      	
  78A3                	FAT_BFFR:	DS	200H			;FATバッファ
  7AA3                	FILE_BFFR:	DS	200H			;ファイルバッファ
                      	
  7CA3                	ARG0:		DS	02H			;コマンドの入力パラメータ
  7CA5                	ARG1:		DS	02H			;
  7CA7                	ARG2:		DS	02H			;
  7CA9                	ARG3:		DS	02H			;
  7CAB                	ARGNUM:		DS	01H			;有効な入力パラメータの数 0~3
                      	
  7CAC                	EXECFLG:	DS	01H			;ロード後実行フラグ
  7CAD                	EXECADR:	DS	02H			;ロード後実行アドレス
                      	
  7CAF                	FAT1_BFFR_STRCT:				;バッファ構造体（FAT用）
  7CAF                		.SCTR:	DS	04H			;+00 セクタ＃
  7CB3                		.BP:	DS	02H			;+04 バッファポインタ
  7CB5                		.FLG:	DS	01H			;+06 更新フラグ
  7CB6                	FAT2_BFFR_STRCT:				;バッファ構造体（FAT2用）
  7CB6                		.SCTR:	DS	04H			;+00 セクタ＃
  7CBA                		.BP:	DS	02H			;+04 バッファポインタ
  7CBC                		.FLG:	DS	01H			;+06 更新フラグ
  7CBD                	FILE_BFFR_STRCT:				;バッファ構造体（ファイル、ディレクトリ兼用）
  7CBD                		.SCTR:	DS	04H			;+00 セクタ＃
  7CC1                		.BP:	DS	02H			;+04 バッファポインタ
  7CC3                		.FLG:	DS	01H			;+06 更新フラグ
                      	
  7CC4                	DNAME:		DS	01H			;DNAMEの文字数指定部 ！DIR_ENTRYの直前に置くこと！
  7CC5                	DIR_ENTRY:	DS	20H			;+00 ディレクトリエントリ情報
  7CE5                	DIR_ENTRY.SCTR:	DS	04H			;+32 収録先のセクタ＃
  7CE9                	DIR_ENTRY.BP:	DS	02H			;+36 バッファポインタ
                      	
  7CEB                	FOUND:		DS	01H			;指定されたディレクトリエントリが見つかったらTRUEになる
  7CEC                	BPB:		DS	13H			;BPB保存エリア
  7CFF                	PP_SCTR:	DS	04H			;プライマリパーティションの開始セクタ＃
  7D03                	ROOT_SCTR_SIZE:	DS	01H			;ルートディレクトリの総セクタ数
  7D04                	FAT_SCTR:	DS	04H			;FATの開始セクタ＃ BPB+3をコピーしてDWORD化する
  7D08                	ROOT_SCTR:	DS	04H			;ルートディレクトリの開始セクタ＃
  7D0C                	DATA_SCTR:	DS	04H			;データエリアの開始セクタ＃
                      	
  7D10                	WDIR_CLSTR:	DS	02H			;ワーキングディレクトリの開始クラスタ＃
  7D12                	WDIR_ORG:	DS	02H			;ワーキングディレクトリの開始クラスタ＃退避用
  7D14                	TGT_CLSTR:	DS	02H			;ターゲット（ファイルまたはサブディレクトリ）の開始クラスタ＃
                      	
  7D16                	FP:		DS	04H			;ファイルポインタ
  7D1A                	FP_CLSTR:	DS	02H			;FPと結びつくファイルのカレントクラスタ＃。FPと連動して変化する
  7D1C                	FP_CLSTR_SN:	DS	02H			;FPが示すアドレスが、先頭から何番目のクラスタに含まれるかを示す！クラスタ＃ではない！
  7D1E                	FP_SCTR_SN:	DS	01H			;FPが示すアドレスが、クラスタ内の何番目のセクタに含まれるかを示す！セクタ＃ではない！
                      	
  7D1F                	ATRB:		DS	01H			;ファイル属性表示用文字列の文字数指定部
  7D20                			DS	06H			;ファイル属性表示用文字列本体
                      	
  7D26                	FIREWALL:	DS	02H			;マシン語がこのアドレスより先に侵入しないようにする
                      	
  7D28                	TIMEOUT:	DS	01H			;MMCタイムアウトカウンタ
  7D29                	MMCADR0:	DS	01H			;MMCアドレス LSB
  7D2A                	MMCADR1:	DS	01H			;
  7D2B                	MMCADR2:	DS	01H			;
  7D2C                	MMCADR3:	DS	01H			;MMCアドレス MSB
                      	
  7D2D                	DWA:		DS	04H			;汎用ダブルワード変数
  7D31                	DW0:		DS	04H			;ダブルワード変数
  7D35                	DW1:		DS	04H			;ダブルワード変数
  7D39                	DW_SP_ORG:	DS	02H			;ダブルワード用スタックポインタの一時退避エリア
  7D3B                	DW_SP:		DS	02H			;ダブルワード用スタックポインタ
  7D3D                			DS	10H			;ダブルワード用スタックエリア
  7D4D                	DW_STACK	EQU	$			;
                      	
  7D4D                	CP_SCTR:	DS	04H			;コピー先セクタ＃
  7D51                	CP_DENT:	DS	20H			;コピー先ディレクトリエントリ
  7D71                	CP_DENT.SCTR:	DS	04H			;コピー先ディレクトリエントリのセクタ＃
  7D75                	CP_DENT.BP:	DS	02H			;コピー先ディレクトリエントリのバッファポインタ
                      	
  7D77                	CHECKSUM:	DS	02H			;チェックサム用
  7D79                	INFO_SW:	DS	01H			;インフォメーション表示モード
  7D7A                	IS_CALLBACK:	DS	01H			;コールバック実行フラグ
  7D7B                	CALLBACK:	DS	02H			;コールバックアドレス
                      	
  7D7D                	INFO_BUF:	DS	10H			;情報出力用文字列バッファ
                      	
  7D8D                	FREE_AREA	EQU	$			;フリーエリア開始アドレス
                      	
                      	
                      	;-----------------------------
                      	
                      	;BPBから求められる値
  7CEE                	SCTRS_PER_CLSTR	EQU	BPB+2			;１クラスタ当たりのセクタ数	  40H
  7CEF                	FAT_START	EQU	BPB+3			;FAT開始セクタ＃		0008H
  7CF2                	ROOT_SIZE	EQU	BPB+6			;総ルートディレクトリ数		0200H
  7CF7                	FAT_SIZE	EQU	BPB+11			;FAT１面に必要なセクタ数	00F0H
                      	
                      	
                      	;-----------------------------
                      	
                      	INCLUDE	"EXT.asm"				;拡張命令群
                      	
                      	;=================================================
                      	;拡張コマンド
                      	;=================================================
                      	
                      	
  C000                		ORG	0C000H
                      	
  C000                	INIT_EXT_CMD:
  C000  212EC0        		LD	HL,CMD_D
  C003  227B78        		LD	(JT_D),HL
  C006  210BC1        		LD	HL,CMD_S
  C009  228178        		LD	(JT_S),HL
  C00C  2142C1        		LD	HL,CMD_CP
  C00F  227978        		LD	(JT_CP),HL
  C012  2148C2        		LD	HL,CMD_MD
  C015  227F78        		LD	(JT_MD),HL
  C018  21F2C2        		LD	HL,CMD_EX
  C01B  227D78        		LD	(JT_EX),HL
                      	
  C01E  CD456A        		CALL	IPRINT
  C021  52454144592021		DB	"READY !",CR,LF,EOL
        0D0A00        	
                      	
  C02B  C38100        		JP	BASIC
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD D命令 "DUMP"
                      	;・セクタ＃は８桁の16進文字列で指定する
                      	; CMD D			直前のセクタ＃をダンプ
                      	; CMD D "00000008"	指定されたセクタ＃をダンプ
                      	; CMD D SC$
                      	;=================================================
  C02E                	CMD_D:
  C02E  2B            		DEC	HL				;テキストポインタを１つ戻す
  C02F  D7            		RST	10H				;
  C030  B7            		OR	A				;
  C031  2823          		JR	Z,.L2				;
  C033  CDB667        		CALL	STR2BUFF			;
  C036  E5            		PUSH	HL				;TP退避
  C037  213DFF        		LD	HL,STR_BUFF			;
  C03A  11347D        		LD	DE,DW0+03H			;DE<-ダブルワードのMSB
  C03D  0604          		LD	B,04H				;B<-8桁 / 2
  C03F  D5            	.L1:	PUSH	DE				;
  C040  7E            		LD	A,(HL)				;
  C041  CDE469        		CALL	IS_HEX				;
  C044  57            		LD	D,A				;
  C045  23            		INC	HL				;
  C046  7E            		LD	A,(HL)				;
  C047  CDE469        		CALL	IS_HEX				;
  C04A  5F            		LD	E,A				;
  C04B  23            		INC	HL				;
  C04C  CDA05E        		CALL	CNVHEXBYTE			;A<-文字コードD,Eをバイナリ変換した値
  C04F  D1            		POP	DE				;
  C050  12            		LD	(DE),A				;ダブルワード(DW0)のMSB側から値をセットしていく
  C051  1B            		DEC	DE				;
  C052  10EB          		DJNZ	.L1				;
  C054  1801          		JR	.L3
                      	
  C056  E5            	.L2:	PUSH	HL				;
  C057  CD2E68        	.L3:	CALL	IS_FAT16			;
  C05A  CD60C0        		CALL	DUMP_SCTR			;メインルーチン
  C05D  C34A76        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[DUMP]セクタをダンプ出力する
                      	;IN  (DW0)=セクタ＃
                      	;=================================================
  C060                	DUMP_SCTR:
  C060  CD2E68        		CALL	IS_FAT16			;
  C063  3E50          		LD	A,80				;WIDTH 80,??
  C065  CDA309        		CALL	WIDTH_X				;
  C068  DD21BD7C      		LD	IX,FILE_BFFR_STRCT		;=ファイルバッファ構造体
  C06C  CD6A64        	.L4:	CALL	LOAD_BFFR			;(DW0)セクタをファイルバッファに読み込む
  C06F  2AC17C        		LD	HL,(FILE_BFFR_STRCT.BP)		;HL<-ファイルバッファの先頭アドレス
  C072  0E02          		LD	C,02H				;１セクタは２ページ構成
  C074  1600          		LD	D,00H				;オフセット値表示用カウンタ
  C076  CDCFC0        	.L3:	CALL	.HEADER				;画面消去とセクタ＃表示
  C079  0610          		LD	B,10H				;=行数
  C07B  C5            	.L2:	PUSH	BC				;行数を退避
  C07C  7A            		LD	A,D				;オフセット値を表示
  C07D  CDC55E        		CALL	PRTAHEX				;
  C080  CD456A        		CALL	IPRINT				;
  C083  30203A00      		DB	"0 :",EOL			;
  C087  14            		INC	D				;カウンタ++
  C088  0610          		LD	B,10H				;=列数
  C08A  E5            		PUSH	HL				;バッファのアドレスを退避
  C08B  C5            	.L1:	PUSH	BC				;列数を退避
  C08C  7E            		LD	A,(HL)				;A<-(バッファ)
  C08D  CDC55E        		CALL	PRTAHEX				;16進数で表示
  C090  CDD45F        		CALL	PUT_SPC				;空白
  C093  23            		INC	HL				;アドレス++
  C094  C1            		POP	BC				;列数を復帰
  C095  10F4          		DJNZ	.L1				;B--
  C097  CDD45F        		CALL	PUT_SPC				;空白
  C09A  0610          		LD	B,10H				;=列数
  C09C  E1            		POP	HL				;バッファのアドレスを復帰
  C09D  C5            	.L6:	PUSH	BC				;列数を退避
  C09E  7E            		LD	A,(HL)				;A<-(バッファ)
  C09F  FE20          		CP	20H				;
  C0A1  3002          		JR	NC,.L7				;
  C0A3  3E2E          		LD	A,"."				;
  C0A5  DF            	.L7	RST	18H				;
  C0A6  23            		INC	HL				;
  C0A7  C1            		POP	BC				;
  C0A8  10F3          		DJNZ	.L6				;B--
  C0AA  CDCA5F        		CALL	PUT_CR				;改行
  C0AD  C1            		POP	BC				;行数を復帰
  C0AE  10CB          		DJNZ	.L2				;B--
  C0B0  CD750F        		CALL	KEYWAIT				;１文字入力待ち
  C0B3  FE03          		CP	03H				;STOP
  C0B5  C8            		RET	Z				;終了
  C0B6  FE08          		CP	BS				;BACKSPACE
  C0B8  200D          		JR	NZ,.L5				;
  C0BA  0D            		DEC	C				;２ページ目なら１ページ目に戻す
  C0BB  28AF          		JR	Z,.L4				;
  C0BD  CD9B6B        		CALL	DW0_DEC				;セクタ＃--
  C0C0  30AA          		JR	NC,.L4				;キャリーフラグが立てば00000000Hに戻す
  C0C2  CD846B        		CALL	DW0_INC				;
  C0C5  18A5          		JR	.L4				;
                      	
  C0C7  0D            	.L5:	DEC	C				;ページ数--
  C0C8  20AC          		JR	NZ,.L3				;
  C0CA  CD846B        		CALL	DW0_INC				;セクタ＃++
  C0CD  189D          		JR	.L4				;
                      	
  C0CF                	.HEADER:
  C0CF  C5            		PUSH	BC				;
  C0D0  E5            		PUSH	HL				;
  C0D1  3E0C          		LD	A,0CH				;画面消去
  C0D3  DF            		RST	18H				;
  C0D4  CD456A        		CALL	IPRINT				;
  C0D7  202020203A00  		DB	"    :",EOL			;
  C0DD  010010        		LD	BC,1000H			;B<-10H,C<-00H
  C0E0  3E2B          	.L10:	LD	A,"+"				;"+0 +1 ... +F "
  C0E2  DF            		RST	18H				;
  C0E3  79            		LD	A,C				;
  C0E4  FE0A          		CP	10				;
  C0E6  3802          		JR	C,.L11				;
  C0E8  C607          		ADD	A,07H				;
  C0EA  C630          	.L11:	ADD	A,"0"				;
  C0EC  DF            		RST	18H				;
  C0ED  CDD45F        		CALL	PUT_SPC				;
  C0F0  0C            		INC	C				;
  C0F1  10ED          		DJNZ	.L10				;
  C0F3  CD456A        		CALL	IPRINT				;
  C0F6  20534543544F52		DB	" SECTOR=",EOL			;
        3D00          	
  C0FF  21317D        		LD	HL,DW0				;セクタ＃を表示
  C102  CD5C6A        		CALL	PRT_DW_HEX			;
  C105  CDCA5F        		CALL	PUT_CR				;
  C108  E1            		POP	HL				;
  C109  C1            		POP	BC				;
  C10A  C9            		RET					;
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD S 命令 "SOURCE"
                      	; CMD S "FILE.EXT"	ファイルの開始セクタをダンプ
                      	; CMD S "/"		ルートディレクトリの開始セクタをダンプ
                      	; CMD S FN$
                      	;=================================================
  C10B                	CMD_S:
  C10B  CD8576        		CALL	STR2ARG0			;
  C10E  E5            		PUSH	HL				;
  C10F  CD2E68        		CALL	IS_FAT16			;
  C112  CDB764        		CALL	CHANGE_WDIR			;
  C115  22A37C        		LD	(ARG0),HL			;
  C118  7E            		LD	A,(HL)				;
  C119  CD4B77        		CALL	IS_EOT				;エントリ名が空か？
  C11C  2008          		JR	NZ,.L1				;
  C11E  2A107D        		LD	HL,(WDIR_CLSTR)			;エントリ名が空ならワーキングディレクトリのクラスタ＃を使う
  C121  CD2D69        		CALL	GET_FIRST_SCTR			;
  C124  1813          		JR	.L2				;
                      	
  C126  0E00          	.L1:	LD	C,00H				;
  C128  CD5D65        		CALL	GET_DENT			;
  C12B  CA2B78        		JP	Z,ERR_NOT_FOUND			;存在しなければエラー
  C12E  2ADF7C        		LD	HL,(DIR_ENTRY+IDX_FAT)		;=一致したファイルのFATエントリ
  C131  7C            		LD	A,H				;FATエントリが0000Hなら空ファイルなのでエラーへ
  C132  B5            		OR	L				;
  C133  CA3178        		JP	Z,ERR_EMPTY_FILE		;
  C136  CD2D69        		CALL	GET_FIRST_SCTR			;
  C139  CD60C0        	.L2:	CALL	DUMP_SCTR			;メインルーチン
  C13C  CD4A65        		CALL	RESTORE_WDIR			;
  C13F  C34A76        		JP	CLOSE_CMD
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD CP 命令 ファイルをコピーする
                      	; CMD CP "/DIR/FROM.EXT","/DIR/TO.EXT"
                      	;=================================================
  C142                	CMD_CP:
  C142  CD3176        		CALL	GET_2STR_ARGS			;(ARG0)=コピー元,(ARG1)=コピー先
  C145  E5            		PUSH	HL				;
  C146  CD2E68        		CALL	IS_FAT16			;
  C149  212D7D        		LD	HL,DWA				;(DWA)<-セクタサイズ
  C14C  010000        		LD	BC,0000H			;
  C14F  110002        		LD	DE,SCTR_SIZE			;
  C152  CD746A        		CALL	DW_LD				;
  C155  CD4E76        		CALL	SWAP_ARGS			;(ARG0)<->(ARG1)
  C158  0E20          		LD	C,ATRB_FILE			;
  C15A  CD4A75        		CALL	PREP_DENT			;
  C15D  CD8365        		CALL	IS_READ_ONLY			;
  C160  21C57C        		LD	HL,DIR_ENTRY			;ディレクトリエントリバッファの内容をコピー用バッファに転送する
  C163  11517D        		LD	DE,CP_DENT			;
  C166  012600        		LD	BC,DENT_SIZE+06H		;バッファポインタとセクタ＃も含める
  C169  EDB0          		LDIR					;
  C16B  2A147D        		LD	HL,(TGT_CLSTR)			;HL<-コピー先ファイルの先頭クラスタ＃
  C16E  CD2D69        		CALL	GET_FIRST_SCTR			;
  C171  21317D        		LD	HL,DW0				;
  C174  114D7D        		LD	DE,CP_SCTR			;
  C177  CDAB6A        		CALL	DW_COPY				;
  C17A  CD4A65        		CALL	RESTORE_WDIR			;！重要！
  C17D  CD4E76        		CALL	SWAP_ARGS			;(ARG0)<->(ARG1)
  C180  CDB764        		CALL	CHANGE_WDIR			;
  C183  0E20          		LD	C,ATRB_FILE			;
  C185  CD5D65        		CALL	GET_DENT			;
  C188  CA2B78        		JP	Z,ERR_NOT_FOUND			;見つからなければエラー
  C18B  21E17C        		LD	HL,DIR_ENTRY+IDX_SIZE		;
  C18E  11167D        		LD	DE,FP				;
  C191  CDAB6A        		CALL	DW_COPY				;(FP)<-コピー元ファイルのファイルサイズ
  C194  21E17C        		LD	HL,DIR_ENTRY+IDX_SIZE		;コピー元のファイルサイズをコピー先に転送する
  C197  116D7D        		LD	DE,CP_DENT+IDX_SIZE		;
  C19A  CDAB6A        		CALL	DW_COPY				;
  C19D  2ADF7C        		LD	HL,(DIR_ENTRY+IDX_FAT)		;HL<-コピー元ファイルのクラスタ＃
  C1A0  DD21BD7C      		LD	IX,FILE_BFFR_STRCT		;
                      	
                      		;-----------------------------------------
                      	
  C1A4  E5            	.LOOP:	PUSH	HL				;クラスタ＃退避
  C1A5  CD2D69        		CALL	GET_FIRST_SCTR			;(DW0)<-クラスタHLのセクタ＃
  C1A8  3AEE7C        		LD	A,(SCTRS_PER_CLSTR)		;
  C1AB  47            		LD	B,A				;１クラスタを構成するセクタ数だけループする
  C1AC  C5            	.L1:	PUSH	BC				;カウンタ退避
  C1AD  CD33C2        		CALL	COPY_SCTR			;セクタコピー処理
  C1B0  CD846B        		CALL	DW0_INC				;コピー元のセクタ＃++
  C1B3  214D7D        		LD	HL,CP_SCTR			;コピー先のセクタ＃++
  C1B6  CD8B6B        		CALL	DW_INC				;
  C1B9  21167D        		LD	HL,FP				;(FP)<-(FP)-セクタサイズ
  C1BC  112D7D        		LD	DE,DWA				;
  C1BF  CD726B        		CALL	DW_SUB				;
  C1C2  384D          		JR	C,.EXIT				;(FP) <  0 なら終了へ
  C1C4  CDA36B        		CALL	DW_DEC				;
  C1C7  3848          		JR	C,.EXIT				;(FP) == 0 なら終了へ
  C1C9  CD8B6B        		CALL	DW_INC				;
  C1CC  C1            		POP	BC				;カウンタ復帰
  C1CD  10DD          		DJNZ	.L1				;
                      	
                      		;-----------------------------------------
                      	
                      		;コピー先 空きクラスタ検索処理
  C1CF  2A147D        		LD	HL,(TGT_CLSTR)			;クラスタHL以外の空きクラスタを探す
  C1D2  CDCB63        		CALL	FIND_NULL_CLSTR			;HL<-空きクラスタ＃,CY=1:見つかった
  C1D5  380F          		JR	C,.FOUND			;
  C1D7  2A147D        		LD	HL,(TGT_CLSTR)			;空きが見つからなければエラー処理
  C1DA  11FFFF        		LD	DE,0FFFFH			;=FATの終了コード
  C1DD  CD5963        		CALL	WRITE_FAT_DATA			;書き込み中のクラスタのFATエントリに終了コードをセットする
  C1E0  21EF77        		LD	HL,MSG_MEDIA_FULL		;エラー終了
  C1E3  C3FF69        		JP	ERR				;
                      	
  C1E6  ED5B147D      	.FOUND:	LD	DE,(TGT_CLSTR)			;DE<-(TGT_CLSTR)=現在のクラスタ＃
  C1EA  22147D        		LD	(TGT_CLSTR),HL			;(TGT_CLSTR)<-HL=空きクラスタ＃
  C1ED  EB            		EX	DE,HL				;HL=現在のクラスタ＃,DE=空きクラスタ＃
  C1EE  CD5963        		CALL	WRITE_FAT_DATA			;クラスタHLのFATエントリに空きクラスタDEをセットしリンクさせる
  C1F1  2A147D        		LD	HL,(TGT_CLSTR)			;HL<-空きクラスタ＃
  C1F4  CD2D69        		CALL	GET_FIRST_SCTR			;(DW0)<-空きクラスタの開始セクタ＃
  C1F7  21317D        		LD	HL,DW0				;(CP_SCTR)<-(DW0)
  C1FA  114D7D        		LD	DE,CP_SCTR			;
  C1FD  CDAB6A        		CALL	DW_COPY				;
                      	
                      		;-----------------------------------------
                      	
                      		;コピー元処理
  C200  E1            		POP	HL				;クラスタ＃復帰
  C201  CD8E63        		CALL	READ_FAT_DATA			;DE<-クラスタHLの次のクラスタ＃
  C204  D5            		PUSH	DE				;
  C205  E1            		POP	HL				;HL<-次のクラスタ＃
  C206  23            		INC	HL				;判定のため、クラスタ＃に１を加える
  C207  7C            		LD	A,H				;HLが0FFFFHの時、１加えると0000Hになることを利用している
  C208  B5            		OR	L				;
  C209  1E19          		LD	E,BAD_FILE_DATA			;次のクラスタ＃が0FFFFHならエラー
  C20B  CAF93B        		JP	Z,ERROR				;
  C20E  2B            		DEC	HL				;HLを元に戻す
  C20F  1893          		JR	.LOOP				;
                      	
                      		;-----------------------------------------
                      	
  C211  C1            	.EXIT:	POP	BC				;カウンタを捨てる
  C212  E1            		POP	HL				;クラスタ＃を捨てる
  C213  21517D        		LD	HL,CP_DENT			;コピー用バッファの内容をディレクトリエントリバッファに転送する
  C216  11C57C        		LD	DE,DIR_ENTRY			;
  C219  012600        		LD	BC,DENT_SIZE+06H		;
  C21C  EDB0          		LDIR					;
  C21E  CDD365        		CALL	WRITE_DENT			;ディレクトリエントリバッファの内容をメディアに書き込む
  C221  2A147D        		LD	HL,(TGT_CLSTR)			;HL<-最終クラスタ＃
  C224  11FFFF        		LD	DE,0FFFFH			;最終クラスタのFATエントリにFFFFHを書き込む
  C227  CD5963        		CALL	WRITE_FAT_DATA			;
  C22A  CD3F64        		CALL	FLUSH_BFFR			;
  C22D  CD4A65        		CALL	RESTORE_WDIR			;
  C230  C34A76        		JP	CLOSE_CMD			;
                      	
                      	;=================================================
                      	;[FS]セクタをコピーする
                      	;IN  IX=バッファ構造体,(DW0)=セクタ＃,(CP_SCTR)=コピー先のセクタ＃
                      	;OUT 
                      	;=================================================
  C233                	COPY_SCTR:
  C233  CD6A64        		CALL	LOAD_BFFR			;セクタ(DW0)をファイルバッファに読み込む
  C236  DDE5          		PUSH	IX				;バッファのセクタ情報に、コピー先のセクタ＃をセットする
  C238  D1            		POP	DE				;
  C239  214D7D        		LD	HL,CP_SCTR			;
  C23C  CDAB6A        		CALL	DW_COPY				;
  C23F  3EFF          		LD	A,TRUE				;バッファの更新フラグを立てる
  C241  DD7706        		LD	(IX+IDX_BUPD),A			;
  C244  CD8C64        		CALL	SAVE_BFFR			;バッファ書き込み
  C247  C9            		RET					;
                      	
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD MD命令 サブディレクトリ作成
                      	; CMD MD "/DIR1/DIR2"
                      	; CMD MD SD$
                      	;=================================================
  C248                	CMD_MD:
  C248  CD8576        		CALL	STR2ARG0			;
  C24B  E5            		PUSH	HL				;
  C24C  CD2E68        		CALL	IS_FAT16			;
  C24F  DD21BD7C      		LD	IX,FILE_BFFR_STRCT		;
  C253  CDB764        		CALL	CHANGE_WDIR			;
  C256  0E00          		LD	C,00H				;
  C258  CD5D65        		CALL	GET_DENT			;
  C25B  C23778        		JP	NZ,ERR_EXISTS			;存在していればエラー
  C25E  3E10          		LD	A,ATRB_DIR			;
  C260  32D07C        		LD	(DIR_ENTRY+IDX_ATRB),A		;
  C263  CDB065        		CALL 	TOUCH.NEW			;クラスタ＃と日時情報をセットする
  C266  CD8F65        		CALL	SET_DENT_FAT			;
  C269  CDD365        		CALL	WRITE_DENT			;
  C26C  2A147D        		LD	HL,(TGT_CLSTR)			;HL<-新規作成されたサブディレクトリの開始クラスタ＃
  C26F  11FFFF        		LD	DE,0FFFFH			;クラスタHLのFATエントリにFFFFHを書き込む
  C272  CD5963        		CALL	WRITE_FAT_DATA			;
  C275  CD3F64        		CALL	FLUSH_BFFR			;全バッファをメディアに書き込む
  C278  2A147D        		LD	HL,(TGT_CLSTR)			;
  C27B  CD2D69        		CALL	GET_FIRST_SCTR			;
  C27E  CD5D76        		CALL	CLR_CLSTR			;クラスタHLを初期化する
  C281  21317D        		LD	HL,DW0				;バッファ構造体のセクタ＃<-開始セクタ＃
  C284  DDE5          		PUSH	IX				;
  C286  D1            		POP	DE				;
  C287  CDAB6A        		CALL	DW_COPY				;
  C28A  CD6267        		CALL	CLR_DENT_BFFR			;ディレクトリエントリバッファをクリアし、FATエントリ値とファイルサイズを0にする
  C28D  3E10          		LD	A,ATRB_DIR			;
  C28F  32D07C        		LD	(DIR_ENTRY+IDX_ATRB),A		;
  C292  21D37C        		LD	HL,DIR_ENTRY+IDX_CTIME		;「作成日時」をセットする
  C295  CDF765        		CALL	SET_DATETIME			;
  C298  21DB7C        		LD	HL,DIR_ENTRY+IDX_TIME		;「更新日時」をセットする
  C29B  CDF765        		CALL	SET_DATETIME			;
  C29E  21C47C        		LD	HL,DNAME			;エントリ名を空白で埋める
  C2A1  0E20          		LD	C,SPC				;
  C2A3  CD5277        		CALL	FILL_STR			;
  C2A6  3E2E          		LD	A,"."				;エントリ名<-"."
  C2A8  32C57C        		LD	(DIR_ENTRY+IDX_NAME),A		;
  C2AB  2A147D        		LD	HL,(TGT_CLSTR)			;HL<-サブディレクトリ自身のクラスタ＃
  C2AE  EB            		EX	DE,HL				;
  C2AF  21DF7C        		LD	HL,DIR_ENTRY+IDX_FAT		;ディレクトリエントリバッファのFATエントリ<-自身のクラスタ＃
  C2B2  73            		LD	(HL),E				;
  C2B3  23            		INC	HL				;
  C2B4  72            		LD	(HL),D				;
  C2B5  DDE5          		PUSH	IX				;
  C2B7  E1            		POP	HL				;
  C2B8  110400        		LD	DE,IDX_BADR			;
  C2BB  19            		ADD	HL,DE				;
  C2BC  5E            		LD	E,(HL)				;
  C2BD  23            		INC	HL				;
  C2BE  56            		LD	D,(HL)				;DE<-バッファ構造体のバッファポインタ
  C2BF  D5            		PUSH	DE				;バッファ構造体のバッファポインタを退避
  C2C0  21C57C        		LD	HL,DIR_ENTRY			;
  C2C3  012000        		LD	BC,DENT_SIZE			;
  C2C6  EDB0          		LDIR					;ディレクトリバッファの内容をファイルバッファにコピーする
  C2C8  3E2E          		LD	A,"."				;エントリ名<-".."
  C2CA  32C67C        		LD	(DIR_ENTRY+IDX_NAME+1),A	;
  C2CD  2A107D        		LD	HL,(WDIR_CLSTR)			;HL<-ワーキングディレクトリのクラスタ＃
  C2D0  EB            		EX	DE,HL				;
  C2D1  21DF7C        		LD	HL,DIR_ENTRY+IDX_FAT		;ディレクトリエントリバッファのFATエントリ<-親ディレクトリのクラスタ＃
  C2D4  73            		LD	(HL),E				;
  C2D5  23            		INC	HL				;
  C2D6  72            		LD	(HL),D				;
  C2D7  E1            		POP	HL				;バッファ構造体のバッファポインタを復帰
  C2D8  112000        		LD	DE,DENT_SIZE			;
  C2DB  19            		ADD	HL,DE				;
  C2DC  EB            		EX	DE,HL				;DE<-次のエントリ位置
  C2DD  21C57C        		LD	HL,DIR_ENTRY			;
  C2E0  012000        		LD	BC,DENT_SIZE			;
  C2E3  EDB0          		LDIR					;
  C2E5  DD3606FF      		LD	(IX+IDX_BUPD),TRUE		;バッファの更新フラグを立てる
  C2E9  CD3F64        		CALL	FLUSH_BFFR			;FATとファイルバッファをメディアに書き込む
  C2EC  CD4A65        		CALL	RESTORE_WDIR			;
  C2EF  C34A76        		JP	CLOSE_CMD			;
                      	
                      	
                      	;=================================================
                      	;[CMD]CMD EX命令 サブディレクトリ拡張
                      	;・サブディレクトリに新しいクラスタを追加して、エントリ格納サイズを拡張する
                      	; CMD EX "DIR"
                      	; CMD EX SD$
                      	;=================================================
  C2F2                	CMD_EX:
  C2F2  CD8576        		CALL	STR2ARG0			;
  C2F5  E5            		PUSH	HL				;
  C2F6  CD2E68        		CALL	IS_FAT16			;
  C2F9  CDB764        		CALL	CHANGE_WDIR			;
  C2FC  22A37C        		LD	(ARG0),HL			;
  C2FF  0E10          		LD	C,ATRB_DIR			;
  C301  CD5D65        		CALL	GET_DENT			;
  C304  CA2B78        		JP	Z,ERR_NOT_FOUND			;
  C307  211A78        		LD	HL,MSG_EXPAND			;
  C30A  CD0A6A        		CALL	YES_NO				;
  C30D  203A          		JR	NZ,.EXIT			;
  C30F  2ADF7C        		LD	HL,(DIR_ENTRY+IDX_FAT)		;
  C312  7C            		LD	A,H				;
  C313  B5            		OR	L				;
  C314  1E05          		LD	E,ILLEGAL_FUNCTION_CALL		;
  C316  CAF93B        		JP	Z,ERROR				;FATエントリが未登録(0000H)ならエラー
  C319  CD8E63        	.L2:	CALL	READ_FAT_DATA			;DE<-クラスタHLのリンク先クラスタ＃。HL保持
  C31C  13            		INC	DE				;DE++
  C31D  7A            		LD	A,D				;
  C31E  B3            		OR	E				;
  C31F  2804          		JR	Z,.L1				;DE=0000H ?
  C321  1B            		DEC	DE				;DE--
  C322  EB            		EX	DE,HL				;HL<-リンク先クラスタ＃
  C323  18F4          		JR	.L2				;
                      	
  C325  E5            	.L1:	PUSH	HL				;最終クラスタ＃退避
  C326  CDCB63        		CALL	FIND_NULL_CLSTR			;HL<-空きクラスタ＃
  C329  EB            		EX	DE,HL				;DE=空きクラスタ＃
  C32A  E1            		POP	HL				;HL<-最終クラスタ＃
  C32B  3806          		JR	C,.FOUND			;
  C32D  21EF77        		LD	HL,MSG_MEDIA_FULL		;空きクラスタが見つからなければエラー終了
  C330  C3FF69        		JP	ERR				;
                      	
  C333  D5            	.FOUND:	PUSH	DE				;空きクラスタ＃退避
  C334  CD5963        		CALL	WRITE_FAT_DATA			;クラスタHLのFATデータとしてDEをセットする
  C337  EB            		EX	DE,HL				;HL=最終クラスタ＃
  C338  11FFFF        		LD	DE,0FFFFH			;最終クラスタのFATエントリに終了コードをセットする
  C33B  CD5963        		CALL	WRITE_FAT_DATA			;
  C33E  CD3F64        		CALL	FLUSH_BFFR			;FATをメディアに書き込む
  C341  E1            		POP	HL				;空きクラスタ＃復帰
  C342  DD21BD7C      		LD	IX,FILE_BFFR_STRCT		;
  C346  CD5D76        		CALL	CLR_CLSTR			;クラスタ初期化
  C349  CD4A65        	.EXIT:	CALL	RESTORE_WDIR			;
  C34C  C34A76        		JP	CLOSE_CMD			;
                      	
                      	
[EOF:EXT.asm]
                      	
[EOF:MAIN.asm]
------------------------
####  SYMBOL TABLE  ####
------------------------
$:			0C34FH
FALSE			00000H
TRUE			000FFH
EOL			00000H
USE_VIRTUAL_LED		000FFH
USE_VIRTUAL_SOUND	000FFH
SHOW_DATE		00000H
CLSTR_STACK_SIZE	00010H
IDX_PP_SCTR		001C6H
IDX_BPB			0000BH
SCTR_SIZE		00200H
DENT_PER_SCTR		00010H
MIN_CLSTR		00002H
MAX_CLSTR		0FFF6H
DNAME_SIZE		0000BH
DENT_SIZE		00020H
ROOT			00000H
IDX_NAME		00000H
IDX_EXT			00008H
IDX_ATRB		0000BH
IDX_CTIME		0000EH
IDX_CDATE		00010H
IDX_ADATE		00012H
IDX_TIME		00016H
IDX_DATE		00018H
IDX_FAT			0001AH
IDX_SIZE		0001CH
IDX_BADR		00004H
IDX_BUPD		00006H
SEPARATOR		0002FH
ATRB_DIR		00010H
ATRB_FILE		00020H
ID_DISABLED		000E5H
ATRB_SIZE		00006H
STR_BUFF		0FF3DH
STR_BUFF_SIZE		00050H
CB_BYTES		00200H
BEL			00007H
BS			00008H
LF			0000AH
CL			0000CH
CR			0000DH
SPC			00020H
DQUOTE			00022H
SQUOTE			00027H
WARMBOOT		0006AH
BASIC			00081H
PUTCH			00257H
BEEP			00350H
LOCATE			003A9H
CLRLN			00451H
CLS			0045AH
WIDTH			00843H
WIDTH_X			009A3H
WIDTH_Y			009D7H
CURSOFF			00BD2H
CURSON			00BE2H
ISBRK			00CF1H
KEYWAIT			00F75H
TIME_READ		01602H
TIME_WRT		01663H
SETFREADR		017E9H
DISKB_ERR		01875H
SCRNEDIT		01B7EH
PRTHLDEC		02D13H
CNVFACDEC		0309FH
ERROR			03BF9H
PRGFIT			03D76H
NEW			03DE0H
RUN			03DF4H
INPUT			03E5CH
TPSEEK			0409BH
CNVDECWORD		044C7H
EVALEXP			04A8FH
PRINT			052EDH
BYTE_EVALEXP		056FAH
FAC2INT			0592AH
MON			05C66H
GETADRS			05E21H
CNVBYTEHEX		05E83H
RNUM2RAD		05B85H
RAD2RNUM		05B86H
CNVHEXBYTE		05EA0H
PRTHLHEX		05EC0H
PRTAHEX			05EC5H
CPHLDE			05ED3H
CAPITAL			05FC1H
PUT_CR			05FCAH
PUT_SPC			05FD4H
FKEY_FLAG		0EA68H
DT_SEC			0EA76H
DT_MIN			0EA77H
DT_HOUR			0EA78H
DT_DAY			0EA79H
DT_MONTH		0EA7AH
DT_YEAR			0EA7BH
FKEYDATA		0EA7CH
FKEY_POINTER		0EAC0H
STACK_BEGIN		0EB50H
EXECLINENUM		0EB52H
BASBEGIN		0EB54H
KEYBUF			0EC96H
ACTIVE_FKEY		0EDC0H
FREE_END		0EF54H
STR_BEGIN		0EF79H
VARBEGIN		0EFA0H
ARRBEGIN		0EFA2H
FREBEGIN		0EFA4H
SYSUNUSED		0F216H
VRAM			0F300H
BOOTSTACK		0FF3DH
RS232BF1		0EDCEH
RS232BF2		0EE4EH
IEEEWK			0EED2H
ENT_CMD			0F0FDH
ENT_TALK		0F10CH
ENT_POLL		0F115H
ENT_MERGE		0F13CH
ENT_KILL		0F142H
ENT_LOAD		0F139H
ENT_SAVE		0F14BH
ENT_FILES		0F14EH
ENT_MOUNT		0F154H
ENT_NAME		0F13FH
ENT_RBYTE		0F11BH
SYNTAX_ERROR		00002H
ILLEGAL_FUNCTION_CALL	00005H
OUT_OF_MEMORY		00007H
STRING_TOO_LONG		0000FH
UNPRINTABLE		00015H
MISSING_OPERAND		00016H
LINE_BFFR_OVERFLOW	00017H
BAD_FILE_DATA		00019H
DEBUG			00000H
INIT_BASIC:		0601BH
INIT_FKEY:		06037H
INIT_FKEY.L2:		0603FH
INIT_FKEY.L1:		06041H
INIT_FKEY.L3:		0604EH
INIT_FKEY.L4:		06052H
INIT_FKEY.DATA:		06058H
INIT_CMDHOOK:		06067H
HI			00001H
PA_IN			00010H
PB_IN			00002H
PCL_IN			00001H
PCH_IN			00008H
A8255			000FCH
PPI_A			000FCH
PPI_B			000FDH
PPI_C			000FEH
PPI_CTL			000FFH
PPI_MMC			00088H
VLED_POS:		0F34EH
INIT_8255:		0609EH
INIT_8255.L1:		060B6H
MMC_1WR:		060BCH
MMC_1WR.L1:		060BFH
MMC_1WR.L2:		060D2H
MMC_1RD:		060EAH
MMC_1RD.LOOP:		060ECH
MMC_1RD.L1:		06100H
MMC_RES:		06103H
MMC_RES.LOOP:		06107H
MMC_TIMEOUT:		06121H
MMC_CLK:		06140H
MMC_CLK8:		06155H
MMC_INIT:		06167H
MMC_INIT.L1:		06198H
MMC_BRD_CMD:		061BCH
MMC_BRD_CMD.L1:		061EDH
MMC_BRD_END:		061FBH
MMC_BWR_CMD:		06202H
MMC_BWR_END:		0623EH
MMC_BWR_END.L1:		0624BH
MMC_CLR_ADR:		06264H
MMC_INC_ADR:		06272H
MMC_READ:		0628BH
MMC_READ.L1:		06294H
MMC_READ.L2:		06297H
MMC_WRITE:		062B0H
MMC_WRITE.L1:		062B9H
MMC_WRITE.L2:		062BCH
MMC_FILLB:		062D5H
MMC_FILLB.L1:		062DEH
MMC_FILLB.L2:		062E1H
MMC_WAIT:		062F9H
MMC_LED_ON:		062FDH
MMC_LED_OFF:		06311H
MMC_SOUND:		06323H
MMC_SOUND.L1:		06326H
ERASE_FAT_LINK:		06335H
ERASE_FAT_LINK.L1:	06335H
ERASE_FAT_LINK.EXIT2:	06358H
WRITE_FAT_DATA:		06359H
SYNC_FAT2_SCTR:		0637AH
READ_FAT_DATA:		0638EH
GET_FAT_SCTR:		063AAH
GET_FAT_POINTER:	063BBH
FIND_NULL_CLSTR:	063CBH
FIND_NULL_CLSTR.L1:	063DBH
FIND_NULL_CLSTR.L2:	063E3H
FIND_NULL_CLSTR.L4:	063E9H
FIND_NULL_CLSTR.L3:	063F9H
FIND_NULL_CLSTR.NOT:	06404H
FIND_NULL_CLSTR.FOUND:	06406H
FIND_NULL_CLSTR.SUB:	06408H
FIND_NULL_CLSTR.ERR1:	06412H
INIT_BFFR:		06413H
INIT_BFFR.SUB:		0642BH
FLUSH_BFFR:		0643FH
CLR_BFFR:		06459H
LOAD_BFFR:		0646AH
LOAD_BFFR.L1:		06476H
SAVE_BFFR:		0648CH
CLR_DNAME:		064AEH
CHANGE_WDIR:		064B7H
ENTER_SUBDIR:		064C6H
ENTER_SUBDIR.E1:	064E1H
ENTER_SUBDIR.EXIT:	064E4H
ENTER_ROOT:		064E6H
SPLIT_FPATH:		064ECH
SPLIT_FPATH.L1:		064EEH
SPLIT_FPATH.FOUND:	0650DH
SPLIT_FPATH.EXIT:	06511H
TRACE_PATH:		06513H
TRACE_PATH.L4:		0651FH
TRACE_PATH.L1:		06522H
TRACE_PATH.ADD:		06532H
STORE_WDIR:		06543H
RESTORE_WDIR:		0654AH
EOL2SPC:		06551H
EOL2SPC.L1:		06553H
EOL2SPC.L2:		06559H
GET_DENT:		0655DH
GET_DENT.MAIN:		06567H
IS_VALID_DENT:		06576H
IS_VALID_DENT.L1:	0657EH
IS_READ_ONLY:		06583H
SET_DENT_FAT:		0658FH
SET_DENT_FAT.FOUND:	065A4H
SET_DENT_FAT.L1:	065A7H
TOUCH:			065ABH
TOUCH.NEW:		065B0H
TOUCH.L1:		065C6H
TOUCH.UP:		065CCH
WRITE_DENT:		065D3H
SET_DATETIME:		065F7H
DIR_WALK:		0663AH
DIR_WALK.L4:		06647H
DIR_WALK.ROOT:		06651H
DIR_WALK.L2:		0665FH
DIR_WALK.L1:		0666BH
DIR_WALK.RET:		06675H
DIR_WALK.L3:		0667BH
DIR_WALK.QUIT:		06696H
SEARCH_NULL_DENT:	06699H
SEARCH_NULL_DENT.FOUND:	066A0H
GET_DENT_SUB:		066A4H
GET_DENT_SUB.L1:	066ADH
GET_DENT_SUB.FOUND:	066C8H
GET_DENT_SUB.EXIT:	066D7H
DENT_FOUND:		066DAH
PRT_DENT:		066EDH
PRT_DENT.L6:		066FFH
PRT_DENT.DIR:		06719H
PRT_DENT.NAME:		06724H
PRT_DENT.L1:		06728H
PRT_DENT.L2:		0672DH
PRT_DENT.L5:		06731H
PRT_DENT.L7:		06738H
PRT_DENT.L8:		0673EH
PRT_DENT.EXIT:		06749H
PRT_DENT.EXIT2:		0674AH
PRT_DENT.L4:		0674FH
PRT_DENT.L3:		0675CH
CLR_DENT_BFFR:		06762H
AUTOEXEC:		06772H
AUTOEXEC.NAME:		0679BH
IS_FILE:		067A7H
STR2BUFF:		067B6H
STR2BUFF.L2:		067C5H
STR2BUFF.L3:		067CEH
INIT_FAT16:		067D2H
PRT_VOLUME:		067ECH
PRT_VOLUME.L1:		0680CH
PRT_FSIZE:		06815H
PRT_FSIZE.L1:		06822H
IS_FAT16:		0682EH
READ_MBR:		0683EH
READ_IPL:		06862H
READ_IPL.L1:		06885H
READ_IPL.L2:		06890H
READ_BPB:		068A2H
READ_BPB.L1:		068DAH
GET_PHYSICAL_ADRS:	068F8H
READ_SCTR:		0691BH
WRITE_SCTR:		06924H
GET_FIRST_SCTR:		0692DH
GET_FIRST_SCTR.L1:	0693FH
GET_FIRST_SCTR.EXIT:	06953H
DNAME2CLSTR:		06957H
IS_INFO_ON:		0696BH
PAUSE:			06970H
EXT_TABLE_JUMP:		0697EH
EXT_TABLE_JUMP.L3:	0697EH
EXT_TABLE_JUMP.L2:	06984H
EXT_TABLE_JUMP.L1:	06992H
GET_ARGS:		069A1H
GET_ARGS.INC:		069D0H
RESET_ARGS:		069D7H
RESET_ARGS.L1:		069DEH
IS_HEX:			069E4H
IS_HEX.ERR:		069F8H
IS_HEX.EXIT:		069FDH
ERR:			069FFH
YES_NO:			06A0AH
BCD2BIN:		06A2FH
IPRINT:			06A45H
IPRINT.L1:		06A47H
IPRINT.L2:		06A4FH
PUTHEX:			06A52H
PRT_DW_HEX:		06A5CH
PRT_DW_HEX.L1:		06A63H
INIT_DW:		06A6DH
DW_LD:			06A74H
DW0_CP:			06A7EH
DW_CP:			06A8AH
DW_CP.E1:		06A8DH
DW_CP.L1:		06A9AH
DW_CP.EXIT:		06AA1H
DW_COPY:		06AABH
DW0_PUSH:		06AB7H
DW_PUSH:		06ABFH
DW_PUSH.E1:		06AC1H
DW0_POP:		06ADDH
DW_POP:			06AE6H
DW_POP.E1:		06AE9H
DW0_ILD:		06B06H
DW0_ILD.L1:		06B0EH
DW0_ILD.L2:		06B14H
DW0_CLR:		06B18H
DW_CLR:			06B1FH
DW_CLR.E1:		06B20H
DW0_SWAP:		06B2AH
DW_SWAP:		06B36H
DW_SWAP.E1:		06B39H
DW_SWAP.L1:		06B3BH
DW0_ADD:		06B49H
DW_ADD:			06B55H
DW_ADD.E1:		06B58H
DW_ADD.L1:		06B5BH
DW0_SUB:		06B66H
DW_SUB:			06B72H
DW_SUB.E1:		06B75H
DW_SUB.L1:		06B79H
DW0_INC:		06B84H
DW_INC:			06B8BH
DW_INC.E1:		06B8CH
DW_INC.EXIT:		06B99H
DW0_DEC:		06B9BH
DW_DEC:			06BA3H
DW_DEC.E1:		06BA5H
DW_DEC.L1:		06BAFH
DW_DEC.EXIT:		06BB7H
DW0_X2:			06BBAH
DW_X2:			06BC1H
DW_X2.E1:		06BC2H
DW_X256:		06BCFH
DW_X512:		06BE5H
HLXDE:			06BECH
HLXDE.L2:		06C00H
HLXDE.L1:		06C0FH
INIT_FP:		06C19H
IS_FP_OFST_ZERO:	06C2FH
FP2SCTR:		06C37H
GET_FP_CLSTR:		06C4EH
GET_FP_CLSTR.L1:	06C58H
READ_FP_SCTR:		06C61H
FETCH_1BYTE:		06C68H
FP2BP:			06C72H
INC_FP:			06C81H
INC_FP.L1:		06CAAH
INC_FP.EXIT:		06CADH
NEXT_CLSTR:		06CAFH
PARSE_FP:		06CC8H
PARSE_FP.L1:		06CE7H
PARSE_FP.L2:		06CF3H
POST_1BYTE:		06CF9H
INC_FP_W:		06D0AH
INC_FP_W.NULL:		06D37H
INC_FP_W.FOUND:		06D4BH
INC_FP_W.NEW:		06D56H
INC_FP_W.EXIT:		06D68H
SET_FP_END:		06D69H
SET_FP_END.L1:		06D8EH
GET_2STR_PTR:		06D92H
EXP2WORD:		06DB0H
EXP2WORD.SKIP:		06DB1H
WORD_JUMP:		06DBBH
WORD_JUMP.L1:		06DBEH
WORD_JUMP.L3:		06DC8H
WORD_JUMP.NEXT:		06DCBH
WORD_JUMP.EQUAL:	06DD5H
OPEN_DQUOTE:		06DEBH
CLOSE_DQUOTE:		06DF8H
SKIP_SPC:		06DFEH
SKIP_SPC.L1:		06DFEH
SKIP_CHR:		06E05H
SKIP_CHR.L1:		06E05H
BIN_MARK:		0003AH
BAS_MARK:		000D3H
BAS_MARK_LEN:		0000AH
BAS_ZERO:		0000AH
CMT_STACK_LVL:		00040H
BFNAME_SIZE:		00006H
READ_CMT:		06E0EH
READ_CMT.LOOP:		06E17H
READ_CMT.L1:		06E22H
READ_CMT.L3:		06E2AH
READ_CMT.L5:		06E2DH
READ_CMT.L4:		06E37H
READ_CMT_BASIC:		06E43H
READ_CMT_BASIC.L4:	06E45H
READ_CMT_BASIC.L1:	06E55H
READ_CMT_BASIC.L9:	06E7AH
READ_CMT_BASIC.L2:	06E80H
READ_CMT_BASIC.L3:	06E82H
READ_CMT_BASIC.L5:	06E92H
READ_CMT_BINARY:	06E9BH
READ_CMT_BINARY.L1:	06EC8H
READ_CMT_BINARY.L2:	06ED7H
READ_CMT_BINARY.L3:	06EE8H
READ_CMT_BINARY.L5:	06EF7H
READ_ERR:		06EFBH
CHECK_STACK_AREA:	06F15H
CHECK_STACK_AREA.ERR:	06F28H
CHECK_STACK_AREA.EXIT:	06F32H
GET_FIREWALL:		06F35H
PSEUDO_MON:		06F3DH
PSEUDO_MON.L1:		06F44H
PSEUDO_MON.EXIT:	06F61H
PSEUDO_MON.SUB:		06F62H
WRITE_CMT:		06F6EH
WRITE_CMT.MERGE:	06F71H
WRITE_CMT.ERR:		06F8AH
WRITE_CMT.RET:		06F8FH
IS_BASIC:		06F92H
WRITE_CMT_BASIC:	06F9BH
WRITE_CMT_BASIC.HEADR:	06FB1H
WRITE_CMT_BASIC.FNAME:	06FC6H
WRITE_CMT_BASIC.L1:	06FCDH
WRITE_CMT_BASIC.DATA:	06FE5H
WRITE_CMT_BASIC.FOOTR:	06FF1H
WRITE_CMT_BINARY:	06FF8H
WRITE_CMT_BINARY.L2:	07010H
WRITE_CMT_BINARY.L3:	07025H
WRITE_CMT_BINARY.L1:	0702CH
WRITE_CMT_BINARY.EXIT:	07040H
PREP_READ:		07049H
FIN_READ_BASIC:		0705BH
PREP_WRITE:		07068H
FIN_WRITE:		07085H
PRT_WRITE_BIN_INFO:	0709BH
IS_SAFE_ZONE:		070C1H
READ_BIN:		070D7H
READ_BIN.L10:		07130H
READ_BIN.L6:		07132H
READ_BIN.L5:		0713DH
READ_BIN.L9:		0715FH
READ_BIN.L2:		0716EH
READ_BIN.LOOP:		07171H
READ_BIN.L1:		07176H
READ_BIN.RET:		0718AH
READ_BIN.L8:		0718EH
READ_BIN.L7:		07193H
READ_BIN.L3:		071A6H
EXECUTE:		071A7H
EXECUTE.L1:		071DEH
WRITE_BIN:		071E3H
WRITE_BIN.ERR:		07200H
WRITE_BIN.L1:		07205H
WRITE_BIN.L2:		07228H
READ_BAS:		07235H
READ_BAS.L1:		07243H
READ_BAS.L4:		07253H
READ_BAS.L2:		07259H
READ_BAS.L3:		0725BH
READ_BAS.L5:		0726BH
WRITE_BAS:		07274H
WRITE_BAS.L1:		0728BH
WRITE_BAS.L2:		072A5H
KANJI:			000FFH
SECONDS:		00000H
PRT_FDATE:		072B2H
PRT_FTIME:		072CFH
GET_FDATE:		072E5H
GET_FDATE.L2:		072F9H
GET_FDATE.L1:		07301H
GET_FTIME:		07303H
ENC_TIME:		07319H
ENC_DATE:		07331H
PRT_WDEC:		07347H
PRT_WDEC.L4:		07348H
PRT_WDEC.L3:		07350H
PRT_WDEC.L2:		07354H
PRT_WDEC.L1:		0735AH
DUMP_DENT:		07367H
DUMP_DENT.L1:		0737BH
DUMP_DENT.L4:		073A4H
DUMP_DENT.L2:		073AAH
DUMP_DENT.L3:		073ACH
DUMP_DENT.L5:		073B9H
DUMP_DENT.L6:		07425H
DUMP_DENT.L7:		07439H
ATRB_BIT_SYMBL:		0745EH
DUMP8:			07464H
DUMP8.L1:		07477H
DUMP8.L2:		07483H
CMD:			07487H
CMD_V:			0748FH
CMD_V.L1:		074A0H
CMD_F:			074BBH
CMD_P:			074C1H
CMD_ON:			074DCH
INFO:			074DEH
INFO.L1:		074F2H
CMD_OFF:		074F5H
CMD_R:			074F9H
LOAD:			0750FH
LOAD.E1:		07516H
SAVE:			0752CH
PREP_DENT:		0754AH
POLL:			07559H
KILL:			07569H
KILL.L1:		0757BH
KILL.DIR:		0758EH
KILL.EXIT:		0759CH
MOUNT:			0759FH
FILES:			075BAH
FILES.L1:		075C4H
MERGE:			075D4H
NAME:			075F7H
GET_2STR_ARGS:		07631H
CLOSE_CMD:		0764AH
SWAP_ARGS:		0764EH
CLR_CLSTR:		0765DH
CLR_CLSTR.L1:		0766AH
STR2ARG0:		07685H
IS_DOT:			07690H
IS_DOT.L2:		076A6H
IS_DOT.L1:		076B0H
IS_DOT.EXIT:		076B6H
STR2SFN:		076B8H
STR2SFN.L1:		076C7H
STR2SFN.L7:		076D2H
STR2SFN.L4:		076D7H
STR2SFN.L2:		076DFH
STR2SFN.L3:		076E1H
STR2SFN.L5:		076ECH
STR2SFN.L6:		076F3H
STR2SFN.EXIT:		07706H
STR2SFN.COUNT:		0770FH
SFN_ADD_STR:		07713H
SFN_ADD_SPC:		07722H
SFN_ADD_SPC.L1:		07725H
FIX_CHR:		0772DH
IS_NGCHR:		07736H
IS_NGCHR.ERR:		07745H
IS_EOT:			0774BH
NULL_STR:		07750H
FILL_STR:		07752H
FILL_STR.L1:		07756H
ADD_STR:		0775DH
ADD_STR.L2:		07760H
ADD_STR.L3:		07768H
ADD_STR.EXIT:		0776AH
MSG_TITLE:		0776DH
MSG_NOT_FOUND:		07787H
MSG_NOT_SUPPORTED_EXT:	07791H
MSG_NG_NAME:		07799H
MSG_SCTR_OVERFLOW:	077A1H
MSG_MEMORY_CONFLICT:	077AAH
MSG_BAD_FORMAT:		077C9H
MSG_NOT_FAT16:		077D4H
MSG_CANCELED:		077DEH
MSG_EMPTY_FILE:		077E9H
MSG_MEDIA_FULL:		077EFH
MSG_DIR_FULL:		077F4H
MSG_NO_NAME:		077FDH
MSG_NG_CHR:		07805H
MSG_KILL_FILE:		0780CH
MSG_EXISTS:		07813H
MSG_EXPAND:		0781AH
MSG_READ_ONLY:		07821H
ERR_NOT_FOUND:		0782BH
ERR_EMPTY_FILE:		07831H
ERR_EXISTS:		07837H
FAT_CODE:		0783DH
NG_CHR:			07845H
NG_CHR_END		07851H
CMD_TABLE:		07851H
JUMP_TABLE:		0786DH
JT_CP:			07879H
JT_D:			0787BH
JT_EX:			0787DH
JT_MD:			0787FH
JT_S:			07881H
EXT_LOAD_TABLE:		07883H
EXT_SAVE_TABLE:		07893H
WORK_AREA:		078A3H
FAT_BFFR:		078A3H
FILE_BFFR:		07AA3H
ARG0:			07CA3H
ARG1:			07CA5H
ARG2:			07CA7H
ARG3:			07CA9H
ARGNUM:			07CABH
EXECFLG:		07CACH
EXECADR:		07CADH
FAT1_BFFR_STRCT:	07CAFH
FAT1_BFFR_STRCT.SCTR:	07CAFH
FAT1_BFFR_STRCT.BP:	07CB3H
FAT1_BFFR_STRCT.FLG:	07CB5H
FAT2_BFFR_STRCT:	07CB6H
FAT2_BFFR_STRCT.SCTR:	07CB6H
FAT2_BFFR_STRCT.BP:	07CBAH
FAT2_BFFR_STRCT.FLG:	07CBCH
FILE_BFFR_STRCT:	07CBDH
FILE_BFFR_STRCT.SCTR:	07CBDH
FILE_BFFR_STRCT.BP:	07CC1H
FILE_BFFR_STRCT.FLG:	07CC3H
DNAME:			07CC4H
DIR_ENTRY:		07CC5H
DIR_ENTRY.SCTR:		07CE5H
DIR_ENTRY.BP:		07CE9H
FOUND:			07CEBH
BPB:			07CECH
PP_SCTR:		07CFFH
ROOT_SCTR_SIZE:		07D03H
FAT_SCTR:		07D04H
ROOT_SCTR:		07D08H
DATA_SCTR:		07D0CH
WDIR_CLSTR:		07D10H
WDIR_ORG:		07D12H
TGT_CLSTR:		07D14H
FP:			07D16H
FP_CLSTR:		07D1AH
FP_CLSTR_SN:		07D1CH
FP_SCTR_SN:		07D1EH
ATRB:			07D1FH
FIREWALL:		07D26H
TIMEOUT:		07D28H
MMCADR0:		07D29H
MMCADR1:		07D2AH
MMCADR2:		07D2BH
MMCADR3:		07D2CH
DWA:			07D2DH
DW0:			07D31H
DW1:			07D35H
DW_SP_ORG:		07D39H
DW_SP:			07D3BH
DW_STACK		07D4DH
CP_SCTR:		07D4DH
CP_DENT:		07D51H
CP_DENT.SCTR:		07D71H
CP_DENT.BP:		07D75H
CHECKSUM:		07D77H
INFO_SW:		07D79H
IS_CALLBACK:		07D7AH
CALLBACK:		07D7BH
INFO_BUF:		07D7DH
FREE_AREA		07D8DH
SCTRS_PER_CLSTR		07CEEH
FAT_START		07CEFH
ROOT_SIZE		07CF2H
FAT_SIZE		07CF7H
INIT_EXT_CMD:		0C000H
CMD_D:			0C02EH
CMD_D.L1:		0C03FH
CMD_D.L2:		0C056H
CMD_D.L3:		0C057H
DUMP_SCTR:		0C060H
DUMP_SCTR.L4:		0C06CH
DUMP_SCTR.L3:		0C076H
DUMP_SCTR.L2:		0C07BH
DUMP_SCTR.L1:		0C08BH
DUMP_SCTR.L6:		0C09DH
DUMP_SCTR.L7:		0C0A5H
DUMP_SCTR.L5:		0C0C7H
DUMP_SCTR.HEADER:	0C0CFH
DUMP_SCTR.L10:		0C0E0H
DUMP_SCTR.L11:		0C0EAH
CMD_S:			0C10BH
CMD_S.L1:		0C126H
CMD_S.L2:		0C139H
CMD_CP:			0C142H
CMD_CP.LOOP:		0C1A4H
CMD_CP.L1:		0C1ACH
CMD_CP.FOUND:		0C1E6H
CMD_CP.EXIT:		0C211H
COPY_SCTR:		0C233H
CMD_MD:			0C248H
CMD_EX:			0C2F2H
CMD_EX.L2:		0C319H
CMD_EX.L1:		0C325H
CMD_EX.FOUND:		0C333H
CMD_EX.EXIT:		0C349H
------------------------
